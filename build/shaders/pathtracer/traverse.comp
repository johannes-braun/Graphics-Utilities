#include "../ext/bvh.h"

layout(local_size_x = 64) in;

uniform uintptr_t vertices;
uniform uintptr_t elements;
uniform uintptr_t bvh;

struct ray
{
    vec4 origin_px;
    vec4 direction_py;
    vec2 barycentric;
    int mesh;
    int triangle;
};

layout(binding = 0) restrict buffer RayBuffer
{
    ray rays[];
};

void main()
{
    if(gl_GlobalInvocationID.x > rays.length())
        return;

    ray r = rays[gl_GlobalInvocationID.x];

    if(r.mesh == -2)
        return;

    bvh_state_set_mode(bvh_mode_nearest);
    bvh_result result = bvh_hit(r.origin_px.xyz, r.direction_py.xyz, bvh, elements, vertices, 1.f/0.f);
    if(result.hits)
    {
        r.mesh = 0;
        r.triangle = int(result.near_triangle);
        r.barycentric = result.near_barycentric;
    }
    else
    {
        r.mesh = -2;
    }
    
    rays[gl_GlobalInvocationID.x] = r;
}