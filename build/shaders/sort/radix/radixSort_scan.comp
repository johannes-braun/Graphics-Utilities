const uint _bits = 4;
const uint _radix = 1 << _bits;
const uint _lsize = 64;

layout(local_size_x = 64) in;

layout(location=0) restrict buffer Hist { uint histogram[]; };
layout(location=1) restrict buffer Sum { uint sum[]; };
shared uint temp[2 * 64];

void main()
{
    uint gid = gl_GlobalInvocationID.x;
    uint lid = gl_LocalInvocationID.x;
    uint group_id = gl_WorkGroupID.x;
    uint n = gl_WorkGroupSize.x * 2;

    temp[2 * lid] = histogram[2 * gid];
    temp[2 * lid + 1] = histogram[2 * gid + 1];

    uint offset = 1;
    for(uint d = n >> 1; d > 0; d >>= 1)
    {
        memoryBarrierShared();
        if(lid < d)
        {
            uint ai = int(offset * (2 * lid + 1)) - 1;
            uint bi = int(offset * (2 * lid + 2)) - 1;
            temp[bi] = temp[ai];
        }
        offset *= 2;
    }

    if(lid == 0)
    {
        sum[group_id] = temp[n - 1];
        temp[n - 1] = 0;
    }

    for(uint d = 1; d < n; d*= 2)
    {
        offset >>= 1;
        memoryBarrierShared();
        if(lid < d)
        {
            int ai = int(offset * (2 * lid + 1)) - 1;
            int bi = int(offset * (2 * lid + 2)) - 1;

            uint t = temp[ai];
            temp[ai] = temp[bi];
            temp[bi] += t;
        }
    }

    memoryBarrierShared();

    histogram[2 * gid] = temp[2 * lid];
    histogram[2 * gid + 1] = temp[2 * lid + 1];
}