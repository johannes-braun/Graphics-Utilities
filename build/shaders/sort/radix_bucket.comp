#extension GL_ARB_shader_ballot : enable
#extension GL_NV_gpu_shader5 : enable
#define WSIZE 32

layout(local_size_x=WSIZE) in;

layout(binding=0) restrict buffer Data
{
    uint data[];
};

layout(binding=2) restrict buffer Buckets
{
    uint buckets[];
};

uniform uint four_shift;

shared uint sdata[2*WSIZE];

#define UPPER_BIT 32
#define LOWER_BIT 0

uint popcnt(uint i)
{
     i = i - ((i >> 1) & 0x55555555);
     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);
     return (((i + (i >> 4)) & 0x0F0F0F0F) * 0x01010101) >> 24;
}

void main()
{
    sdata[gl_LocalInvocationID.x] = data[gl_GlobalInvocationID.x];
    
    memoryBarrierShared();

    uint bitmask = 1 << LOWER_BIT;
    uint offset = 0;
    uint thrmask = ~0 << gl_LocalInvocationID.x;
    uint mypos;

    for(int i = LOWER_BIT; i <= UPPER_BIT; ++i)
    {
        uint mydata = sdata[((WSIZE-1) - gl_LocalInvocationID.x) + offset];
        uint mybit = mydata & bitmask;
        uint ones = uint(ballotARB(bool(mybit)));
        uint zeroes = ~ones;
        offset ^= WSIZE;

        if(!bool(mybit))
            mypos = popcnt(zeroes & thrmask);
        else
            mypos = popcnt(zeroes) + popcnt(ones & thrmask);

        sdata[mypos - 1 + offset] = mydata;
        bitmask <<= 1;
    }
    
    data[gl_GlobalInvocationID.x] = sdata[gl_LocalInvocationID.x + offset];
}