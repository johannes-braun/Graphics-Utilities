#pragma once
#include <array>
#include <cinttypes>
#include <vector>

namespace gfx { inline namespace v1 { namespace spirv {

#if defined(_MSC_VER)
#define dynamic_export extern "C" __declspec(dllexport)
#elif defined(__GNUC__)
#define dynamic_export extern "C" __attribute__((visibility("default")))
#endif

    namespace normalization {
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_center_point_frag = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_CENTER_POINT_FRAG@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_cube_frag = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_CUBE_FRAG@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_cube_front_frag = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_CUBE_FRONT_FRAG@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_gizmo_frag = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_GIZMO_FRAG@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_image_frag = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_IMAGE_FRAG@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_points_frag = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_POINTS_FRAG@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_center_point_vert = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_CENTER_POINT_VERT@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_cube_vert = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_CUBE_VERT@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_gizmo_vert = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_GIZMO_VERT@; }
    namespace shaders { dynamic_export std::vector<uint32_t> shaders_points_vert = @GFX_SHADER_SOURCE_EXAMPLES_01_COLOR_NORMALIZATION_SHADERS_POINTS_VERT@; }
}}}}