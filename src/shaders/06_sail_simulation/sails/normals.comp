layout(local_size_x = 32) in;

struct vertex
{
    vec3 position;
    uint meta;
    vec3 normal;
    uint meta2;
    vec2 uv;
    uint meta3[2];
};

layout(binding = 0) uniform Data
{
    restrict vertex* vertices;
    restrict uint* indices;
    int triangle_count;
};

void main()
{
    if(gl_GlobalInvocationID.x >= triangle_count)
        return;

    vertex v1 = vertices[indices[gl_GlobalInvocationID.x * 3 + 0]];
    vertex v2 = vertices[indices[gl_GlobalInvocationID.x * 3 + 1]];
    vertex v3 = vertices[indices[gl_GlobalInvocationID.x * 3 + 2]];

    vec3 d1 = normalize(v2.position - v1.position);
    vec3 d2 = normalize(v3.position - v1.position);
    v1.normal = cross(d2, d1);

    vertices[indices[gl_GlobalInvocationID.x * 3 + 0]] = v1;
}