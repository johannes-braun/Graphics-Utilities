#version 460 core

#include "../api.glsl"

layout(local_size_x = 128) in;

struct boid
{
	vec2 position;
	vec2 velocity;
	vec4 color;
};

layout(loc_gl(0) loc_vk(0, 0)) readonly buffer SourceBoids
{
	boid src_boids[];
};

layout(loc_gl(1) loc_vk(0, 1)) writeonly buffer DestinationBoids
{
	boid dst_boids[];
};

layout(loc_gl(0) loc_vk(0, 2)) uniform Mouse
{
	vec2 position;
	float dt;
} mouse;

void main()
{
	const int len = int(src_boids.length());
	const int id  = int(gl_GlobalInvocationID.x);
	if(id >= len) return;

	boid item = src_boids[id];

	const float dt = mouse.dt;
	const float radius = 0.06f;
	const float sep = 0.020f;
	const float ff = 1.f;
	
	item.position += dt * item.velocity;

	vec2 dsts = vec2(0);
	vec2 cdir = item.position;
	int ncount = 1;
	vec2 odir = vec2(0);
	vec2 vgen = item.velocity;
	int ocount = 0;
	vec2 cdiff = vec2(0);
	for(int i=0; i <= src_boids.length(); ++i)
	{
		if(i == id)
			continue;
			
		vec2 p = i == src_boids.length() ? mouse.position : src_boids[i].position;
		vec2 v = i == src_boids.length() ? vec2(0) : src_boids[i].velocity;
	    vec2 dir = p - item.position;
		float len = length(dir);

		if(len < radius)
		{
			++ ncount;
			cdir += 8.5f*(dir);
			vgen += v;

			if(len < sep)
			{
				odir += normalize(dir);
				++ocount;
			}
		}
	}

	dsts = ff * (cdir/ncount);
	if(ocount > 0)
		dsts -= 5*ff * (odir/ocount);

	item.velocity = clamp(0.99999f*item.velocity + dt * (dsts + (vgen/ncount - item.velocity) + cdiff/ncount - (item.position - mouse.position) / max(pow(length((item.position - mouse.position)), 1.5), 0.15f)), -0.8, 0.8);

	if(item.position.x > 1 || item.position.x < -1)
	{
		item.velocity.x *= -1;
		item.position.x = round(item.position.x);
	}
	if(item.position.y > 1 || item.position.y < -1)
	{
		item.velocity.y *= -1;
		item.position.y = round(item.position.y);
	}

	dst_boids[id] = item;
}