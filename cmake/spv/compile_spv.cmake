
function(create_spirv target_name source_dir header_output namespace)
	file(GLOB_RECURSE gfx_current_vert ${source_dir}/*.vert)
	file(GLOB_RECURSE gfx_current_frag ${source_dir}/*.frag)
	file(GLOB_RECURSE gfx_current_geom ${source_dir}/*.geom)
	file(GLOB_RECURSE gfx_current_tese ${source_dir}/*.tese)
	file(GLOB_RECURSE gfx_current_tesc ${source_dir}/*.tesc)
	file(GLOB_RECURSE gfx_current_comp ${source_dir}/*.comp)

	set(namespace_output "#pragma once\n#include <string_view>\n#include <filesystem>\n\nnamespace gfx { inline namespace v1 { namespace shader_paths {\n")
	set(namespace_output "${namespace_output}#ifndef GFX_HAS_LOCAL_BASE_PATH\n")
	set(namespace_output "${namespace_output}#define GFX_HAS_LOCAL_BASE_PATH\n")
	set(namespace_output "${namespace_output}    const std::filesystem::path local_base_path = \"${CMAKE_CURRENT_BINARY_DIR}\"\\\;\n")
	set(namespace_output "${namespace_output}#endif //GFX_HAS_LOCAL_BASE_PATH\n")
	set(namespace_output "${namespace_output}    namespace ${namespace} {\n")
	set(GLSLC_COMMAND glslc)
	foreach(file ${gfx_current_frag} ${gfx_current_vert} ${gfx_current_geom} ${gfx_current_tese} ${gfx_current_tesc} ${gfx_current_comp})
		file(RELATIVE_PATH full_relative_file ${PROJECT_SOURCE_DIR}/ ${file})
		file(RELATIVE_PATH relative_file ${source_dir}/ ${file})
		get_filename_component(current_dir ${relative_file} DIRECTORY)
		set(default_subdir ${current_dir})
		get_filename_component(current_filename ${relative_file} NAME)
		string(REPLACE "-" "_" relative_file ${relative_file})
		string(REPLACE " " "_" relative_file ${relative_file})
		string(REPLACE "." "_" relative_file ${relative_file})
		string(REGEX REPLACE "[- .\\/]" "_" full_relative_file ${full_relative_file})
		string(TOUPPER ${full_relative_file} full_relative_file)
		set(full_relative_file GFX_HAS_PATH_${full_relative_file})
		string(REPLACE "-" "_" current_filename ${current_filename})
		string(REPLACE " " "_" current_filename ${current_filename})
		string(REPLACE "." "_" current_filename ${current_filename})
		file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${default_subdir})
		if(current_dir)
			string(REPLACE "-" "_" current_dir ${current_dir})
			string(REPLACE " " "_" current_dir ${current_dir})
			string(REPLACE "." "_" current_dir ${current_dir})
			set(iter_list ${current_dir})
			string(REPLACE " " "::" iter_list ${iter_list})
			set(namespace_output "${namespace_output}#ifndef ${full_relative_file}\n")
			set(namespace_output "${namespace_output}#define ${full_relative_file}\n")
			set(namespace_output "${namespace_output}    namespace ${iter_list} { constexpr std::string_view ${current_filename} = \"${relative_file}.spv\"\\\; }\n")
			set(namespace_output "${namespace_output}#endif //${full_relative_file}\n")
		else()
			set(namespace_output "${namespace_output}    constexpr std::string_view ${current_filename} = \"${relative_file}.spv\"\\\;\n")
		endif()

		execute_process(COMMAND ${GLSLC_COMMAND} -M "${file}" OUTPUT_VARIABLE FILE_DEPENDENCIES ERROR_VARIABLE FILE_ERROR)
		if(FILE_ERROR)
			message(FATAL_ERROR ${FILE_ERROR})
		endif()
		string(REPLACE " " ";" FILE_DEPENDENCIES_L ${FILE_DEPENDENCIES})
		list(REMOVE_AT FILE_DEPENDENCIES_L 0)

		add_custom_command(
			OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${relative_file}.spv
			COMMAND ${GLSLC_COMMAND} "${file}" -o "${CMAKE_CURRENT_BINARY_DIR}/${relative_file}.spv" -c
			DEPENDS ${FILE_DEPENDENCIES_L})
		list(APPEND SPIRV_vulkan ${CMAKE_CURRENT_BINARY_DIR}/${relative_file}.spv)
	endforeach()
	add_custom_target(${target_name}.spirv DEPENDS ${SPIRV_vulkan})

	set(namespace_output ${namespace_output}}}}})
	get_filename_component(out_dir ${header_output} DIRECTORY)
	file(MAKE_DIRECTORY ${out_dir})
	file(WRITE ${header_output} ${namespace_output})

	add_library(${target_name} INTERFACE)
	set(gfx_current_module shaders)
	target_include_directories(gfx.${gfx_current_module} INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/include/)
	target_include_directories(gfx.${gfx_current_module} INTERFACE $<INSTALL_INTERFACE:include>)
	add_dependencies(${target_name} ${target_name}.spirv)
endfunction()