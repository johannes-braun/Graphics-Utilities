#pragma once 
/* This header contains all needed OpenGL function pointers.
*/
#include "mygl_types.hpp"
#include <memory>

#if __cpp_noexcept_function_type >= 201510
#   define MYGL_NOEXCEPT noexcept
#else
#   define MYGL_NOEXCEPT
#endif

void glActiveShaderProgram(mygl::pipeline pipeline, mygl::shader_program program) MYGL_NOEXCEPT;
void glActiveTexture(mygl::texture texture) MYGL_NOEXCEPT;
void glAttachShader(mygl::shader_program program, mygl::shader shader) MYGL_NOEXCEPT;
void glBeginConditionalRender(std::uint32_t id, gl_enum mode) MYGL_NOEXCEPT;
void glBeginQuery(gl_enum target, mygl::query id) MYGL_NOEXCEPT;
void glBeginQueryIndexed(gl_enum target, std::uint32_t index, mygl::query id) MYGL_NOEXCEPT;
void glBeginTransformFeedback(gl_enum primitiveMode) MYGL_NOEXCEPT;
void glBindAttribLocation(mygl::shader_program program, std::uint32_t index, const char * name) MYGL_NOEXCEPT;
void glBindBuffer(gl_enum target, mygl::buffer buffer) MYGL_NOEXCEPT;
void glBindBufferBase(gl_enum target, std::uint32_t index, mygl::buffer buffer) MYGL_NOEXCEPT;
void glBindBufferRange(gl_enum target, std::uint32_t index, mygl::buffer buffer, std::intptr_t offset, std::int64_t size) MYGL_NOEXCEPT;
void glBindBuffersBase(gl_enum target, std::uint32_t first, std::int32_t count, const mygl::buffer * buffers) MYGL_NOEXCEPT;
void glBindBuffersRange(gl_enum target, std::uint32_t first, std::int32_t count, const mygl::buffer * buffers, const std::intptr_t * offsets, const std::int64_t * sizes) MYGL_NOEXCEPT;
void glBindFragDataLocation(mygl::shader_program program, std::uint32_t color, const char * name) MYGL_NOEXCEPT;
void glBindFragDataLocationIndexed(mygl::shader_program program, std::uint32_t colorNumber, std::uint32_t index, const char * name) MYGL_NOEXCEPT;
void glBindFramebuffer(gl_enum target, mygl::framebuffer framebuffer) MYGL_NOEXCEPT;
void glBindImageTexture(std::uint32_t unit, mygl::texture texture, std::int32_t level, bool layered, std::int32_t layer, gl_enum access, gl_enum format) MYGL_NOEXCEPT;
void glBindImageTextures(std::uint32_t first, std::int32_t count, const mygl::texture * textures) MYGL_NOEXCEPT;
void glBindProgramPipeline(mygl::pipeline pipeline) MYGL_NOEXCEPT;
void glBindRenderbuffer(gl_enum target, mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
void glBindSampler(std::uint32_t unit, mygl::sampler sampler) MYGL_NOEXCEPT;
void glBindSamplers(std::uint32_t first, std::int32_t count, const mygl::sampler * samplers) MYGL_NOEXCEPT;
void glBindTexture(gl_enum target, mygl::texture texture) MYGL_NOEXCEPT;
void glBindTextureUnit(std::uint32_t unit, mygl::texture texture) MYGL_NOEXCEPT;
void glBindTextures(std::uint32_t first, std::int32_t count, const mygl::texture * textures) MYGL_NOEXCEPT;
void glBindTransformFeedback(gl_enum target, mygl::transform_feedback id) MYGL_NOEXCEPT;
void glBindVertexArray(mygl::vertex_array array) MYGL_NOEXCEPT;
void glBindVertexBuffer(std::uint32_t bindingindex, mygl::buffer buffer, std::intptr_t offset, std::int32_t stride) MYGL_NOEXCEPT;
void glBindVertexBuffers(std::uint32_t first, std::int32_t count, const mygl::buffer * buffers, const std::intptr_t * offsets, const std::int32_t * strides) MYGL_NOEXCEPT;
void glBlendColor(float red, float green, float blue, float alpha) MYGL_NOEXCEPT;
void glBlendEquation(gl_enum mode) MYGL_NOEXCEPT;
void glBlendEquationSeparate(gl_enum modeRGB, gl_enum modeAlpha) MYGL_NOEXCEPT;
void glBlendEquationSeparatei(std::uint32_t buf, gl_enum modeRGB, gl_enum modeAlpha) MYGL_NOEXCEPT;
void glBlendEquationSeparateiARB(std::uint32_t buf, gl_enum modeRGB, gl_enum modeAlpha) MYGL_NOEXCEPT;
void glBlendEquationi(std::uint32_t buf, gl_enum mode) MYGL_NOEXCEPT;
void glBlendEquationiARB(std::uint32_t buf, gl_enum mode) MYGL_NOEXCEPT;
void glBlendFunc(gl_enum sfactor, gl_enum dfactor) MYGL_NOEXCEPT;
void glBlendFuncSeparate(gl_enum sfactorRGB, gl_enum dfactorRGB, gl_enum sfactorAlpha, gl_enum dfactorAlpha) MYGL_NOEXCEPT;
void glBlendFuncSeparatei(std::uint32_t buf, gl_enum srcRGB, gl_enum dstRGB, gl_enum srcAlpha, gl_enum dstAlpha) MYGL_NOEXCEPT;
void glBlendFuncSeparateiARB(std::uint32_t buf, gl_enum srcRGB, gl_enum dstRGB, gl_enum srcAlpha, gl_enum dstAlpha) MYGL_NOEXCEPT;
void glBlendFunci(std::uint32_t buf, gl_enum src, gl_enum dst) MYGL_NOEXCEPT;
void glBlendFunciARB(std::uint32_t buf, gl_enum src, gl_enum dst) MYGL_NOEXCEPT;
void glBlitFramebuffer(std::int32_t srcX0, std::int32_t srcY0, std::int32_t srcX1, std::int32_t srcY1, std::int32_t dstX0, std::int32_t dstY0, std::int32_t dstX1, std::int32_t dstY1, gl_bitfield mask, gl_enum filter) MYGL_NOEXCEPT;
void glBlitNamedFramebuffer(mygl::framebuffer readFramebuffer, mygl::framebuffer drawFramebuffer, std::int32_t srcX0, std::int32_t srcY0, std::int32_t srcX1, std::int32_t srcY1, std::int32_t dstX0, std::int32_t dstY0, std::int32_t dstX1, std::int32_t dstY1, gl_bitfield mask, gl_enum filter) MYGL_NOEXCEPT;
void glBufferAddressRangeNV(gl_enum pname, std::uint32_t index, std::uint64_t address, std::int64_t length) MYGL_NOEXCEPT;
void glBufferData(gl_enum target, std::int64_t size, const void * data, gl_enum usage) MYGL_NOEXCEPT;
void glBufferStorage(gl_enum target, std::int64_t size, const void * data, gl_bitfield flags) MYGL_NOEXCEPT;
void glBufferStorageMemEXT(gl_enum target, std::int64_t size, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glBufferSubData(gl_enum target, std::intptr_t offset, std::int64_t size, const void * data) MYGL_NOEXCEPT;
void glCallCommandListNV(mygl::command_list list) MYGL_NOEXCEPT;
gl_enum glCheckFramebufferStatus(gl_enum target) MYGL_NOEXCEPT;
gl_enum glCheckNamedFramebufferStatus(mygl::framebuffer framebuffer, gl_enum target) MYGL_NOEXCEPT;
void glClampColor(gl_enum target, gl_enum clamp) MYGL_NOEXCEPT;
void glClear(gl_bitfield mask) MYGL_NOEXCEPT;
void glClearBufferData(gl_enum target, gl_enum internalformat, gl_enum format, gl_enum type, const void * data) MYGL_NOEXCEPT;
void glClearBufferSubData(gl_enum target, gl_enum internalformat, std::intptr_t offset, std::int64_t size, gl_enum format, gl_enum type, const void * data) MYGL_NOEXCEPT;
void glClearBufferfi(mygl::buffer buffer, std::int32_t drawbuffer, float depth, std::int32_t stencil) MYGL_NOEXCEPT;
void glClearBufferfv(mygl::buffer buffer, std::int32_t drawbuffer, const float * value) MYGL_NOEXCEPT;
void glClearBufferiv(mygl::buffer buffer, std::int32_t drawbuffer, const std::int32_t * value) MYGL_NOEXCEPT;
void glClearBufferuiv(mygl::buffer buffer, std::int32_t drawbuffer, const std::uint32_t * value) MYGL_NOEXCEPT;
void glClearColor(float red, float green, float blue, float alpha) MYGL_NOEXCEPT;
void glClearDepth(double depth) MYGL_NOEXCEPT;
void glClearDepthf(float d) MYGL_NOEXCEPT;
void glClearNamedBufferData(mygl::buffer buffer, gl_enum internalformat, gl_enum format, gl_enum type, const void * data) MYGL_NOEXCEPT;
void glClearNamedBufferSubData(mygl::buffer buffer, gl_enum internalformat, std::intptr_t offset, std::int64_t size, gl_enum format, gl_enum type, const void * data) MYGL_NOEXCEPT;
void glClearNamedFramebufferfi(mygl::framebuffer framebuffer, gl_enum buffer, std::int32_t drawbuffer, float depth, std::int32_t stencil) MYGL_NOEXCEPT;
void glClearNamedFramebufferfv(mygl::framebuffer framebuffer, gl_enum buffer, std::int32_t drawbuffer, const float * value) MYGL_NOEXCEPT;
void glClearNamedFramebufferiv(mygl::framebuffer framebuffer, gl_enum buffer, std::int32_t drawbuffer, const std::int32_t * value) MYGL_NOEXCEPT;
void glClearNamedFramebufferuiv(mygl::framebuffer framebuffer, gl_enum buffer, std::int32_t drawbuffer, const std::uint32_t * value) MYGL_NOEXCEPT;
void glClearStencil(std::int32_t s) MYGL_NOEXCEPT;
void glClearTexImage(mygl::texture texture, std::int32_t level, gl_enum format, gl_enum type, const void * data) MYGL_NOEXCEPT;
void glClearTexSubImage(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, gl_enum format, gl_enum type, const void * data) MYGL_NOEXCEPT;
gl_enum glClientWaitSync(mygl::sync sync, gl_bitfield flags, std::uint64_t timeout) MYGL_NOEXCEPT;
void glClipControl(gl_enum origin, gl_enum depth) MYGL_NOEXCEPT;
void glColorFormatNV(std::int32_t size, gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glColorMask(bool red, bool green, bool blue, bool alpha) MYGL_NOEXCEPT;
void glColorMaski(std::uint32_t index, bool r, bool g, bool b, bool a) MYGL_NOEXCEPT;
void glColorP3ui(gl_enum type, std::uint32_t color) MYGL_NOEXCEPT;
void glColorP3uiv(gl_enum type, const std::uint32_t * color) MYGL_NOEXCEPT;
void glColorP4ui(gl_enum type, std::uint32_t color) MYGL_NOEXCEPT;
void glColorP4uiv(gl_enum type, const std::uint32_t * color) MYGL_NOEXCEPT;
void glCommandListSegmentsNV(mygl::command_list list, std::uint32_t segments) MYGL_NOEXCEPT;
void glCompileCommandListNV(mygl::command_list list) MYGL_NOEXCEPT;
void glCompileShader(mygl::shader shader) MYGL_NOEXCEPT;
void glCompressedTexImage1D(gl_enum target, std::int32_t level, gl_enum internalformat, std::int32_t width, std::int32_t border, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTexImage2D(gl_enum target, std::int32_t level, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t border, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTexImage3D(gl_enum target, std::int32_t level, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t depth, std::int32_t border, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTexSubImage1D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t width, gl_enum format, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTexSubImage2D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t width, std::int32_t height, gl_enum format, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTexSubImage3D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, gl_enum format, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTextureSubImage1D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t width, gl_enum format, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTextureSubImage2D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t width, std::int32_t height, gl_enum format, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCompressedTextureSubImage3D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, gl_enum format, std::int32_t imageSize, const void * data) MYGL_NOEXCEPT;
void glCopyBufferSubData(gl_enum readTarget, gl_enum writeTarget, std::intptr_t readOffset, std::intptr_t writeOffset, std::int64_t size) MYGL_NOEXCEPT;
void glCopyImageSubData(std::uint32_t srcName, gl_enum srcTarget, std::int32_t srcLevel, std::int32_t srcX, std::int32_t srcY, std::int32_t srcZ, std::uint32_t dstName, gl_enum dstTarget, std::int32_t dstLevel, std::int32_t dstX, std::int32_t dstY, std::int32_t dstZ, std::int32_t srcWidth, std::int32_t srcHeight, std::int32_t srcDepth) MYGL_NOEXCEPT;
void glCopyNamedBufferSubData(mygl::buffer readBuffer, mygl::buffer writeBuffer, std::intptr_t readOffset, std::intptr_t writeOffset, std::int64_t size) MYGL_NOEXCEPT;
void glCopyPathNV(mygl::path resultPath, mygl::path srcPath) MYGL_NOEXCEPT;
void glCopyTexImage1D(gl_enum target, std::int32_t level, gl_enum internalformat, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t border) MYGL_NOEXCEPT;
void glCopyTexImage2D(gl_enum target, std::int32_t level, gl_enum internalformat, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height, std::int32_t border) MYGL_NOEXCEPT;
void glCopyTexSubImage1D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t x, std::int32_t y, std::int32_t width) MYGL_NOEXCEPT;
void glCopyTexSubImage2D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glCopyTexSubImage3D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glCopyTextureSubImage1D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t x, std::int32_t y, std::int32_t width) MYGL_NOEXCEPT;
void glCopyTextureSubImage2D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glCopyTextureSubImage3D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glCoverFillPathInstancedNV(std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, gl_enum coverMode, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glCoverFillPathNV(mygl::path path, gl_enum coverMode) MYGL_NOEXCEPT;
void glCoverStrokePathInstancedNV(std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, gl_enum coverMode, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glCoverStrokePathNV(mygl::path path, gl_enum coverMode) MYGL_NOEXCEPT;
void glCreateBuffers(std::int32_t n, mygl::buffer * buffers) MYGL_NOEXCEPT;
void glCreateCommandListsNV(std::int32_t n, mygl::command_list * lists) MYGL_NOEXCEPT;
void glCreateFramebuffers(std::int32_t n, mygl::framebuffer * framebuffers) MYGL_NOEXCEPT;
void glCreateMemoryObjectsEXT(std::int32_t n, std::uint32_t * memoryObjects) MYGL_NOEXCEPT;
mygl::shader_program glCreateProgram() MYGL_NOEXCEPT;
void glCreateProgramPipelines(std::int32_t n, mygl::pipeline * pipelines) MYGL_NOEXCEPT;
void glCreateQueries(gl_enum target, std::int32_t n, mygl::query * ids) MYGL_NOEXCEPT;
void glCreateRenderbuffers(std::int32_t n, mygl::renderbuffer * renderbuffers) MYGL_NOEXCEPT;
void glCreateSamplers(std::int32_t n, mygl::sampler * samplers) MYGL_NOEXCEPT;
mygl::shader glCreateShader(gl_enum type) MYGL_NOEXCEPT;
mygl::shader_program glCreateShaderProgramv(gl_enum type, std::int32_t count, const char *const* strings) MYGL_NOEXCEPT;
void glCreateStatesNV(std::int32_t n, mygl::state * states) MYGL_NOEXCEPT;
void glCreateTextures(gl_enum target, std::int32_t n, mygl::texture * textures) MYGL_NOEXCEPT;
void glCreateTransformFeedbacks(std::int32_t n, mygl::transform_feedback * ids) MYGL_NOEXCEPT;
void glCreateVertexArrays(std::int32_t n, mygl::vertex_array * arrays) MYGL_NOEXCEPT;
void glCullFace(gl_enum mode) MYGL_NOEXCEPT;
void glDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) MYGL_NOEXCEPT;
void glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) MYGL_NOEXCEPT;
void glDebugMessageControl(gl_enum source, gl_enum type, gl_enum severity, std::int32_t count, const std::uint32_t * ids, bool enabled) MYGL_NOEXCEPT;
void glDebugMessageControlKHR(gl_enum source, gl_enum type, gl_enum severity, std::int32_t count, const std::uint32_t * ids, bool enabled) MYGL_NOEXCEPT;
void glDebugMessageInsert(gl_enum source, gl_enum type, std::uint32_t id, gl_enum severity, std::int32_t length, const char * buf) MYGL_NOEXCEPT;
void glDebugMessageInsertKHR(gl_enum source, gl_enum type, std::uint32_t id, gl_enum severity, std::int32_t length, const char * buf) MYGL_NOEXCEPT;
void glDeleteBuffers(std::int32_t n, const mygl::buffer * buffers) MYGL_NOEXCEPT;
void glDeleteCommandListsNV(std::int32_t n, const mygl::command_list * lists) MYGL_NOEXCEPT;
void glDeleteFramebuffers(std::int32_t n, const mygl::framebuffer * framebuffers) MYGL_NOEXCEPT;
void glDeleteMemoryObjectsEXT(std::int32_t n, const std::uint32_t * memoryObjects) MYGL_NOEXCEPT;
void glDeletePathsNV(mygl::path path, std::int32_t range) MYGL_NOEXCEPT;
void glDeleteProgram(mygl::shader_program program) MYGL_NOEXCEPT;
void glDeleteProgramPipelines(std::int32_t n, const mygl::pipeline * pipelines) MYGL_NOEXCEPT;
void glDeleteQueries(std::int32_t n, const mygl::query * ids) MYGL_NOEXCEPT;
void glDeleteRenderbuffers(std::int32_t n, const mygl::renderbuffer * renderbuffers) MYGL_NOEXCEPT;
void glDeleteSamplers(std::int32_t count, const mygl::sampler * samplers) MYGL_NOEXCEPT;
void glDeleteSemaphoresEXT(std::int32_t n, const std::uint32_t * semaphores) MYGL_NOEXCEPT;
void glDeleteShader(mygl::shader shader) MYGL_NOEXCEPT;
void glDeleteStatesNV(std::int32_t n, const mygl::state * states) MYGL_NOEXCEPT;
void glDeleteSync(mygl::sync sync) MYGL_NOEXCEPT;
void glDeleteTextures(std::int32_t n, const mygl::texture * textures) MYGL_NOEXCEPT;
void glDeleteTransformFeedbacks(std::int32_t n, const mygl::transform_feedback * ids) MYGL_NOEXCEPT;
void glDeleteVertexArrays(std::int32_t n, const mygl::vertex_array * arrays) MYGL_NOEXCEPT;
void glDepthBoundsEXT(double zmin, double zmax) MYGL_NOEXCEPT;
void glDepthFunc(gl_enum func) MYGL_NOEXCEPT;
void glDepthMask(bool flag) MYGL_NOEXCEPT;
void glDepthRange(double n, double f) MYGL_NOEXCEPT;
void glDepthRangeArrayv(std::uint32_t first, std::int32_t count, const double * v) MYGL_NOEXCEPT;
void glDepthRangeIndexed(std::uint32_t index, double n, double f) MYGL_NOEXCEPT;
void glDepthRangef(float n, float f) MYGL_NOEXCEPT;
void glDetachShader(mygl::shader_program program, mygl::shader shader) MYGL_NOEXCEPT;
void glDisable(gl_enum cap) MYGL_NOEXCEPT;
void glDisableClientState(gl_enum array) MYGL_NOEXCEPT;
void glDisableVertexArrayAttrib(mygl::vertex_array vaobj, std::uint32_t index) MYGL_NOEXCEPT;
void glDisableVertexAttribArray(std::uint32_t index) MYGL_NOEXCEPT;
void glDisablei(gl_enum target, std::uint32_t index) MYGL_NOEXCEPT;
void glDispatchCompute(std::uint32_t num_groups_x, std::uint32_t num_groups_y, std::uint32_t num_groups_z) MYGL_NOEXCEPT;
void glDispatchComputeGroupSizeARB(std::uint32_t num_groups_x, std::uint32_t num_groups_y, std::uint32_t num_groups_z, std::uint32_t group_size_x, std::uint32_t group_size_y, std::uint32_t group_size_z) MYGL_NOEXCEPT;
void glDispatchComputeIndirect(std::intptr_t indirect) MYGL_NOEXCEPT;
void glDrawArrays(gl_enum mode, std::int32_t first, std::int32_t count) MYGL_NOEXCEPT;
void glDrawArraysIndirect(gl_enum mode, const void * indirect) MYGL_NOEXCEPT;
void glDrawArraysInstanced(gl_enum mode, std::int32_t first, std::int32_t count, std::int32_t instancecount) MYGL_NOEXCEPT;
void glDrawArraysInstancedBaseInstance(gl_enum mode, std::int32_t first, std::int32_t count, std::int32_t instancecount, std::uint32_t baseinstance) MYGL_NOEXCEPT;
void glDrawBuffer(gl_enum buf) MYGL_NOEXCEPT;
void glDrawBuffers(std::int32_t n, const gl_enum * bufs) MYGL_NOEXCEPT;
void glDrawCommandsAddressNV(gl_enum primitiveMode, const std::uint64_t * indirects, const std::int32_t * sizes, std::uint32_t count) MYGL_NOEXCEPT;
void glDrawCommandsNV(gl_enum primitiveMode, mygl::buffer buffer, const std::intptr_t * indirects, const std::int32_t * sizes, std::uint32_t count) MYGL_NOEXCEPT;
void glDrawCommandsStatesAddressNV(const std::uint64_t * indirects, const std::int32_t * sizes, const mygl::state * states, const mygl::framebuffer * fbos, std::uint32_t count) MYGL_NOEXCEPT;
void glDrawCommandsStatesNV(mygl::buffer buffer, const std::intptr_t * indirects, const std::int32_t * sizes, const mygl::state * states, const mygl::framebuffer * fbos, std::uint32_t count) MYGL_NOEXCEPT;
void glDrawElements(gl_enum mode, std::int32_t count, gl_enum type, const void * indices) MYGL_NOEXCEPT;
void glDrawElementsBaseVertex(gl_enum mode, std::int32_t count, gl_enum type, const void * indices, std::int32_t basevertex) MYGL_NOEXCEPT;
void glDrawElementsIndirect(gl_enum mode, gl_enum type, const void * indirect) MYGL_NOEXCEPT;
void glDrawElementsInstanced(gl_enum mode, std::int32_t count, gl_enum type, const void * indices, std::int32_t instancecount) MYGL_NOEXCEPT;
void glDrawElementsInstancedBaseInstance(gl_enum mode, std::int32_t count, gl_enum type, const void * indices, std::int32_t instancecount, std::uint32_t baseinstance) MYGL_NOEXCEPT;
void glDrawElementsInstancedBaseVertex(gl_enum mode, std::int32_t count, gl_enum type, const void * indices, std::int32_t instancecount, std::int32_t basevertex) MYGL_NOEXCEPT;
void glDrawElementsInstancedBaseVertexBaseInstance(gl_enum mode, std::int32_t count, gl_enum type, const void * indices, std::int32_t instancecount, std::int32_t basevertex, std::uint32_t baseinstance) MYGL_NOEXCEPT;
void glDrawRangeElements(gl_enum mode, std::uint32_t start, std::uint32_t end, std::int32_t count, gl_enum type, const void * indices) MYGL_NOEXCEPT;
void glDrawRangeElementsBaseVertex(gl_enum mode, std::uint32_t start, std::uint32_t end, std::int32_t count, gl_enum type, const void * indices, std::int32_t basevertex) MYGL_NOEXCEPT;
void glDrawTextureNV(mygl::texture texture, mygl::sampler sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) MYGL_NOEXCEPT;
void glDrawTransformFeedback(gl_enum mode, mygl::transform_feedback id) MYGL_NOEXCEPT;
void glDrawTransformFeedbackInstanced(gl_enum mode, mygl::transform_feedback id, std::int32_t instancecount) MYGL_NOEXCEPT;
void glDrawTransformFeedbackStream(gl_enum mode, mygl::transform_feedback id, std::uint32_t stream) MYGL_NOEXCEPT;
void glDrawTransformFeedbackStreamInstanced(gl_enum mode, mygl::transform_feedback id, std::uint32_t stream, std::int32_t instancecount) MYGL_NOEXCEPT;
void glEdgeFlagFormatNV(std::int32_t stride) MYGL_NOEXCEPT;
void glEnable(gl_enum cap) MYGL_NOEXCEPT;
void glEnableClientState(gl_enum array) MYGL_NOEXCEPT;
void glEnableVertexArrayAttrib(mygl::vertex_array vaobj, std::uint32_t index) MYGL_NOEXCEPT;
void glEnableVertexAttribArray(std::uint32_t index) MYGL_NOEXCEPT;
void glEnablei(gl_enum target, std::uint32_t index) MYGL_NOEXCEPT;
void glEndConditionalRender() MYGL_NOEXCEPT;
void glEndQuery(gl_enum target) MYGL_NOEXCEPT;
void glEndQueryIndexed(gl_enum target, std::uint32_t index) MYGL_NOEXCEPT;
void glEndTransformFeedback() MYGL_NOEXCEPT;
mygl::sync glFenceSync(gl_enum condition, gl_bitfield flags) MYGL_NOEXCEPT;
void glFinish() MYGL_NOEXCEPT;
void glFlush() MYGL_NOEXCEPT;
void glFlushMappedBufferRange(gl_enum target, std::intptr_t offset, std::int64_t length) MYGL_NOEXCEPT;
void glFlushMappedNamedBufferRange(mygl::buffer buffer, std::intptr_t offset, std::int64_t length) MYGL_NOEXCEPT;
void glFogCoordFormatNV(gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glFramebufferParameteri(gl_enum target, gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
void glFramebufferRenderbuffer(gl_enum target, gl_enum attachment, gl_enum renderbuffertarget, mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
void glFramebufferTexture(gl_enum target, gl_enum attachment, mygl::texture texture, std::int32_t level) MYGL_NOEXCEPT;
void glFramebufferTexture1D(gl_enum target, gl_enum attachment, gl_enum textarget, mygl::texture texture, std::int32_t level) MYGL_NOEXCEPT;
void glFramebufferTexture2D(gl_enum target, gl_enum attachment, gl_enum textarget, mygl::texture texture, std::int32_t level) MYGL_NOEXCEPT;
void glFramebufferTexture3D(gl_enum target, gl_enum attachment, gl_enum textarget, mygl::texture texture, std::int32_t level, std::int32_t zoffset) MYGL_NOEXCEPT;
void glFramebufferTextureLayer(gl_enum target, gl_enum attachment, mygl::texture texture, std::int32_t level, std::int32_t layer) MYGL_NOEXCEPT;
void glFrontFace(gl_enum mode) MYGL_NOEXCEPT;
void glGenBuffers(std::int32_t n, mygl::buffer * buffers) MYGL_NOEXCEPT;
void glGenFramebuffers(std::int32_t n, mygl::framebuffer * framebuffers) MYGL_NOEXCEPT;
mygl::path glGenPathsNV(std::int32_t range) MYGL_NOEXCEPT;
void glGenProgramPipelines(std::int32_t n, mygl::pipeline * pipelines) MYGL_NOEXCEPT;
void glGenQueries(std::int32_t n, mygl::query * ids) MYGL_NOEXCEPT;
void glGenRenderbuffers(std::int32_t n, mygl::renderbuffer * renderbuffers) MYGL_NOEXCEPT;
void glGenSamplers(std::int32_t count, mygl::sampler * samplers) MYGL_NOEXCEPT;
void glGenSemaphoresEXT(std::int32_t n, std::uint32_t * semaphores) MYGL_NOEXCEPT;
void glGenTextures(std::int32_t n, mygl::texture * textures) MYGL_NOEXCEPT;
void glGenTransformFeedbacks(std::int32_t n, mygl::transform_feedback * ids) MYGL_NOEXCEPT;
void glGenVertexArrays(std::int32_t n, mygl::vertex_array * arrays) MYGL_NOEXCEPT;
void glGenerateMipmap(gl_enum target) MYGL_NOEXCEPT;
void glGenerateTextureMipmap(mygl::texture texture) MYGL_NOEXCEPT;
void glGetActiveAtomicCounterBufferiv(mygl::shader_program program, std::uint32_t bufferIndex, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetActiveAttrib(mygl::shader_program program, std::uint32_t index, std::int32_t bufSize, std::int32_t * length, std::int32_t * size, gl_enum * type, char * name) MYGL_NOEXCEPT;
void glGetActiveSubroutineName(mygl::shader_program program, gl_enum shadertype, std::uint32_t index, std::int32_t bufsize, std::int32_t * length, char * name) MYGL_NOEXCEPT;
void glGetActiveSubroutineUniformName(mygl::shader_program program, gl_enum shadertype, std::uint32_t index, std::int32_t bufsize, std::int32_t * length, char * name) MYGL_NOEXCEPT;
void glGetActiveSubroutineUniformiv(mygl::shader_program program, gl_enum shadertype, std::uint32_t index, gl_enum pname, std::int32_t * values) MYGL_NOEXCEPT;
void glGetActiveUniform(mygl::shader_program program, std::uint32_t index, std::int32_t bufSize, std::int32_t * length, std::int32_t * size, gl_enum * type, char * name) MYGL_NOEXCEPT;
void glGetActiveUniformBlockName(mygl::shader_program program, std::uint32_t uniformBlockIndex, std::int32_t bufSize, std::int32_t * length, char * uniformBlockName) MYGL_NOEXCEPT;
void glGetActiveUniformBlockiv(mygl::shader_program program, std::uint32_t uniformBlockIndex, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetActiveUniformName(mygl::shader_program program, std::uint32_t uniformIndex, std::int32_t bufSize, std::int32_t * length, char * uniformName) MYGL_NOEXCEPT;
void glGetActiveUniformsiv(mygl::shader_program program, std::int32_t uniformCount, const std::uint32_t * uniformIndices, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetAttachedShaders(mygl::shader_program program, std::int32_t maxCount, std::int32_t * count, mygl::shader * shaders) MYGL_NOEXCEPT;
std::int32_t glGetAttribLocation(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
void glGetBooleani_v(gl_enum target, std::uint32_t index, bool * data) MYGL_NOEXCEPT;
void glGetBooleanv(gl_enum pname, bool * data) MYGL_NOEXCEPT;
void glGetBufferParameteri64v(gl_enum target, gl_enum pname, std::int64_t * params) MYGL_NOEXCEPT;
void glGetBufferParameteriv(gl_enum target, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetBufferParameterui64vNV(gl_enum target, gl_enum pname, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetBufferPointerv(gl_enum target, gl_enum pname, void ** params) MYGL_NOEXCEPT;
void glGetBufferSubData(gl_enum target, std::intptr_t offset, std::int64_t size, void * data) MYGL_NOEXCEPT;
std::uint32_t glGetCommandHeaderNV(gl_enum tokenID, std::uint32_t size) MYGL_NOEXCEPT;
void glGetCompressedTexImage(gl_enum target, std::int32_t level, void * img) MYGL_NOEXCEPT;
void glGetCompressedTextureImage(mygl::texture texture, std::int32_t level, std::int32_t bufSize, void * pixels) MYGL_NOEXCEPT;
void glGetCompressedTextureSubImage(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, std::int32_t bufSize, void * pixels) MYGL_NOEXCEPT;
std::uint32_t glGetDebugMessageLog(std::uint32_t count, std::int32_t bufSize, gl_enum * sources, gl_enum * types, std::uint32_t * ids, gl_enum * severities, std::int32_t * lengths, char * messageLog) MYGL_NOEXCEPT;
std::uint32_t glGetDebugMessageLogKHR(std::uint32_t count, std::int32_t bufSize, gl_enum * sources, gl_enum * types, std::uint32_t * ids, gl_enum * severities, std::int32_t * lengths, char * messageLog) MYGL_NOEXCEPT;
void glGetDoublei_v(gl_enum target, std::uint32_t index, double * data) MYGL_NOEXCEPT;
void glGetDoublev(gl_enum pname, double * data) MYGL_NOEXCEPT;
gl_enum glGetError() MYGL_NOEXCEPT;
void glGetFloati_v(gl_enum target, std::uint32_t index, float * data) MYGL_NOEXCEPT;
void glGetFloatv(gl_enum pname, float * data) MYGL_NOEXCEPT;
std::int32_t glGetFragDataIndex(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
std::int32_t glGetFragDataLocation(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
void glGetFramebufferAttachmentParameteriv(gl_enum target, gl_enum attachment, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetFramebufferParameteriv(gl_enum target, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
gl_enum glGetGraphicsResetStatus() MYGL_NOEXCEPT;
std::uint64_t glGetImageHandleARB(mygl::texture texture, std::int32_t level, bool layered, std::int32_t layer, gl_enum format) MYGL_NOEXCEPT;
void glGetInteger64i_v(gl_enum target, std::uint32_t index, std::int64_t * data) MYGL_NOEXCEPT;
void glGetInteger64v(gl_enum pname, std::int64_t * data) MYGL_NOEXCEPT;
void glGetIntegeri_v(gl_enum target, std::uint32_t index, std::int32_t * data) MYGL_NOEXCEPT;
void glGetIntegerui64i_vNV(gl_enum value, std::uint32_t index, std::uint64_t * result) MYGL_NOEXCEPT;
void glGetIntegerui64vNV(gl_enum value, std::uint64_t * result) MYGL_NOEXCEPT;
void glGetIntegerv(gl_enum pname, std::int32_t * data) MYGL_NOEXCEPT;
void glGetInternalformati64v(gl_enum target, gl_enum internalformat, gl_enum pname, std::int32_t bufSize, std::int64_t * params) MYGL_NOEXCEPT;
void glGetInternalformativ(gl_enum target, gl_enum internalformat, gl_enum pname, std::int32_t bufSize, std::int32_t * params) MYGL_NOEXCEPT;
void glGetMemoryObjectParameterivEXT(std::uint32_t memoryObject, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetMultisamplefv(gl_enum pname, std::uint32_t index, float * val) MYGL_NOEXCEPT;
void glGetNamedBufferParameteri64v(mygl::buffer buffer, gl_enum pname, std::int64_t * params) MYGL_NOEXCEPT;
void glGetNamedBufferParameteriv(mygl::buffer buffer, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetNamedBufferParameterui64vNV(mygl::buffer buffer, gl_enum pname, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetNamedBufferPointerv(mygl::buffer buffer, gl_enum pname, void ** params) MYGL_NOEXCEPT;
void glGetNamedBufferSubData(mygl::buffer buffer, std::intptr_t offset, std::int64_t size, void * data) MYGL_NOEXCEPT;
void glGetNamedFramebufferAttachmentParameteriv(mygl::framebuffer framebuffer, gl_enum attachment, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetNamedFramebufferParameteriv(mygl::framebuffer framebuffer, gl_enum pname, std::int32_t * param) MYGL_NOEXCEPT;
void glGetNamedRenderbufferParameteriv(mygl::renderbuffer renderbuffer, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetObjectLabel(gl_enum identifier, std::uint32_t name, std::int32_t bufSize, std::int32_t * length, char * label) MYGL_NOEXCEPT;
void glGetObjectLabelKHR(gl_enum identifier, std::uint32_t name, std::int32_t bufSize, std::int32_t * length, char * label) MYGL_NOEXCEPT;
void glGetObjectPtrLabel(const void * ptr, std::int32_t bufSize, std::int32_t * length, char * label) MYGL_NOEXCEPT;
void glGetObjectPtrLabelKHR(const void * ptr, std::int32_t bufSize, std::int32_t * length, char * label) MYGL_NOEXCEPT;
void glGetPathColorGenfvNV(gl_enum color, gl_enum pname, float * value) MYGL_NOEXCEPT;
void glGetPathColorGenivNV(gl_enum color, gl_enum pname, std::int32_t * value) MYGL_NOEXCEPT;
void glGetPathCommandsNV(mygl::path path, std::uint8_t * commands) MYGL_NOEXCEPT;
void glGetPathCoordsNV(mygl::path path, float * coords) MYGL_NOEXCEPT;
void glGetPathDashArrayNV(mygl::path path, float * dashArray) MYGL_NOEXCEPT;
float glGetPathLengthNV(mygl::path path, std::int32_t startSegment, std::int32_t numSegments) MYGL_NOEXCEPT;
void glGetPathMetricRangeNV(gl_bitfield metricQueryMask, mygl::path firstPathName, std::int32_t numPaths, std::int32_t stride, float * metrics) MYGL_NOEXCEPT;
void glGetPathMetricsNV(gl_bitfield metricQueryMask, std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, std::int32_t stride, float * metrics) MYGL_NOEXCEPT;
void glGetPathParameterfvNV(mygl::path path, gl_enum pname, float * value) MYGL_NOEXCEPT;
void glGetPathParameterivNV(mygl::path path, gl_enum pname, std::int32_t * value) MYGL_NOEXCEPT;
void glGetPathSpacingNV(gl_enum pathListMode, std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, float advanceScale, float kerningScale, gl_enum transformType, float * returnedSpacing) MYGL_NOEXCEPT;
void glGetPathTexGenfvNV(gl_enum texCoordSet, gl_enum pname, float * value) MYGL_NOEXCEPT;
void glGetPathTexGenivNV(gl_enum texCoordSet, gl_enum pname, std::int32_t * value) MYGL_NOEXCEPT;
void glGetPointerv(gl_enum pname, void ** params) MYGL_NOEXCEPT;
void glGetPointervKHR(gl_enum pname, void ** params) MYGL_NOEXCEPT;
void glGetProgramBinary(mygl::shader_program program, std::int32_t bufSize, std::int32_t * length, gl_enum * binaryFormat, void * binary) MYGL_NOEXCEPT;
void glGetProgramInfoLog(mygl::shader_program program, std::int32_t bufSize, std::int32_t * length, char * infoLog) MYGL_NOEXCEPT;
void glGetProgramInterfaceiv(mygl::shader_program program, gl_enum programInterface, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetProgramPipelineInfoLog(mygl::pipeline pipeline, std::int32_t bufSize, std::int32_t * length, char * infoLog) MYGL_NOEXCEPT;
void glGetProgramPipelineiv(mygl::pipeline pipeline, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
std::uint32_t glGetProgramResourceIndex(mygl::shader_program program, gl_enum programInterface, const char * name) MYGL_NOEXCEPT;
std::int32_t glGetProgramResourceLocation(mygl::shader_program program, gl_enum programInterface, const char * name) MYGL_NOEXCEPT;
std::int32_t glGetProgramResourceLocationIndex(mygl::shader_program program, gl_enum programInterface, const char * name) MYGL_NOEXCEPT;
void glGetProgramResourceName(mygl::shader_program program, gl_enum programInterface, std::uint32_t index, std::int32_t bufSize, std::int32_t * length, char * name) MYGL_NOEXCEPT;
void glGetProgramResourcefvNV(mygl::shader_program program, gl_enum programInterface, std::uint32_t index, std::int32_t propCount, const gl_enum * props, std::int32_t bufSize, std::int32_t * length, float * params) MYGL_NOEXCEPT;
void glGetProgramResourceiv(mygl::shader_program program, gl_enum programInterface, std::uint32_t index, std::int32_t propCount, const gl_enum * props, std::int32_t bufSize, std::int32_t * length, std::int32_t * params) MYGL_NOEXCEPT;
void glGetProgramStageiv(mygl::shader_program program, gl_enum shadertype, gl_enum pname, std::int32_t * values) MYGL_NOEXCEPT;
void glGetProgramSubroutineParameteruivNV(gl_enum target, std::uint32_t index, std::uint32_t * param) MYGL_NOEXCEPT;
void glGetProgramiv(mygl::shader_program program, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetQueryBufferObjecti64v(mygl::query id, mygl::buffer buffer, gl_enum pname, std::intptr_t offset) MYGL_NOEXCEPT;
void glGetQueryBufferObjectiv(mygl::query id, mygl::buffer buffer, gl_enum pname, std::intptr_t offset) MYGL_NOEXCEPT;
void glGetQueryBufferObjectui64v(mygl::query id, mygl::buffer buffer, gl_enum pname, std::intptr_t offset) MYGL_NOEXCEPT;
void glGetQueryBufferObjectuiv(mygl::query id, mygl::buffer buffer, gl_enum pname, std::intptr_t offset) MYGL_NOEXCEPT;
void glGetQueryIndexediv(gl_enum target, std::uint32_t index, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetQueryObjecti64v(mygl::query id, gl_enum pname, std::int64_t * params) MYGL_NOEXCEPT;
void glGetQueryObjectiv(mygl::query id, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetQueryObjectui64v(mygl::query id, gl_enum pname, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetQueryObjectuiv(mygl::query id, gl_enum pname, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetQueryiv(gl_enum target, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetRenderbufferParameteriv(gl_enum target, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetSamplerParameterIiv(mygl::sampler sampler, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetSamplerParameterIuiv(mygl::sampler sampler, gl_enum pname, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetSamplerParameterfv(mygl::sampler sampler, gl_enum pname, float * params) MYGL_NOEXCEPT;
void glGetSamplerParameteriv(mygl::sampler sampler, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetSemaphoreParameterui64vEXT(std::uint32_t semaphore, gl_enum pname, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetShaderInfoLog(mygl::shader shader, std::int32_t bufSize, std::int32_t * length, char * infoLog) MYGL_NOEXCEPT;
void glGetShaderPrecisionFormat(gl_enum shadertype, gl_enum precisiontype, std::int32_t * range, std::int32_t * precision) MYGL_NOEXCEPT;
void glGetShaderSource(mygl::shader shader, std::int32_t bufSize, std::int32_t * length, char * source) MYGL_NOEXCEPT;
void glGetShaderiv(mygl::shader shader, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
std::uint16_t glGetStageIndexNV(gl_enum shadertype) MYGL_NOEXCEPT;
const std::uint8_t  *glGetString(gl_enum name) MYGL_NOEXCEPT;
const std::uint8_t  *glGetStringi(gl_enum name, std::uint32_t index) MYGL_NOEXCEPT;
std::uint32_t glGetSubroutineIndex(mygl::shader_program program, gl_enum shadertype, const char * name) MYGL_NOEXCEPT;
std::int32_t glGetSubroutineUniformLocation(mygl::shader_program program, gl_enum shadertype, const char * name) MYGL_NOEXCEPT;
void glGetSynciv(mygl::sync sync, gl_enum pname, std::int32_t bufSize, std::int32_t * length, std::int32_t * values) MYGL_NOEXCEPT;
void glGetTexImage(gl_enum target, std::int32_t level, gl_enum format, gl_enum type, void * pixels) MYGL_NOEXCEPT;
void glGetTexLevelParameterfv(gl_enum target, std::int32_t level, gl_enum pname, float * params) MYGL_NOEXCEPT;
void glGetTexLevelParameteriv(gl_enum target, std::int32_t level, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetTexParameterIiv(gl_enum target, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetTexParameterIuiv(gl_enum target, gl_enum pname, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetTexParameterfv(gl_enum target, gl_enum pname, float * params) MYGL_NOEXCEPT;
void glGetTexParameteriv(gl_enum target, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
std::uint64_t glGetTextureHandleARB(mygl::texture texture) MYGL_NOEXCEPT;
void glGetTextureImage(mygl::texture texture, std::int32_t level, gl_enum format, gl_enum type, std::int32_t bufSize, void * pixels) MYGL_NOEXCEPT;
void glGetTextureLevelParameterfv(mygl::texture texture, std::int32_t level, gl_enum pname, float * params) MYGL_NOEXCEPT;
void glGetTextureLevelParameteriv(mygl::texture texture, std::int32_t level, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetTextureParameterIiv(mygl::texture texture, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetTextureParameterIuiv(mygl::texture texture, gl_enum pname, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetTextureParameterfv(mygl::texture texture, gl_enum pname, float * params) MYGL_NOEXCEPT;
void glGetTextureParameteriv(mygl::texture texture, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
std::uint64_t glGetTextureSamplerHandleARB(mygl::texture texture, mygl::sampler sampler) MYGL_NOEXCEPT;
void glGetTextureSubImage(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, gl_enum format, gl_enum type, std::int32_t bufSize, void * pixels) MYGL_NOEXCEPT;
void glGetTransformFeedbackVarying(mygl::shader_program program, std::uint32_t index, std::int32_t bufSize, std::int32_t * length, std::int32_t * size, gl_enum * type, char * name) MYGL_NOEXCEPT;
void glGetTransformFeedbacki64_v(mygl::transform_feedback xfb, gl_enum pname, std::uint32_t index, std::int64_t * param) MYGL_NOEXCEPT;
void glGetTransformFeedbacki_v(mygl::transform_feedback xfb, gl_enum pname, std::uint32_t index, std::int32_t * param) MYGL_NOEXCEPT;
void glGetTransformFeedbackiv(mygl::transform_feedback xfb, gl_enum pname, std::int32_t * param) MYGL_NOEXCEPT;
std::uint32_t glGetUniformBlockIndex(mygl::shader_program program, const char * uniformBlockName) MYGL_NOEXCEPT;
void glGetUniformIndices(mygl::shader_program program, std::int32_t uniformCount, const char *const* uniformNames, std::uint32_t * uniformIndices) MYGL_NOEXCEPT;
std::int32_t glGetUniformLocation(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
void glGetUniformSubroutineuiv(gl_enum shadertype, std::int32_t location, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetUniformdv(mygl::shader_program program, std::int32_t location, double * params) MYGL_NOEXCEPT;
void glGetUniformfv(mygl::shader_program program, std::int32_t location, float * params) MYGL_NOEXCEPT;
void glGetUniformi64vARB(mygl::shader_program program, std::int32_t location, std::int64_t * params) MYGL_NOEXCEPT;
void glGetUniformi64vNV(mygl::shader_program program, std::int32_t location, std::int64_t * params) MYGL_NOEXCEPT;
void glGetUniformiv(mygl::shader_program program, std::int32_t location, std::int32_t * params) MYGL_NOEXCEPT;
void glGetUniformui64vARB(mygl::shader_program program, std::int32_t location, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetUniformui64vNV(mygl::shader_program program, std::int32_t location, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetUniformuiv(mygl::shader_program program, std::int32_t location, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetUnsignedBytevEXT(gl_enum pname, std::uint8_t * data) MYGL_NOEXCEPT;
void glGetUnsignedBytei_vEXT(gl_enum target, std::uint32_t index, std::uint8_t * data) MYGL_NOEXCEPT;
void glGetVertexArrayIndexed64iv(mygl::vertex_array vaobj, std::uint32_t index, gl_enum pname, std::int64_t * param) MYGL_NOEXCEPT;
void glGetVertexArrayIndexediv(mygl::vertex_array vaobj, std::uint32_t index, gl_enum pname, std::int32_t * param) MYGL_NOEXCEPT;
void glGetVertexArrayiv(mygl::vertex_array vaobj, gl_enum pname, std::int32_t * param) MYGL_NOEXCEPT;
void glGetVertexAttribIiv(std::uint32_t index, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetVertexAttribIuiv(std::uint32_t index, gl_enum pname, std::uint32_t * params) MYGL_NOEXCEPT;
void glGetVertexAttribLdv(std::uint32_t index, gl_enum pname, double * params) MYGL_NOEXCEPT;
void glGetVertexAttribLui64vARB(std::uint32_t index, gl_enum pname, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetVertexAttribPointerv(std::uint32_t index, gl_enum pname, void ** pointer) MYGL_NOEXCEPT;
void glGetVertexAttribdv(std::uint32_t index, gl_enum pname, double * params) MYGL_NOEXCEPT;
void glGetVertexAttribfv(std::uint32_t index, gl_enum pname, float * params) MYGL_NOEXCEPT;
void glGetVertexAttribiv(std::uint32_t index, gl_enum pname, std::int32_t * params) MYGL_NOEXCEPT;
void glGetnCompressedTexImage(gl_enum target, std::int32_t lod, std::int32_t bufSize, void * pixels) MYGL_NOEXCEPT;
void glGetnTexImage(gl_enum target, std::int32_t level, gl_enum format, gl_enum type, std::int32_t bufSize, void * pixels) MYGL_NOEXCEPT;
void glGetnUniformdv(mygl::shader_program program, std::int32_t location, std::int32_t bufSize, double * params) MYGL_NOEXCEPT;
void glGetnUniformfv(mygl::shader_program program, std::int32_t location, std::int32_t bufSize, float * params) MYGL_NOEXCEPT;
void glGetnUniformi64vARB(mygl::shader_program program, std::int32_t location, std::int32_t bufSize, std::int64_t * params) MYGL_NOEXCEPT;
void glGetnUniformiv(mygl::shader_program program, std::int32_t location, std::int32_t bufSize, std::int32_t * params) MYGL_NOEXCEPT;
void glGetnUniformui64vARB(mygl::shader_program program, std::int32_t location, std::int32_t bufSize, std::uint64_t * params) MYGL_NOEXCEPT;
void glGetnUniformuiv(mygl::shader_program program, std::int32_t location, std::int32_t bufSize, std::uint32_t * params) MYGL_NOEXCEPT;
void glHint(gl_enum target, gl_enum mode) MYGL_NOEXCEPT;
void glImportMemoryFdEXT(std::uint32_t memory, std::uint64_t size, gl_enum handleType, std::int32_t fd) MYGL_NOEXCEPT;
void glImportMemoryWin32HandleEXT(std::uint32_t memory, std::uint64_t size, gl_enum handleType, void * handle) MYGL_NOEXCEPT;
void glImportMemoryWin32NameEXT(std::uint32_t memory, std::uint64_t size, gl_enum handleType, const void * name) MYGL_NOEXCEPT;
void glImportSemaphoreFdEXT(std::uint32_t semaphore, gl_enum handleType, std::int32_t fd) MYGL_NOEXCEPT;
void glImportSemaphoreWin32HandleEXT(std::uint32_t semaphore, gl_enum handleType, void * handle) MYGL_NOEXCEPT;
void glImportSemaphoreWin32NameEXT(std::uint32_t semaphore, gl_enum handleType, const void * name) MYGL_NOEXCEPT;
void glIndexFormatNV(gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glInterpolatePathsNV(mygl::path resultPath, std::uint32_t pathA, std::uint32_t pathB, float weight) MYGL_NOEXCEPT;
void glInvalidateBufferData(mygl::buffer buffer) MYGL_NOEXCEPT;
void glInvalidateBufferSubData(mygl::buffer buffer, std::intptr_t offset, std::int64_t length) MYGL_NOEXCEPT;
void glInvalidateFramebuffer(gl_enum target, std::int32_t numAttachments, const gl_enum * attachments) MYGL_NOEXCEPT;
void glInvalidateNamedFramebufferData(mygl::framebuffer framebuffer, std::int32_t numAttachments, const gl_enum * attachments) MYGL_NOEXCEPT;
void glInvalidateNamedFramebufferSubData(mygl::framebuffer framebuffer, std::int32_t numAttachments, const gl_enum * attachments, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glInvalidateSubFramebuffer(gl_enum target, std::int32_t numAttachments, const gl_enum * attachments, std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glInvalidateTexImage(mygl::texture texture, std::int32_t level) MYGL_NOEXCEPT;
void glInvalidateTexSubImage(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth) MYGL_NOEXCEPT;
bool glIsBuffer(mygl::buffer buffer) MYGL_NOEXCEPT;
bool glIsBufferResidentNV(gl_enum target) MYGL_NOEXCEPT;
bool glIsCommandListNV(mygl::command_list list) MYGL_NOEXCEPT;
bool glIsEnabled(gl_enum cap) MYGL_NOEXCEPT;
bool glIsEnabledi(gl_enum target, std::uint32_t index) MYGL_NOEXCEPT;
bool glIsFramebuffer(mygl::framebuffer framebuffer) MYGL_NOEXCEPT;
bool glIsImageHandleResidentARB(std::uint64_t handle) MYGL_NOEXCEPT;
bool glIsMemoryObjectEXT(std::uint32_t memoryObject) MYGL_NOEXCEPT;
bool glIsNamedBufferResidentNV(mygl::buffer buffer) MYGL_NOEXCEPT;
bool glIsPathNV(mygl::path path) MYGL_NOEXCEPT;
bool glIsPointInFillPathNV(mygl::path path, std::uint32_t mask, float x, float y) MYGL_NOEXCEPT;
bool glIsPointInStrokePathNV(mygl::path path, float x, float y) MYGL_NOEXCEPT;
bool glIsProgram(mygl::shader_program program) MYGL_NOEXCEPT;
bool glIsProgramPipeline(mygl::pipeline pipeline) MYGL_NOEXCEPT;
bool glIsQuery(mygl::query id) MYGL_NOEXCEPT;
bool glIsRenderbuffer(mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
bool glIsSemaphoreEXT(std::uint32_t semaphore) MYGL_NOEXCEPT;
bool glIsSampler(mygl::sampler sampler) MYGL_NOEXCEPT;
bool glIsShader(mygl::shader shader) MYGL_NOEXCEPT;
bool glIsStateNV(mygl::state state) MYGL_NOEXCEPT;
bool glIsSync(mygl::sync sync) MYGL_NOEXCEPT;
bool glIsTexture(mygl::texture texture) MYGL_NOEXCEPT;
bool glIsTextureHandleResidentARB(std::uint64_t handle) MYGL_NOEXCEPT;
bool glIsTransformFeedback(mygl::transform_feedback id) MYGL_NOEXCEPT;
bool glIsVertexArray(mygl::vertex_array array) MYGL_NOEXCEPT;
void glLineWidth(float width) MYGL_NOEXCEPT;
void glLinkProgram(mygl::shader_program program) MYGL_NOEXCEPT;
void glListDrawCommandsStatesClientNV(mygl::command_list list, std::uint32_t segment, const void ** indirects, const std::int32_t * sizes, const mygl::state * states, const mygl::framebuffer * fbos, std::uint32_t count) MYGL_NOEXCEPT;
void glLogicOp(gl_enum opcode) MYGL_NOEXCEPT;
void glMakeBufferNonResidentNV(gl_enum target) MYGL_NOEXCEPT;
void glMakeBufferResidentNV(gl_enum target, gl_enum access) MYGL_NOEXCEPT;
void glMakeImageHandleNonResidentARB(std::uint64_t handle) MYGL_NOEXCEPT;
void glMakeImageHandleResidentARB(std::uint64_t handle, gl_enum access) MYGL_NOEXCEPT;
void glMakeNamedBufferNonResidentNV(mygl::buffer buffer) MYGL_NOEXCEPT;
void glMakeNamedBufferResidentNV(mygl::buffer buffer, gl_enum access) MYGL_NOEXCEPT;
void glMakeTextureHandleNonResidentARB(std::uint64_t handle) MYGL_NOEXCEPT;
void glMakeTextureHandleResidentARB(std::uint64_t handle) MYGL_NOEXCEPT;
void *glMapBuffer(gl_enum target, gl_enum access) MYGL_NOEXCEPT;
void *glMapBufferRange(gl_enum target, std::intptr_t offset, std::int64_t length, gl_bitfield access) MYGL_NOEXCEPT;
void *glMapNamedBuffer(mygl::buffer buffer, gl_enum access) MYGL_NOEXCEPT;
void *glMapNamedBufferRange(mygl::buffer buffer, std::intptr_t offset, std::int64_t length, gl_bitfield access) MYGL_NOEXCEPT;
void glMatrixFrustumEXT(gl_enum mode, double left, double right, double bottom, double top, double zNear, double zFar) MYGL_NOEXCEPT;
void glMatrixLoad3x2fNV(gl_enum matrixMode, const float * m) MYGL_NOEXCEPT;
void glMatrixLoad3x3fNV(gl_enum matrixMode, const float * m) MYGL_NOEXCEPT;
void glMatrixLoadIdentityEXT(gl_enum mode) MYGL_NOEXCEPT;
void glMatrixLoadTranspose3x3fNV(gl_enum matrixMode, const float * m) MYGL_NOEXCEPT;
void glMatrixLoadTransposedEXT(gl_enum mode, const double * m) MYGL_NOEXCEPT;
void glMatrixLoadTransposefEXT(gl_enum mode, const float * m) MYGL_NOEXCEPT;
void glMatrixLoaddEXT(gl_enum mode, const double * m) MYGL_NOEXCEPT;
void glMatrixLoadfEXT(gl_enum mode, const float * m) MYGL_NOEXCEPT;
void glMatrixMult3x2fNV(gl_enum matrixMode, const float * m) MYGL_NOEXCEPT;
void glMatrixMult3x3fNV(gl_enum matrixMode, const float * m) MYGL_NOEXCEPT;
void glMatrixMultTranspose3x3fNV(gl_enum matrixMode, const float * m) MYGL_NOEXCEPT;
void glMatrixMultTransposedEXT(gl_enum mode, const double * m) MYGL_NOEXCEPT;
void glMatrixMultTransposefEXT(gl_enum mode, const float * m) MYGL_NOEXCEPT;
void glMatrixMultdEXT(gl_enum mode, const double * m) MYGL_NOEXCEPT;
void glMatrixMultfEXT(gl_enum mode, const float * m) MYGL_NOEXCEPT;
void glMatrixOrthoEXT(gl_enum mode, double left, double right, double bottom, double top, double zNear, double zFar) MYGL_NOEXCEPT;
void glMatrixPopEXT(gl_enum mode) MYGL_NOEXCEPT;
void glMatrixPushEXT(gl_enum mode) MYGL_NOEXCEPT;
void glMatrixRotatedEXT(gl_enum mode, double angle, double x, double y, double z) MYGL_NOEXCEPT;
void glMatrixRotatefEXT(gl_enum mode, float angle, float x, float y, float z) MYGL_NOEXCEPT;
void glMatrixScaledEXT(gl_enum mode, double x, double y, double z) MYGL_NOEXCEPT;
void glMatrixScalefEXT(gl_enum mode, float x, float y, float z) MYGL_NOEXCEPT;
void glMatrixTranslatedEXT(gl_enum mode, double x, double y, double z) MYGL_NOEXCEPT;
void glMatrixTranslatefEXT(gl_enum mode, float x, float y, float z) MYGL_NOEXCEPT;
void glMemoryBarrier(gl_bitfield barriers) MYGL_NOEXCEPT;
void glMemoryBarrierByRegion(gl_bitfield barriers) MYGL_NOEXCEPT;
void glMemoryObjectParameterivEXT(std::uint32_t memoryObject, gl_enum pname, const std::int32_t * params) MYGL_NOEXCEPT;
void glMinSampleShading(float value) MYGL_NOEXCEPT;
void glMultiDrawArrays(gl_enum mode, const std::int32_t * first, const std::int32_t * count, std::int32_t drawcount) MYGL_NOEXCEPT;
void glMultiDrawArraysIndirect(gl_enum mode, const void * indirect, std::int32_t drawcount, std::int32_t stride) MYGL_NOEXCEPT;
void glMultiDrawArraysIndirectBindlessCountNV(gl_enum mode, const void * indirect, std::int32_t drawCount, std::int32_t maxDrawCount, std::int32_t stride, std::int32_t vertexBufferCount) MYGL_NOEXCEPT;
void glMultiDrawArraysIndirectBindlessNV(gl_enum mode, const void * indirect, std::int32_t drawCount, std::int32_t stride, std::int32_t vertexBufferCount) MYGL_NOEXCEPT;
void glMultiDrawArraysIndirectCount(gl_enum mode, const void * indirect, std::intptr_t drawcount, std::int32_t maxdrawcount, std::int32_t stride) MYGL_NOEXCEPT;
void glMultiDrawElements(gl_enum mode, const std::int32_t * count, gl_enum type, const void *const* indices, std::int32_t drawcount) MYGL_NOEXCEPT;
void glMultiDrawElementsBaseVertex(gl_enum mode, const std::int32_t * count, gl_enum type, const void *const* indices, std::int32_t drawcount, const std::int32_t * basevertex) MYGL_NOEXCEPT;
void glMultiDrawElementsIndirect(gl_enum mode, gl_enum type, const void * indirect, std::int32_t drawcount, std::int32_t stride) MYGL_NOEXCEPT;
void glMultiDrawElementsIndirectBindlessCountNV(gl_enum mode, gl_enum type, const void * indirect, std::int32_t drawCount, std::int32_t maxDrawCount, std::int32_t stride, std::int32_t vertexBufferCount) MYGL_NOEXCEPT;
void glMultiDrawElementsIndirectBindlessNV(gl_enum mode, gl_enum type, const void * indirect, std::int32_t drawCount, std::int32_t stride, std::int32_t vertexBufferCount) MYGL_NOEXCEPT;
void glMultiDrawElementsIndirectCount(gl_enum mode, gl_enum type, const void * indirect, std::intptr_t drawcount, std::int32_t maxdrawcount, std::int32_t stride) MYGL_NOEXCEPT;
void glMultiTexCoordP1ui(mygl::texture texture, gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glMultiTexCoordP1uiv(mygl::texture texture, gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glMultiTexCoordP2ui(mygl::texture texture, gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glMultiTexCoordP2uiv(mygl::texture texture, gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glMultiTexCoordP3ui(mygl::texture texture, gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glMultiTexCoordP3uiv(mygl::texture texture, gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glMultiTexCoordP4ui(mygl::texture texture, gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glMultiTexCoordP4uiv(mygl::texture texture, gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glNamedBufferData(mygl::buffer buffer, std::int64_t size, const void * data, gl_enum usage) MYGL_NOEXCEPT;
void glNamedBufferStorage(mygl::buffer buffer, std::int64_t size, const void * data, gl_bitfield flags) MYGL_NOEXCEPT;
void glNamedBufferStorageMemEXT(mygl::buffer buffer, std::int64_t size, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glNamedBufferSubData(mygl::buffer buffer, std::intptr_t offset, std::int64_t size, const void * data) MYGL_NOEXCEPT;
void glNamedFramebufferDrawBuffer(mygl::framebuffer framebuffer, gl_enum buf) MYGL_NOEXCEPT;
void glNamedFramebufferDrawBuffers(mygl::framebuffer framebuffer, std::int32_t n, const gl_enum * bufs) MYGL_NOEXCEPT;
void glNamedFramebufferParameteri(mygl::framebuffer framebuffer, gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
void glNamedFramebufferReadBuffer(mygl::framebuffer framebuffer, gl_enum src) MYGL_NOEXCEPT;
void glNamedFramebufferRenderbuffer(mygl::framebuffer framebuffer, gl_enum attachment, gl_enum renderbuffertarget, mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
void glNamedFramebufferTexture(mygl::framebuffer framebuffer, gl_enum attachment, mygl::texture texture, std::int32_t level) MYGL_NOEXCEPT;
void glNamedFramebufferTextureLayer(mygl::framebuffer framebuffer, gl_enum attachment, mygl::texture texture, std::int32_t level, std::int32_t layer) MYGL_NOEXCEPT;
void glNamedRenderbufferStorage(mygl::renderbuffer renderbuffer, gl_enum internalformat, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glNamedRenderbufferStorageMultisample(mygl::renderbuffer renderbuffer, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glNormalFormatNV(gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glNormalP3ui(gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glNormalP3uiv(gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glObjectLabel(gl_enum identifier, std::uint32_t name, std::int32_t length, const char * label) MYGL_NOEXCEPT;
void glObjectLabelKHR(gl_enum identifier, std::uint32_t name, std::int32_t length, const char * label) MYGL_NOEXCEPT;
void glObjectPtrLabel(const void * ptr, std::int32_t length, const char * label) MYGL_NOEXCEPT;
void glObjectPtrLabelKHR(const void * ptr, std::int32_t length, const char * label) MYGL_NOEXCEPT;
void glPatchParameterfv(gl_enum pname, const float * values) MYGL_NOEXCEPT;
void glPatchParameteri(gl_enum pname, std::int32_t value) MYGL_NOEXCEPT;
void glPathColorGenNV(gl_enum color, gl_enum genMode, gl_enum colorFormat, const float * coeffs) MYGL_NOEXCEPT;
void glPathCommandsNV(mygl::path path, std::int32_t numCommands, const std::uint8_t * commands, std::int32_t numCoords, gl_enum coordType, const void * coords) MYGL_NOEXCEPT;
void glPathCoordsNV(mygl::path path, std::int32_t numCoords, gl_enum coordType, const void * coords) MYGL_NOEXCEPT;
void glPathCoverDepthFuncNV(gl_enum func) MYGL_NOEXCEPT;
void glPathDashArrayNV(mygl::path path, std::int32_t dashCount, const float * dashArray) MYGL_NOEXCEPT;
void glPathFogGenNV(gl_enum genMode) MYGL_NOEXCEPT;
gl_enum glPathGlyphIndexArrayNV(mygl::path firstPathName, gl_enum fontTarget, const void * fontName, gl_bitfield fontStyle, std::uint32_t firstGlyphIndex, std::int32_t numGlyphs, std::uint32_t pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
gl_enum glPathGlyphIndexRangeNV(gl_enum fontTarget, const void * fontName, gl_bitfield fontStyle, std::uint32_t pathParameterTemplate, float emScale, std::uint32_t baseAndCount[2]) MYGL_NOEXCEPT;
void glPathGlyphRangeNV(mygl::path firstPathName, gl_enum fontTarget, const void * fontName, gl_bitfield fontStyle, std::uint32_t firstGlyph, std::int32_t numGlyphs, gl_enum handleMissingGlyphs, std::uint32_t pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
void glPathGlyphsNV(mygl::path firstPathName, gl_enum fontTarget, const void * fontName, gl_bitfield fontStyle, std::int32_t numGlyphs, gl_enum type, const void * charcodes, gl_enum handleMissingGlyphs, std::uint32_t pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
gl_enum glPathMemoryGlyphIndexArrayNV(mygl::path firstPathName, gl_enum fontTarget, std::int64_t fontSize, const void * fontData, std::int32_t faceIndex, std::uint32_t firstGlyphIndex, std::int32_t numGlyphs, std::uint32_t pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
void glPathParameterfNV(mygl::path path, gl_enum pname, float value) MYGL_NOEXCEPT;
void glPathParameterfvNV(mygl::path path, gl_enum pname, const float * value) MYGL_NOEXCEPT;
void glPathParameteriNV(mygl::path path, gl_enum pname, std::int32_t value) MYGL_NOEXCEPT;
void glPathParameterivNV(mygl::path path, gl_enum pname, const std::int32_t * value) MYGL_NOEXCEPT;
void glPathStencilDepthOffsetNV(float factor, float units) MYGL_NOEXCEPT;
void glPathStencilFuncNV(gl_enum func, std::int32_t ref, std::uint32_t mask) MYGL_NOEXCEPT;
void glPathStringNV(mygl::path path, gl_enum format, std::int32_t length, const void * pathString) MYGL_NOEXCEPT;
void glPathSubCommandsNV(mygl::path path, std::int32_t commandStart, std::int32_t commandsToDelete, std::int32_t numCommands, const std::uint8_t * commands, std::int32_t numCoords, gl_enum coordType, const void * coords) MYGL_NOEXCEPT;
void glPathSubCoordsNV(mygl::path path, std::int32_t coordStart, std::int32_t numCoords, gl_enum coordType, const void * coords) MYGL_NOEXCEPT;
void glPathTexGenNV(gl_enum texCoordSet, gl_enum genMode, std::int32_t components, const float * coeffs) MYGL_NOEXCEPT;
void glPauseTransformFeedback() MYGL_NOEXCEPT;
void glPixelStoref(gl_enum pname, float param) MYGL_NOEXCEPT;
void glPixelStorei(gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
bool glPointAlongPathNV(mygl::path path, std::int32_t startSegment, std::int32_t numSegments, float distance, float * x, float * y, float * tangentX, float * tangentY) MYGL_NOEXCEPT;
void glPointParameterf(gl_enum pname, float param) MYGL_NOEXCEPT;
void glPointParameterfv(gl_enum pname, const float * params) MYGL_NOEXCEPT;
void glPointParameteri(gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
void glPointParameteriv(gl_enum pname, const std::int32_t * params) MYGL_NOEXCEPT;
void glPointSize(float size) MYGL_NOEXCEPT;
void glPolygonMode(gl_enum face, gl_enum mode) MYGL_NOEXCEPT;
void glPolygonOffset(float factor, float units) MYGL_NOEXCEPT;
void glPolygonOffsetClamp(float factor, float units, float clamp) MYGL_NOEXCEPT;
void glPolygonOffsetClampEXT(float factor, float units, float clamp) MYGL_NOEXCEPT;
void glPopDebugGroup() MYGL_NOEXCEPT;
void glPopDebugGroupKHR() MYGL_NOEXCEPT;
void glPrimitiveRestartIndex(std::uint32_t index) MYGL_NOEXCEPT;
void glProgramBinary(mygl::shader_program program, gl_enum binaryFormat, const void * binary, std::int32_t length) MYGL_NOEXCEPT;
void glProgramParameteri(mygl::shader_program program, gl_enum pname, std::int32_t value) MYGL_NOEXCEPT;
void glProgramPathFragmentInputGenNV(mygl::shader_program program, std::int32_t location, gl_enum genMode, std::int32_t components, const float * coeffs) MYGL_NOEXCEPT;
void glProgramSubroutineParametersuivNV(gl_enum target, std::int32_t count, const std::uint32_t * params) MYGL_NOEXCEPT;
void glProgramUniform1d(mygl::shader_program program, std::int32_t location, double v0) MYGL_NOEXCEPT;
void glProgramUniform1dv(mygl::shader_program program, std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glProgramUniform1f(mygl::shader_program program, std::int32_t location, float v0) MYGL_NOEXCEPT;
void glProgramUniform1fv(mygl::shader_program program, std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glProgramUniform1i(mygl::shader_program program, std::int32_t location, std::int32_t v0) MYGL_NOEXCEPT;
void glProgramUniform1i64ARB(mygl::shader_program program, std::int32_t location, std::int64_t x) MYGL_NOEXCEPT;
void glProgramUniform1i64NV(mygl::shader_program program, std::int32_t location, std::int64_t x) MYGL_NOEXCEPT;
void glProgramUniform1i64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform1i64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform1iv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glProgramUniform1ui(mygl::shader_program program, std::int32_t location, std::uint32_t v0) MYGL_NOEXCEPT;
void glProgramUniform1ui64ARB(mygl::shader_program program, std::int32_t location, std::uint64_t x) MYGL_NOEXCEPT;
void glProgramUniform1ui64NV(mygl::shader_program program, std::int32_t location, std::uint64_t x) MYGL_NOEXCEPT;
void glProgramUniform1ui64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform1ui64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform1uiv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glProgramUniform2d(mygl::shader_program program, std::int32_t location, double v0, double v1) MYGL_NOEXCEPT;
void glProgramUniform2dv(mygl::shader_program program, std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glProgramUniform2f(mygl::shader_program program, std::int32_t location, float v0, float v1) MYGL_NOEXCEPT;
void glProgramUniform2fv(mygl::shader_program program, std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glProgramUniform2i(mygl::shader_program program, std::int32_t location, std::int32_t v0, std::int32_t v1) MYGL_NOEXCEPT;
void glProgramUniform2i64ARB(mygl::shader_program program, std::int32_t location, std::int64_t x, std::int64_t y) MYGL_NOEXCEPT;
void glProgramUniform2i64NV(mygl::shader_program program, std::int32_t location, std::int64_t x, std::int64_t y) MYGL_NOEXCEPT;
void glProgramUniform2i64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform2i64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform2iv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glProgramUniform2ui(mygl::shader_program program, std::int32_t location, std::uint32_t v0, std::uint32_t v1) MYGL_NOEXCEPT;
void glProgramUniform2ui64ARB(mygl::shader_program program, std::int32_t location, std::uint64_t x, std::uint64_t y) MYGL_NOEXCEPT;
void glProgramUniform2ui64NV(mygl::shader_program program, std::int32_t location, std::uint64_t x, std::uint64_t y) MYGL_NOEXCEPT;
void glProgramUniform2ui64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform2ui64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform2uiv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glProgramUniform3d(mygl::shader_program program, std::int32_t location, double v0, double v1, double v2) MYGL_NOEXCEPT;
void glProgramUniform3dv(mygl::shader_program program, std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glProgramUniform3f(mygl::shader_program program, std::int32_t location, float v0, float v1, float v2) MYGL_NOEXCEPT;
void glProgramUniform3fv(mygl::shader_program program, std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glProgramUniform3i(mygl::shader_program program, std::int32_t location, std::int32_t v0, std::int32_t v1, std::int32_t v2) MYGL_NOEXCEPT;
void glProgramUniform3i64ARB(mygl::shader_program program, std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z) MYGL_NOEXCEPT;
void glProgramUniform3i64NV(mygl::shader_program program, std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z) MYGL_NOEXCEPT;
void glProgramUniform3i64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform3i64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform3iv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glProgramUniform3ui(mygl::shader_program program, std::int32_t location, std::uint32_t v0, std::uint32_t v1, std::uint32_t v2) MYGL_NOEXCEPT;
void glProgramUniform3ui64ARB(mygl::shader_program program, std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z) MYGL_NOEXCEPT;
void glProgramUniform3ui64NV(mygl::shader_program program, std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z) MYGL_NOEXCEPT;
void glProgramUniform3ui64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform3ui64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform3uiv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glProgramUniform4d(mygl::shader_program program, std::int32_t location, double v0, double v1, double v2, double v3) MYGL_NOEXCEPT;
void glProgramUniform4dv(mygl::shader_program program, std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glProgramUniform4f(mygl::shader_program program, std::int32_t location, float v0, float v1, float v2, float v3) MYGL_NOEXCEPT;
void glProgramUniform4fv(mygl::shader_program program, std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glProgramUniform4i(mygl::shader_program program, std::int32_t location, std::int32_t v0, std::int32_t v1, std::int32_t v2, std::int32_t v3) MYGL_NOEXCEPT;
void glProgramUniform4i64ARB(mygl::shader_program program, std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z, std::int64_t w) MYGL_NOEXCEPT;
void glProgramUniform4i64NV(mygl::shader_program program, std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z, std::int64_t w) MYGL_NOEXCEPT;
void glProgramUniform4i64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform4i64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glProgramUniform4iv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glProgramUniform4ui(mygl::shader_program program, std::int32_t location, std::uint32_t v0, std::uint32_t v1, std::uint32_t v2, std::uint32_t v3) MYGL_NOEXCEPT;
void glProgramUniform4ui64ARB(mygl::shader_program program, std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z, std::uint64_t w) MYGL_NOEXCEPT;
void glProgramUniform4ui64NV(mygl::shader_program program, std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z, std::uint64_t w) MYGL_NOEXCEPT;
void glProgramUniform4ui64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform4ui64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProgramUniform4uiv(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glProgramUniformHandleui64ARB(mygl::shader_program program, std::int32_t location, std::uint64_t value) MYGL_NOEXCEPT;
void glProgramUniformHandleui64vARB(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * values) MYGL_NOEXCEPT;
void glProgramUniformMatrix2dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix2fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix2x3dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix2x3fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix2x4dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix2x4fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix3dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix3fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix3x2dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix3x2fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix3x4dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix3x4fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix4dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix4fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix4x2dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix4x2fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix4x3dv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glProgramUniformMatrix4x3fv(mygl::shader_program program, std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glProgramUniformui64NV(mygl::shader_program program, std::int32_t location, std::uint64_t value) MYGL_NOEXCEPT;
void glProgramUniformui64vNV(mygl::shader_program program, std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glProvokingVertex(gl_enum mode) MYGL_NOEXCEPT;
void glPushDebugGroup(gl_enum source, std::uint32_t id, std::int32_t length, const char * message) MYGL_NOEXCEPT;
void glPushDebugGroupKHR(gl_enum source, std::uint32_t id, std::int32_t length, const char * message) MYGL_NOEXCEPT;
void glQueryCounter(mygl::query id, gl_enum target) MYGL_NOEXCEPT;
void glReadBuffer(gl_enum src) MYGL_NOEXCEPT;
void glReadPixels(std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height, gl_enum format, gl_enum type, void * pixels) MYGL_NOEXCEPT;
void glReadnPixels(std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height, gl_enum format, gl_enum type, std::int32_t bufSize, void * data) MYGL_NOEXCEPT;
void glReleaseShaderCompiler() MYGL_NOEXCEPT;
void glRenderbufferStorage(gl_enum target, gl_enum internalformat, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glRenderbufferStorageMultisample(gl_enum target, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glResumeTransformFeedback() MYGL_NOEXCEPT;
void glSampleCoverage(float value, bool invert) MYGL_NOEXCEPT;
void glSampleMaski(std::uint32_t maskNumber, gl_bitfield mask) MYGL_NOEXCEPT;
void glSamplerParameterIiv(mygl::sampler sampler, gl_enum pname, const std::int32_t * param) MYGL_NOEXCEPT;
void glSamplerParameterIuiv(mygl::sampler sampler, gl_enum pname, const std::uint32_t * param) MYGL_NOEXCEPT;
void glSamplerParameterf(mygl::sampler sampler, gl_enum pname, float param) MYGL_NOEXCEPT;
void glSamplerParameterfv(mygl::sampler sampler, gl_enum pname, const float * param) MYGL_NOEXCEPT;
void glSamplerParameteri(mygl::sampler sampler, gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
void glSamplerParameteriv(mygl::sampler sampler, gl_enum pname, const std::int32_t * param) MYGL_NOEXCEPT;
void glScissor(std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glScissorArrayv(std::uint32_t first, std::int32_t count, const std::int32_t * v) MYGL_NOEXCEPT;
void glScissorIndexed(std::uint32_t index, std::int32_t left, std::int32_t bottom, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glScissorIndexedv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glSecondaryColorFormatNV(std::int32_t size, gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glSecondaryColorP3ui(gl_enum type, std::uint32_t color) MYGL_NOEXCEPT;
void glSecondaryColorP3uiv(gl_enum type, const std::uint32_t * color) MYGL_NOEXCEPT;
void glSemaphoreParameterui64vEXT(std::uint32_t semaphore, gl_enum pname, const std::uint64_t * params) MYGL_NOEXCEPT;
void glShaderBinary(std::int32_t count, const mygl::shader * shaders, gl_enum binaryformat, const void * binary, std::int32_t length) MYGL_NOEXCEPT;
void glShaderSource(mygl::shader shader, std::int32_t count, const char *const* string, const std::int32_t * length) MYGL_NOEXCEPT;
void glShaderStorageBlockBinding(mygl::shader_program program, std::uint32_t storageBlockIndex, std::uint32_t storageBlockBinding) MYGL_NOEXCEPT;
void glSignalSemaphoreEXT(std::uint32_t semaphore, std::uint32_t numBufferBarriers, const mygl::buffer * buffers, std::uint32_t numTextureBarriers, const mygl::texture * textures, const gl_enum * dstLayouts) MYGL_NOEXCEPT;
void glSpecializeShader(mygl::shader shader, const char * pEntryPoint, std::uint32_t numSpecializationConstants, const std::uint32_t * pConstantIndex, const std::uint32_t * pConstantValue) MYGL_NOEXCEPT;
void glStateCaptureNV(mygl::state state, gl_enum mode) MYGL_NOEXCEPT;
void glStencilFillPathInstancedNV(std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, gl_enum fillMode, std::uint32_t mask, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glStencilFillPathNV(mygl::path path, gl_enum fillMode, std::uint32_t mask) MYGL_NOEXCEPT;
void glStencilFunc(gl_enum func, std::int32_t ref, std::uint32_t mask) MYGL_NOEXCEPT;
void glStencilFuncSeparate(gl_enum face, gl_enum func, std::int32_t ref, std::uint32_t mask) MYGL_NOEXCEPT;
void glStencilMask(std::uint32_t mask) MYGL_NOEXCEPT;
void glStencilMaskSeparate(gl_enum face, std::uint32_t mask) MYGL_NOEXCEPT;
void glStencilOp(gl_enum fail, gl_enum zfail, gl_enum zpass) MYGL_NOEXCEPT;
void glStencilOpSeparate(gl_enum face, gl_enum sfail, gl_enum dpfail, gl_enum dppass) MYGL_NOEXCEPT;
void glStencilStrokePathInstancedNV(std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, std::int32_t reference, std::uint32_t mask, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glStencilStrokePathNV(mygl::path path, std::int32_t reference, std::uint32_t mask) MYGL_NOEXCEPT;
void glStencilThenCoverFillPathInstancedNV(std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, gl_enum fillMode, std::uint32_t mask, gl_enum coverMode, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glStencilThenCoverFillPathNV(mygl::path path, gl_enum fillMode, std::uint32_t mask, gl_enum coverMode) MYGL_NOEXCEPT;
void glStencilThenCoverStrokePathInstancedNV(std::int32_t numPaths, gl_enum pathNameType, const void * paths, mygl::path pathBase, std::int32_t reference, std::uint32_t mask, gl_enum coverMode, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glStencilThenCoverStrokePathNV(mygl::path path, std::int32_t reference, std::uint32_t mask, gl_enum coverMode) MYGL_NOEXCEPT;
void glTexBuffer(gl_enum target, gl_enum internalformat, mygl::buffer buffer) MYGL_NOEXCEPT;
void glTexBufferRange(gl_enum target, gl_enum internalformat, mygl::buffer buffer, std::intptr_t offset, std::int64_t size) MYGL_NOEXCEPT;
void glTexCoordFormatNV(std::int32_t size, gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glTexCoordP1ui(gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glTexCoordP1uiv(gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glTexCoordP2ui(gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glTexCoordP2uiv(gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glTexCoordP3ui(gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glTexCoordP3uiv(gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glTexCoordP4ui(gl_enum type, std::uint32_t coords) MYGL_NOEXCEPT;
void glTexCoordP4uiv(gl_enum type, const std::uint32_t * coords) MYGL_NOEXCEPT;
void glTexImage1D(gl_enum target, std::int32_t level, std::int32_t internalformat, std::int32_t width, std::int32_t border, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTexImage2D(gl_enum target, std::int32_t level, std::int32_t internalformat, std::int32_t width, std::int32_t height, std::int32_t border, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTexImage2DMultisample(gl_enum target, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height, bool fixedsamplelocations) MYGL_NOEXCEPT;
void glTexImage3D(gl_enum target, std::int32_t level, std::int32_t internalformat, std::int32_t width, std::int32_t height, std::int32_t depth, std::int32_t border, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTexImage3DMultisample(gl_enum target, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t depth, bool fixedsamplelocations) MYGL_NOEXCEPT;
void glTexParameterIiv(gl_enum target, gl_enum pname, const std::int32_t * params) MYGL_NOEXCEPT;
void glTexParameterIuiv(gl_enum target, gl_enum pname, const std::uint32_t * params) MYGL_NOEXCEPT;
void glTexParameterf(gl_enum target, gl_enum pname, float param) MYGL_NOEXCEPT;
void glTexParameterfv(gl_enum target, gl_enum pname, const float * params) MYGL_NOEXCEPT;
void glTexParameteri(gl_enum target, gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
void glTexParameteriv(gl_enum target, gl_enum pname, const std::int32_t * params) MYGL_NOEXCEPT;
void glTexStorage1D(gl_enum target, std::int32_t levels, gl_enum internalformat, std::int32_t width) MYGL_NOEXCEPT;
void glTexStorage2D(gl_enum target, std::int32_t levels, gl_enum internalformat, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glTexStorage2DMultisample(gl_enum target, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height, bool fixedsamplelocations) MYGL_NOEXCEPT;
void glTexStorage3D(gl_enum target, std::int32_t levels, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t depth) MYGL_NOEXCEPT;
void glTexStorage3DMultisample(gl_enum target, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t depth, bool fixedsamplelocations) MYGL_NOEXCEPT;
void glTexStorageMem1DEXT(gl_enum target, std::int32_t levels, gl_enum internalFormat, std::int32_t width, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTexStorageMem2DEXT(gl_enum target, std::int32_t levels, gl_enum internalFormat, std::int32_t width, std::int32_t height, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTexStorageMem2DMultisampleEXT(gl_enum target, std::int32_t samples, gl_enum internalFormat, std::int32_t width, std::int32_t height, bool fixedSampleLocations, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTexStorageMem3DEXT(gl_enum target, std::int32_t levels, gl_enum internalFormat, std::int32_t width, std::int32_t height, std::int32_t depth, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTexStorageMem3DMultisampleEXT(gl_enum target, std::int32_t samples, gl_enum internalFormat, std::int32_t width, std::int32_t height, std::int32_t depth, bool fixedSampleLocations, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTexSubImage1D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t width, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTexSubImage2D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t width, std::int32_t height, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTexSubImage3D(gl_enum target, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTextureBarrier() MYGL_NOEXCEPT;
void glTextureBuffer(mygl::texture texture, gl_enum internalformat, mygl::buffer buffer) MYGL_NOEXCEPT;
void glTextureBufferRange(mygl::texture texture, gl_enum internalformat, mygl::buffer buffer, std::intptr_t offset, std::int64_t size) MYGL_NOEXCEPT;
void glTextureParameterIiv(mygl::texture texture, gl_enum pname, const std::int32_t * params) MYGL_NOEXCEPT;
void glTextureParameterIuiv(mygl::texture texture, gl_enum pname, const std::uint32_t * params) MYGL_NOEXCEPT;
void glTextureParameterf(mygl::texture texture, gl_enum pname, float param) MYGL_NOEXCEPT;
void glTextureParameterfv(mygl::texture texture, gl_enum pname, const float * param) MYGL_NOEXCEPT;
void glTextureParameteri(mygl::texture texture, gl_enum pname, std::int32_t param) MYGL_NOEXCEPT;
void glTextureParameteriv(mygl::texture texture, gl_enum pname, const std::int32_t * param) MYGL_NOEXCEPT;
void glTextureStorage1D(mygl::texture texture, std::int32_t levels, gl_enum internalformat, std::int32_t width) MYGL_NOEXCEPT;
void glTextureStorage2D(mygl::texture texture, std::int32_t levels, gl_enum internalformat, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glTextureStorage2DMultisample(mygl::texture texture, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height, bool fixedsamplelocations) MYGL_NOEXCEPT;
void glTextureStorage3D(mygl::texture texture, std::int32_t levels, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t depth) MYGL_NOEXCEPT;
void glTextureStorage3DMultisample(mygl::texture texture, std::int32_t samples, gl_enum internalformat, std::int32_t width, std::int32_t height, std::int32_t depth, bool fixedsamplelocations) MYGL_NOEXCEPT;
void glTextureStorageMem1DEXT(mygl::texture texture, std::int32_t levels, gl_enum internalFormat, std::int32_t width, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTextureStorageMem2DEXT(mygl::texture texture, std::int32_t levels, gl_enum internalFormat, std::int32_t width, std::int32_t height, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTextureStorageMem2DMultisampleEXT(mygl::texture texture, std::int32_t samples, gl_enum internalFormat, std::int32_t width, std::int32_t height, bool fixedSampleLocations, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTextureStorageMem3DEXT(mygl::texture texture, std::int32_t levels, gl_enum internalFormat, std::int32_t width, std::int32_t height, std::int32_t depth, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTextureStorageMem3DMultisampleEXT(mygl::texture texture, std::int32_t samples, gl_enum internalFormat, std::int32_t width, std::int32_t height, std::int32_t depth, bool fixedSampleLocations, std::uint32_t memory, std::uint64_t offset) MYGL_NOEXCEPT;
void glTextureSubImage1D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t width, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTextureSubImage2D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t width, std::int32_t height, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTextureSubImage3D(mygl::texture texture, std::int32_t level, std::int32_t xoffset, std::int32_t yoffset, std::int32_t zoffset, std::int32_t width, std::int32_t height, std::int32_t depth, gl_enum format, gl_enum type, const void * pixels) MYGL_NOEXCEPT;
void glTextureView(mygl::texture texture, gl_enum target, mygl::texture origtexture, gl_enum internalformat, std::uint32_t minlevel, std::uint32_t numlevels, std::uint32_t minlayer, std::uint32_t numlayers) MYGL_NOEXCEPT;
void glTransformFeedbackBufferBase(mygl::transform_feedback xfb, std::uint32_t index, mygl::buffer buffer) MYGL_NOEXCEPT;
void glTransformFeedbackBufferRange(mygl::transform_feedback xfb, std::uint32_t index, mygl::buffer buffer, std::intptr_t offset, std::int64_t size) MYGL_NOEXCEPT;
void glTransformFeedbackVaryings(mygl::shader_program program, std::int32_t count, const char *const* varyings, gl_enum bufferMode) MYGL_NOEXCEPT;
void glTransformPathNV(mygl::path resultPath, mygl::path srcPath, gl_enum transformType, const float * transformValues) MYGL_NOEXCEPT;
void glUniform1d(std::int32_t location, double x) MYGL_NOEXCEPT;
void glUniform1dv(std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glUniform1f(std::int32_t location, float v0) MYGL_NOEXCEPT;
void glUniform1fv(std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glUniform1i(std::int32_t location, std::int32_t v0) MYGL_NOEXCEPT;
void glUniform1i64ARB(std::int32_t location, std::int64_t x) MYGL_NOEXCEPT;
void glUniform1i64NV(std::int32_t location, std::int64_t x) MYGL_NOEXCEPT;
void glUniform1i64vARB(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform1i64vNV(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform1iv(std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glUniform1ui(std::int32_t location, std::uint32_t v0) MYGL_NOEXCEPT;
void glUniform1ui64ARB(std::int32_t location, std::uint64_t x) MYGL_NOEXCEPT;
void glUniform1ui64NV(std::int32_t location, std::uint64_t x) MYGL_NOEXCEPT;
void glUniform1ui64vARB(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform1ui64vNV(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform1uiv(std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glUniform2d(std::int32_t location, double x, double y) MYGL_NOEXCEPT;
void glUniform2dv(std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glUniform2f(std::int32_t location, float v0, float v1) MYGL_NOEXCEPT;
void glUniform2fv(std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glUniform2i(std::int32_t location, std::int32_t v0, std::int32_t v1) MYGL_NOEXCEPT;
void glUniform2i64ARB(std::int32_t location, std::int64_t x, std::int64_t y) MYGL_NOEXCEPT;
void glUniform2i64NV(std::int32_t location, std::int64_t x, std::int64_t y) MYGL_NOEXCEPT;
void glUniform2i64vARB(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform2i64vNV(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform2iv(std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glUniform2ui(std::int32_t location, std::uint32_t v0, std::uint32_t v1) MYGL_NOEXCEPT;
void glUniform2ui64ARB(std::int32_t location, std::uint64_t x, std::uint64_t y) MYGL_NOEXCEPT;
void glUniform2ui64NV(std::int32_t location, std::uint64_t x, std::uint64_t y) MYGL_NOEXCEPT;
void glUniform2ui64vARB(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform2ui64vNV(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform2uiv(std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glUniform3d(std::int32_t location, double x, double y, double z) MYGL_NOEXCEPT;
void glUniform3dv(std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glUniform3f(std::int32_t location, float v0, float v1, float v2) MYGL_NOEXCEPT;
void glUniform3fv(std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glUniform3i(std::int32_t location, std::int32_t v0, std::int32_t v1, std::int32_t v2) MYGL_NOEXCEPT;
void glUniform3i64ARB(std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z) MYGL_NOEXCEPT;
void glUniform3i64NV(std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z) MYGL_NOEXCEPT;
void glUniform3i64vARB(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform3i64vNV(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform3iv(std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glUniform3ui(std::int32_t location, std::uint32_t v0, std::uint32_t v1, std::uint32_t v2) MYGL_NOEXCEPT;
void glUniform3ui64ARB(std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z) MYGL_NOEXCEPT;
void glUniform3ui64NV(std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z) MYGL_NOEXCEPT;
void glUniform3ui64vARB(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform3ui64vNV(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform3uiv(std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glUniform4d(std::int32_t location, double x, double y, double z, double w) MYGL_NOEXCEPT;
void glUniform4dv(std::int32_t location, std::int32_t count, const double * value) MYGL_NOEXCEPT;
void glUniform4f(std::int32_t location, float v0, float v1, float v2, float v3) MYGL_NOEXCEPT;
void glUniform4fv(std::int32_t location, std::int32_t count, const float * value) MYGL_NOEXCEPT;
void glUniform4i(std::int32_t location, std::int32_t v0, std::int32_t v1, std::int32_t v2, std::int32_t v3) MYGL_NOEXCEPT;
void glUniform4i64ARB(std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z, std::int64_t w) MYGL_NOEXCEPT;
void glUniform4i64NV(std::int32_t location, std::int64_t x, std::int64_t y, std::int64_t z, std::int64_t w) MYGL_NOEXCEPT;
void glUniform4i64vARB(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform4i64vNV(std::int32_t location, std::int32_t count, const std::int64_t * value) MYGL_NOEXCEPT;
void glUniform4iv(std::int32_t location, std::int32_t count, const std::int32_t * value) MYGL_NOEXCEPT;
void glUniform4ui(std::int32_t location, std::uint32_t v0, std::uint32_t v1, std::uint32_t v2, std::uint32_t v3) MYGL_NOEXCEPT;
void glUniform4ui64ARB(std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z, std::uint64_t w) MYGL_NOEXCEPT;
void glUniform4ui64NV(std::int32_t location, std::uint64_t x, std::uint64_t y, std::uint64_t z, std::uint64_t w) MYGL_NOEXCEPT;
void glUniform4ui64vARB(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform4ui64vNV(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniform4uiv(std::int32_t location, std::int32_t count, const std::uint32_t * value) MYGL_NOEXCEPT;
void glUniformBlockBinding(mygl::shader_program program, std::uint32_t uniformBlockIndex, std::uint32_t uniformBlockBinding) MYGL_NOEXCEPT;
void glUniformHandleui64ARB(std::int32_t location, std::uint64_t value) MYGL_NOEXCEPT;
void glUniformHandleui64vARB(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
void glUniformMatrix2dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix2fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix2x3dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix2x3fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix2x4dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix2x4fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix3dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix3fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix3x2dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix3x2fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix3x4dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix3x4fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix4dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix4fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix4x2dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix4x2fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformMatrix4x3dv(std::int32_t location, std::int32_t count, bool transpose, const double * value) MYGL_NOEXCEPT;
void glUniformMatrix4x3fv(std::int32_t location, std::int32_t count, bool transpose, const float * value) MYGL_NOEXCEPT;
void glUniformSubroutinesuiv(gl_enum shadertype, std::int32_t count, const std::uint32_t * indices) MYGL_NOEXCEPT;
void glUniformui64NV(std::int32_t location, std::uint64_t value) MYGL_NOEXCEPT;
void glUniformui64vNV(std::int32_t location, std::int32_t count, const std::uint64_t * value) MYGL_NOEXCEPT;
bool glUnmapBuffer(gl_enum target) MYGL_NOEXCEPT;
bool glUnmapNamedBuffer(mygl::buffer buffer) MYGL_NOEXCEPT;
void glUseProgram(mygl::shader_program program) MYGL_NOEXCEPT;
void glUseProgramStages(mygl::pipeline pipeline, gl_bitfield stages, mygl::shader_program program) MYGL_NOEXCEPT;
void glValidateProgram(mygl::shader_program program) MYGL_NOEXCEPT;
void glValidateProgramPipeline(mygl::pipeline pipeline) MYGL_NOEXCEPT;
void glVertexArrayAttribBinding(mygl::vertex_array vaobj, std::uint32_t attribindex, std::uint32_t bindingindex) MYGL_NOEXCEPT;
void glVertexArrayAttribFormat(mygl::vertex_array vaobj, std::uint32_t attribindex, std::int32_t size, gl_enum type, bool normalized, std::uint32_t relativeoffset) MYGL_NOEXCEPT;
void glVertexArrayAttribIFormat(mygl::vertex_array vaobj, std::uint32_t attribindex, std::int32_t size, gl_enum type, std::uint32_t relativeoffset) MYGL_NOEXCEPT;
void glVertexArrayAttribLFormat(mygl::vertex_array vaobj, std::uint32_t attribindex, std::int32_t size, gl_enum type, std::uint32_t relativeoffset) MYGL_NOEXCEPT;
void glVertexArrayBindingDivisor(mygl::vertex_array vaobj, std::uint32_t bindingindex, std::uint32_t divisor) MYGL_NOEXCEPT;
void glVertexArrayElementBuffer(mygl::vertex_array vaobj, mygl::buffer buffer) MYGL_NOEXCEPT;
void glVertexArrayVertexBuffer(mygl::vertex_array vaobj, std::uint32_t bindingindex, mygl::buffer buffer, std::intptr_t offset, std::int32_t stride) MYGL_NOEXCEPT;
void glVertexArrayVertexBuffers(mygl::vertex_array vaobj, std::uint32_t first, std::int32_t count, const mygl::buffer * buffers, const std::intptr_t * offsets, const std::int32_t * strides) MYGL_NOEXCEPT;
void glVertexAttrib1d(std::uint32_t index, double x) MYGL_NOEXCEPT;
void glVertexAttrib1dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttrib1f(std::uint32_t index, float x) MYGL_NOEXCEPT;
void glVertexAttrib1fv(std::uint32_t index, const float * v) MYGL_NOEXCEPT;
void glVertexAttrib1s(std::uint32_t index, std::int16_t x) MYGL_NOEXCEPT;
void glVertexAttrib1sv(std::uint32_t index, const std::int16_t * v) MYGL_NOEXCEPT;
void glVertexAttrib2d(std::uint32_t index, double x, double y) MYGL_NOEXCEPT;
void glVertexAttrib2dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttrib2f(std::uint32_t index, float x, float y) MYGL_NOEXCEPT;
void glVertexAttrib2fv(std::uint32_t index, const float * v) MYGL_NOEXCEPT;
void glVertexAttrib2s(std::uint32_t index, std::int16_t x, std::int16_t y) MYGL_NOEXCEPT;
void glVertexAttrib2sv(std::uint32_t index, const std::int16_t * v) MYGL_NOEXCEPT;
void glVertexAttrib3d(std::uint32_t index, double x, double y, double z) MYGL_NOEXCEPT;
void glVertexAttrib3dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttrib3f(std::uint32_t index, float x, float y, float z) MYGL_NOEXCEPT;
void glVertexAttrib3fv(std::uint32_t index, const float * v) MYGL_NOEXCEPT;
void glVertexAttrib3s(std::uint32_t index, std::int16_t x, std::int16_t y, std::int16_t z) MYGL_NOEXCEPT;
void glVertexAttrib3sv(std::uint32_t index, const std::int16_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4Nbv(std::uint32_t index, const std::int8_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4Niv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4Nsv(std::uint32_t index, const std::int16_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4Nub(std::uint32_t index, std::uint8_t x, std::uint8_t y, std::uint8_t z, std::uint8_t w) MYGL_NOEXCEPT;
void glVertexAttrib4Nubv(std::uint32_t index, const std::uint8_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4Nuiv(std::uint32_t index, const std::uint32_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4Nusv(std::uint32_t index, const std::uint16_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4bv(std::uint32_t index, const std::int8_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4d(std::uint32_t index, double x, double y, double z, double w) MYGL_NOEXCEPT;
void glVertexAttrib4dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttrib4f(std::uint32_t index, float x, float y, float z, float w) MYGL_NOEXCEPT;
void glVertexAttrib4fv(std::uint32_t index, const float * v) MYGL_NOEXCEPT;
void glVertexAttrib4iv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4s(std::uint32_t index, std::int16_t x, std::int16_t y, std::int16_t z, std::int16_t w) MYGL_NOEXCEPT;
void glVertexAttrib4sv(std::uint32_t index, const std::int16_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4ubv(std::uint32_t index, const std::uint8_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4uiv(std::uint32_t index, const std::uint32_t * v) MYGL_NOEXCEPT;
void glVertexAttrib4usv(std::uint32_t index, const std::uint16_t * v) MYGL_NOEXCEPT;
void glVertexAttribBinding(std::uint32_t attribindex, std::uint32_t bindingindex) MYGL_NOEXCEPT;
void glVertexAttribDivisor(std::uint32_t index, std::uint32_t divisor) MYGL_NOEXCEPT;
void glVertexAttribFormat(std::uint32_t attribindex, std::int32_t size, gl_enum type, bool normalized, std::uint32_t relativeoffset) MYGL_NOEXCEPT;
void glVertexAttribFormatNV(std::uint32_t index, std::int32_t size, gl_enum type, bool normalized, std::int32_t stride) MYGL_NOEXCEPT;
void glVertexAttribI1i(std::uint32_t index, std::int32_t x) MYGL_NOEXCEPT;
void glVertexAttribI1iv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI1ui(std::uint32_t index, std::uint32_t x) MYGL_NOEXCEPT;
void glVertexAttribI1uiv(std::uint32_t index, const std::uint32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI2i(std::uint32_t index, std::int32_t x, std::int32_t y) MYGL_NOEXCEPT;
void glVertexAttribI2iv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI2ui(std::uint32_t index, std::uint32_t x, std::uint32_t y) MYGL_NOEXCEPT;
void glVertexAttribI2uiv(std::uint32_t index, const std::uint32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI3i(std::uint32_t index, std::int32_t x, std::int32_t y, std::int32_t z) MYGL_NOEXCEPT;
void glVertexAttribI3iv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI3ui(std::uint32_t index, std::uint32_t x, std::uint32_t y, std::uint32_t z) MYGL_NOEXCEPT;
void glVertexAttribI3uiv(std::uint32_t index, const std::uint32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI4bv(std::uint32_t index, const std::int8_t * v) MYGL_NOEXCEPT;
void glVertexAttribI4i(std::uint32_t index, std::int32_t x, std::int32_t y, std::int32_t z, std::int32_t w) MYGL_NOEXCEPT;
void glVertexAttribI4iv(std::uint32_t index, const std::int32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI4sv(std::uint32_t index, const std::int16_t * v) MYGL_NOEXCEPT;
void glVertexAttribI4ubv(std::uint32_t index, const std::uint8_t * v) MYGL_NOEXCEPT;
void glVertexAttribI4ui(std::uint32_t index, std::uint32_t x, std::uint32_t y, std::uint32_t z, std::uint32_t w) MYGL_NOEXCEPT;
void glVertexAttribI4uiv(std::uint32_t index, const std::uint32_t * v) MYGL_NOEXCEPT;
void glVertexAttribI4usv(std::uint32_t index, const std::uint16_t * v) MYGL_NOEXCEPT;
void glVertexAttribIFormat(std::uint32_t attribindex, std::int32_t size, gl_enum type, std::uint32_t relativeoffset) MYGL_NOEXCEPT;
void glVertexAttribIFormatNV(std::uint32_t index, std::int32_t size, gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glVertexAttribIPointer(std::uint32_t index, std::int32_t size, gl_enum type, std::int32_t stride, const void * pointer) MYGL_NOEXCEPT;
void glVertexAttribL1d(std::uint32_t index, double x) MYGL_NOEXCEPT;
void glVertexAttribL1dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttribL1ui64ARB(std::uint32_t index, std::uint64_t x) MYGL_NOEXCEPT;
void glVertexAttribL1ui64vARB(std::uint32_t index, const std::uint64_t * v) MYGL_NOEXCEPT;
void glVertexAttribL2d(std::uint32_t index, double x, double y) MYGL_NOEXCEPT;
void glVertexAttribL2dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttribL3d(std::uint32_t index, double x, double y, double z) MYGL_NOEXCEPT;
void glVertexAttribL3dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttribL4d(std::uint32_t index, double x, double y, double z, double w) MYGL_NOEXCEPT;
void glVertexAttribL4dv(std::uint32_t index, const double * v) MYGL_NOEXCEPT;
void glVertexAttribLFormat(std::uint32_t attribindex, std::int32_t size, gl_enum type, std::uint32_t relativeoffset) MYGL_NOEXCEPT;
void glVertexAttribLPointer(std::uint32_t index, std::int32_t size, gl_enum type, std::int32_t stride, const void * pointer) MYGL_NOEXCEPT;
void glVertexAttribP1ui(std::uint32_t index, gl_enum type, bool normalized, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexAttribP1uiv(std::uint32_t index, gl_enum type, bool normalized, const std::uint32_t * value) MYGL_NOEXCEPT;
void glVertexAttribP2ui(std::uint32_t index, gl_enum type, bool normalized, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexAttribP2uiv(std::uint32_t index, gl_enum type, bool normalized, const std::uint32_t * value) MYGL_NOEXCEPT;
void glVertexAttribP3ui(std::uint32_t index, gl_enum type, bool normalized, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexAttribP3uiv(std::uint32_t index, gl_enum type, bool normalized, const std::uint32_t * value) MYGL_NOEXCEPT;
void glVertexAttribP4ui(std::uint32_t index, gl_enum type, bool normalized, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexAttribP4uiv(std::uint32_t index, gl_enum type, bool normalized, const std::uint32_t * value) MYGL_NOEXCEPT;
void glVertexAttribPointer(std::uint32_t index, std::int32_t size, gl_enum type, bool normalized, std::int32_t stride, const void * pointer) MYGL_NOEXCEPT;
void glVertexBindingDivisor(std::uint32_t bindingindex, std::uint32_t divisor) MYGL_NOEXCEPT;
void glVertexFormatNV(std::int32_t size, gl_enum type, std::int32_t stride) MYGL_NOEXCEPT;
void glVertexP2ui(gl_enum type, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexP2uiv(gl_enum type, const std::uint32_t * value) MYGL_NOEXCEPT;
void glVertexP3ui(gl_enum type, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexP3uiv(gl_enum type, const std::uint32_t * value) MYGL_NOEXCEPT;
void glVertexP4ui(gl_enum type, std::uint32_t value) MYGL_NOEXCEPT;
void glVertexP4uiv(gl_enum type, const std::uint32_t * value) MYGL_NOEXCEPT;
void glViewport(std::int32_t x, std::int32_t y, std::int32_t width, std::int32_t height) MYGL_NOEXCEPT;
void glViewportArrayv(std::uint32_t first, std::int32_t count, const float * v) MYGL_NOEXCEPT;
void glViewportIndexedf(std::uint32_t index, float x, float y, float w, float h) MYGL_NOEXCEPT;
void glViewportIndexedfv(std::uint32_t index, const float * v) MYGL_NOEXCEPT;
void glWaitSemaphoreEXT(std::uint32_t semaphore, std::uint32_t numBufferBarriers, const mygl::buffer * buffers, std::uint32_t numTextureBarriers, const mygl::texture * textures, const gl_enum * srcLayouts) MYGL_NOEXCEPT;
void glWaitSync(mygl::sync sync, gl_bitfield flags, std::uint64_t timeout) MYGL_NOEXCEPT;
void glWeightPathsNV(mygl::path resultPath, std::int32_t numPaths, const mygl::path * paths, const float * weights) MYGL_NOEXCEPT;

namespace mygl {
using loader_function = void*(*)(const char* name);
struct dispatch {
    decltype(::glActiveShaderProgram)* activeShaderProgram = nullptr;
    decltype(::glActiveTexture)* activeTexture = nullptr;
    decltype(::glAttachShader)* attachShader = nullptr;
    decltype(::glBeginConditionalRender)* beginConditionalRender = nullptr;
    decltype(::glBeginQuery)* beginQuery = nullptr;
    decltype(::glBeginQueryIndexed)* beginQueryIndexed = nullptr;
    decltype(::glBeginTransformFeedback)* beginTransformFeedback = nullptr;
    decltype(::glBindAttribLocation)* bindAttribLocation = nullptr;
    decltype(::glBindBuffer)* bindBuffer = nullptr;
    decltype(::glBindBufferBase)* bindBufferBase = nullptr;
    decltype(::glBindBufferRange)* bindBufferRange = nullptr;
    decltype(::glBindBuffersBase)* bindBuffersBase = nullptr;
    decltype(::glBindBuffersRange)* bindBuffersRange = nullptr;
    decltype(::glBindFragDataLocation)* bindFragDataLocation = nullptr;
    decltype(::glBindFragDataLocationIndexed)* bindFragDataLocationIndexed = nullptr;
    decltype(::glBindFramebuffer)* bindFramebuffer = nullptr;
    decltype(::glBindImageTexture)* bindImageTexture = nullptr;
    decltype(::glBindImageTextures)* bindImageTextures = nullptr;
    decltype(::glBindProgramPipeline)* bindProgramPipeline = nullptr;
    decltype(::glBindRenderbuffer)* bindRenderbuffer = nullptr;
    decltype(::glBindSampler)* bindSampler = nullptr;
    decltype(::glBindSamplers)* bindSamplers = nullptr;
    decltype(::glBindTexture)* bindTexture = nullptr;
    decltype(::glBindTextureUnit)* bindTextureUnit = nullptr;
    decltype(::glBindTextures)* bindTextures = nullptr;
    decltype(::glBindTransformFeedback)* bindTransformFeedback = nullptr;
    decltype(::glBindVertexArray)* bindVertexArray = nullptr;
    decltype(::glBindVertexBuffer)* bindVertexBuffer = nullptr;
    decltype(::glBindVertexBuffers)* bindVertexBuffers = nullptr;
    decltype(::glBlendColor)* blendColor = nullptr;
    decltype(::glBlendEquation)* blendEquation = nullptr;
    decltype(::glBlendEquationSeparate)* blendEquationSeparate = nullptr;
    decltype(::glBlendEquationSeparatei)* blendEquationSeparatei = nullptr;
    decltype(::glBlendEquationSeparateiARB)* blendEquationSeparateiARB = nullptr;
    decltype(::glBlendEquationi)* blendEquationi = nullptr;
    decltype(::glBlendEquationiARB)* blendEquationiARB = nullptr;
    decltype(::glBlendFunc)* blendFunc = nullptr;
    decltype(::glBlendFuncSeparate)* blendFuncSeparate = nullptr;
    decltype(::glBlendFuncSeparatei)* blendFuncSeparatei = nullptr;
    decltype(::glBlendFuncSeparateiARB)* blendFuncSeparateiARB = nullptr;
    decltype(::glBlendFunci)* blendFunci = nullptr;
    decltype(::glBlendFunciARB)* blendFunciARB = nullptr;
    decltype(::glBlitFramebuffer)* blitFramebuffer = nullptr;
    decltype(::glBlitNamedFramebuffer)* blitNamedFramebuffer = nullptr;
    decltype(::glBufferAddressRangeNV)* bufferAddressRangeNV = nullptr;
    decltype(::glBufferData)* bufferData = nullptr;
    decltype(::glBufferStorage)* bufferStorage = nullptr;
    decltype(::glBufferStorageMemEXT)* bufferStorageMemEXT = nullptr;
    decltype(::glBufferSubData)* bufferSubData = nullptr;
    decltype(::glCallCommandListNV)* callCommandListNV = nullptr;
    decltype(::glCheckFramebufferStatus)* checkFramebufferStatus = nullptr;
    decltype(::glCheckNamedFramebufferStatus)* checkNamedFramebufferStatus = nullptr;
    decltype(::glClampColor)* clampColor = nullptr;
    decltype(::glClear)* clear = nullptr;
    decltype(::glClearBufferData)* clearBufferData = nullptr;
    decltype(::glClearBufferSubData)* clearBufferSubData = nullptr;
    decltype(::glClearBufferfi)* clearBufferfi = nullptr;
    decltype(::glClearBufferfv)* clearBufferfv = nullptr;
    decltype(::glClearBufferiv)* clearBufferiv = nullptr;
    decltype(::glClearBufferuiv)* clearBufferuiv = nullptr;
    decltype(::glClearColor)* clearColor = nullptr;
    decltype(::glClearDepth)* clearDepth = nullptr;
    decltype(::glClearDepthf)* clearDepthf = nullptr;
    decltype(::glClearNamedBufferData)* clearNamedBufferData = nullptr;
    decltype(::glClearNamedBufferSubData)* clearNamedBufferSubData = nullptr;
    decltype(::glClearNamedFramebufferfi)* clearNamedFramebufferfi = nullptr;
    decltype(::glClearNamedFramebufferfv)* clearNamedFramebufferfv = nullptr;
    decltype(::glClearNamedFramebufferiv)* clearNamedFramebufferiv = nullptr;
    decltype(::glClearNamedFramebufferuiv)* clearNamedFramebufferuiv = nullptr;
    decltype(::glClearStencil)* clearStencil = nullptr;
    decltype(::glClearTexImage)* clearTexImage = nullptr;
    decltype(::glClearTexSubImage)* clearTexSubImage = nullptr;
    decltype(::glClientWaitSync)* clientWaitSync = nullptr;
    decltype(::glClipControl)* clipControl = nullptr;
    decltype(::glColorFormatNV)* colorFormatNV = nullptr;
    decltype(::glColorMask)* colorMask = nullptr;
    decltype(::glColorMaski)* colorMaski = nullptr;
    decltype(::glColorP3ui)* colorP3ui = nullptr;
    decltype(::glColorP3uiv)* colorP3uiv = nullptr;
    decltype(::glColorP4ui)* colorP4ui = nullptr;
    decltype(::glColorP4uiv)* colorP4uiv = nullptr;
    decltype(::glCommandListSegmentsNV)* commandListSegmentsNV = nullptr;
    decltype(::glCompileCommandListNV)* compileCommandListNV = nullptr;
    decltype(::glCompileShader)* compileShader = nullptr;
    decltype(::glCompressedTexImage1D)* compressedTexImage1D = nullptr;
    decltype(::glCompressedTexImage2D)* compressedTexImage2D = nullptr;
    decltype(::glCompressedTexImage3D)* compressedTexImage3D = nullptr;
    decltype(::glCompressedTexSubImage1D)* compressedTexSubImage1D = nullptr;
    decltype(::glCompressedTexSubImage2D)* compressedTexSubImage2D = nullptr;
    decltype(::glCompressedTexSubImage3D)* compressedTexSubImage3D = nullptr;
    decltype(::glCompressedTextureSubImage1D)* compressedTextureSubImage1D = nullptr;
    decltype(::glCompressedTextureSubImage2D)* compressedTextureSubImage2D = nullptr;
    decltype(::glCompressedTextureSubImage3D)* compressedTextureSubImage3D = nullptr;
    decltype(::glCopyBufferSubData)* copyBufferSubData = nullptr;
    decltype(::glCopyImageSubData)* copyImageSubData = nullptr;
    decltype(::glCopyNamedBufferSubData)* copyNamedBufferSubData = nullptr;
    decltype(::glCopyPathNV)* copyPathNV = nullptr;
    decltype(::glCopyTexImage1D)* copyTexImage1D = nullptr;
    decltype(::glCopyTexImage2D)* copyTexImage2D = nullptr;
    decltype(::glCopyTexSubImage1D)* copyTexSubImage1D = nullptr;
    decltype(::glCopyTexSubImage2D)* copyTexSubImage2D = nullptr;
    decltype(::glCopyTexSubImage3D)* copyTexSubImage3D = nullptr;
    decltype(::glCopyTextureSubImage1D)* copyTextureSubImage1D = nullptr;
    decltype(::glCopyTextureSubImage2D)* copyTextureSubImage2D = nullptr;
    decltype(::glCopyTextureSubImage3D)* copyTextureSubImage3D = nullptr;
    decltype(::glCoverFillPathInstancedNV)* coverFillPathInstancedNV = nullptr;
    decltype(::glCoverFillPathNV)* coverFillPathNV = nullptr;
    decltype(::glCoverStrokePathInstancedNV)* coverStrokePathInstancedNV = nullptr;
    decltype(::glCoverStrokePathNV)* coverStrokePathNV = nullptr;
    decltype(::glCreateBuffers)* createBuffers = nullptr;
    decltype(::glCreateCommandListsNV)* createCommandListsNV = nullptr;
    decltype(::glCreateFramebuffers)* createFramebuffers = nullptr;
    decltype(::glCreateMemoryObjectsEXT)* createMemoryObjectsEXT = nullptr;
    decltype(::glCreateProgram)* createProgram = nullptr;
    decltype(::glCreateProgramPipelines)* createProgramPipelines = nullptr;
    decltype(::glCreateQueries)* createQueries = nullptr;
    decltype(::glCreateRenderbuffers)* createRenderbuffers = nullptr;
    decltype(::glCreateSamplers)* createSamplers = nullptr;
    decltype(::glCreateShader)* createShader = nullptr;
    decltype(::glCreateShaderProgramv)* createShaderProgramv = nullptr;
    decltype(::glCreateStatesNV)* createStatesNV = nullptr;
    decltype(::glCreateTextures)* createTextures = nullptr;
    decltype(::glCreateTransformFeedbacks)* createTransformFeedbacks = nullptr;
    decltype(::glCreateVertexArrays)* createVertexArrays = nullptr;
    decltype(::glCullFace)* cullFace = nullptr;
    decltype(::glDebugMessageCallback)* debugMessageCallback = nullptr;
    decltype(::glDebugMessageCallbackKHR)* debugMessageCallbackKHR = nullptr;
    decltype(::glDebugMessageControl)* debugMessageControl = nullptr;
    decltype(::glDebugMessageControlKHR)* debugMessageControlKHR = nullptr;
    decltype(::glDebugMessageInsert)* debugMessageInsert = nullptr;
    decltype(::glDebugMessageInsertKHR)* debugMessageInsertKHR = nullptr;
    decltype(::glDeleteBuffers)* deleteBuffers = nullptr;
    decltype(::glDeleteCommandListsNV)* deleteCommandListsNV = nullptr;
    decltype(::glDeleteFramebuffers)* deleteFramebuffers = nullptr;
    decltype(::glDeleteMemoryObjectsEXT)* deleteMemoryObjectsEXT = nullptr;
    decltype(::glDeletePathsNV)* deletePathsNV = nullptr;
    decltype(::glDeleteProgram)* deleteProgram = nullptr;
    decltype(::glDeleteProgramPipelines)* deleteProgramPipelines = nullptr;
    decltype(::glDeleteQueries)* deleteQueries = nullptr;
    decltype(::glDeleteRenderbuffers)* deleteRenderbuffers = nullptr;
    decltype(::glDeleteSamplers)* deleteSamplers = nullptr;
    decltype(::glDeleteSemaphoresEXT)* deleteSemaphoresEXT = nullptr;
    decltype(::glDeleteShader)* deleteShader = nullptr;
    decltype(::glDeleteStatesNV)* deleteStatesNV = nullptr;
    decltype(::glDeleteSync)* deleteSync = nullptr;
    decltype(::glDeleteTextures)* deleteTextures = nullptr;
    decltype(::glDeleteTransformFeedbacks)* deleteTransformFeedbacks = nullptr;
    decltype(::glDeleteVertexArrays)* deleteVertexArrays = nullptr;
    decltype(::glDepthBoundsEXT)* depthBoundsEXT = nullptr;
    decltype(::glDepthFunc)* depthFunc = nullptr;
    decltype(::glDepthMask)* depthMask = nullptr;
    decltype(::glDepthRange)* depthRange = nullptr;
    decltype(::glDepthRangeArrayv)* depthRangeArrayv = nullptr;
    decltype(::glDepthRangeIndexed)* depthRangeIndexed = nullptr;
    decltype(::glDepthRangef)* depthRangef = nullptr;
    decltype(::glDetachShader)* detachShader = nullptr;
    decltype(::glDisable)* disable = nullptr;
    decltype(::glDisableClientState)* disableClientState = nullptr;
    decltype(::glDisableVertexArrayAttrib)* disableVertexArrayAttrib = nullptr;
    decltype(::glDisableVertexAttribArray)* disableVertexAttribArray = nullptr;
    decltype(::glDisablei)* disablei = nullptr;
    decltype(::glDispatchCompute)* dispatchCompute = nullptr;
    decltype(::glDispatchComputeGroupSizeARB)* dispatchComputeGroupSizeARB = nullptr;
    decltype(::glDispatchComputeIndirect)* dispatchComputeIndirect = nullptr;
    decltype(::glDrawArrays)* drawArrays = nullptr;
    decltype(::glDrawArraysIndirect)* drawArraysIndirect = nullptr;
    decltype(::glDrawArraysInstanced)* drawArraysInstanced = nullptr;
    decltype(::glDrawArraysInstancedBaseInstance)* drawArraysInstancedBaseInstance = nullptr;
    decltype(::glDrawBuffer)* drawBuffer = nullptr;
    decltype(::glDrawBuffers)* drawBuffers = nullptr;
    decltype(::glDrawCommandsAddressNV)* drawCommandsAddressNV = nullptr;
    decltype(::glDrawCommandsNV)* drawCommandsNV = nullptr;
    decltype(::glDrawCommandsStatesAddressNV)* drawCommandsStatesAddressNV = nullptr;
    decltype(::glDrawCommandsStatesNV)* drawCommandsStatesNV = nullptr;
    decltype(::glDrawElements)* drawElements = nullptr;
    decltype(::glDrawElementsBaseVertex)* drawElementsBaseVertex = nullptr;
    decltype(::glDrawElementsIndirect)* drawElementsIndirect = nullptr;
    decltype(::glDrawElementsInstanced)* drawElementsInstanced = nullptr;
    decltype(::glDrawElementsInstancedBaseInstance)* drawElementsInstancedBaseInstance = nullptr;
    decltype(::glDrawElementsInstancedBaseVertex)* drawElementsInstancedBaseVertex = nullptr;
    decltype(::glDrawElementsInstancedBaseVertexBaseInstance)* drawElementsInstancedBaseVertexBaseInstance = nullptr;
    decltype(::glDrawRangeElements)* drawRangeElements = nullptr;
    decltype(::glDrawRangeElementsBaseVertex)* drawRangeElementsBaseVertex = nullptr;
    decltype(::glDrawTextureNV)* drawTextureNV = nullptr;
    decltype(::glDrawTransformFeedback)* drawTransformFeedback = nullptr;
    decltype(::glDrawTransformFeedbackInstanced)* drawTransformFeedbackInstanced = nullptr;
    decltype(::glDrawTransformFeedbackStream)* drawTransformFeedbackStream = nullptr;
    decltype(::glDrawTransformFeedbackStreamInstanced)* drawTransformFeedbackStreamInstanced = nullptr;
    decltype(::glEdgeFlagFormatNV)* edgeFlagFormatNV = nullptr;
    decltype(::glEnable)* enable = nullptr;
    decltype(::glEnableClientState)* enableClientState = nullptr;
    decltype(::glEnableVertexArrayAttrib)* enableVertexArrayAttrib = nullptr;
    decltype(::glEnableVertexAttribArray)* enableVertexAttribArray = nullptr;
    decltype(::glEnablei)* enablei = nullptr;
    decltype(::glEndConditionalRender)* endConditionalRender = nullptr;
    decltype(::glEndQuery)* endQuery = nullptr;
    decltype(::glEndQueryIndexed)* endQueryIndexed = nullptr;
    decltype(::glEndTransformFeedback)* endTransformFeedback = nullptr;
    decltype(::glFenceSync)* fenceSync = nullptr;
    decltype(::glFinish)* finish = nullptr;
    decltype(::glFlush)* flush = nullptr;
    decltype(::glFlushMappedBufferRange)* flushMappedBufferRange = nullptr;
    decltype(::glFlushMappedNamedBufferRange)* flushMappedNamedBufferRange = nullptr;
    decltype(::glFogCoordFormatNV)* fogCoordFormatNV = nullptr;
    decltype(::glFramebufferParameteri)* framebufferParameteri = nullptr;
    decltype(::glFramebufferRenderbuffer)* framebufferRenderbuffer = nullptr;
    decltype(::glFramebufferTexture)* framebufferTexture = nullptr;
    decltype(::glFramebufferTexture1D)* framebufferTexture1D = nullptr;
    decltype(::glFramebufferTexture2D)* framebufferTexture2D = nullptr;
    decltype(::glFramebufferTexture3D)* framebufferTexture3D = nullptr;
    decltype(::glFramebufferTextureLayer)* framebufferTextureLayer = nullptr;
    decltype(::glFrontFace)* frontFace = nullptr;
    decltype(::glGenBuffers)* genBuffers = nullptr;
    decltype(::glGenFramebuffers)* genFramebuffers = nullptr;
    decltype(::glGenPathsNV)* genPathsNV = nullptr;
    decltype(::glGenProgramPipelines)* genProgramPipelines = nullptr;
    decltype(::glGenQueries)* genQueries = nullptr;
    decltype(::glGenRenderbuffers)* genRenderbuffers = nullptr;
    decltype(::glGenSamplers)* genSamplers = nullptr;
    decltype(::glGenSemaphoresEXT)* genSemaphoresEXT = nullptr;
    decltype(::glGenTextures)* genTextures = nullptr;
    decltype(::glGenTransformFeedbacks)* genTransformFeedbacks = nullptr;
    decltype(::glGenVertexArrays)* genVertexArrays = nullptr;
    decltype(::glGenerateMipmap)* generateMipmap = nullptr;
    decltype(::glGenerateTextureMipmap)* generateTextureMipmap = nullptr;
    decltype(::glGetActiveAtomicCounterBufferiv)* getActiveAtomicCounterBufferiv = nullptr;
    decltype(::glGetActiveAttrib)* getActiveAttrib = nullptr;
    decltype(::glGetActiveSubroutineName)* getActiveSubroutineName = nullptr;
    decltype(::glGetActiveSubroutineUniformName)* getActiveSubroutineUniformName = nullptr;
    decltype(::glGetActiveSubroutineUniformiv)* getActiveSubroutineUniformiv = nullptr;
    decltype(::glGetActiveUniform)* getActiveUniform = nullptr;
    decltype(::glGetActiveUniformBlockName)* getActiveUniformBlockName = nullptr;
    decltype(::glGetActiveUniformBlockiv)* getActiveUniformBlockiv = nullptr;
    decltype(::glGetActiveUniformName)* getActiveUniformName = nullptr;
    decltype(::glGetActiveUniformsiv)* getActiveUniformsiv = nullptr;
    decltype(::glGetAttachedShaders)* getAttachedShaders = nullptr;
    decltype(::glGetAttribLocation)* getAttribLocation = nullptr;
    decltype(::glGetBooleani_v)* getBooleani_v = nullptr;
    decltype(::glGetBooleanv)* getBooleanv = nullptr;
    decltype(::glGetBufferParameteri64v)* getBufferParameteri64v = nullptr;
    decltype(::glGetBufferParameteriv)* getBufferParameteriv = nullptr;
    decltype(::glGetBufferParameterui64vNV)* getBufferParameterui64vNV = nullptr;
    decltype(::glGetBufferPointerv)* getBufferPointerv = nullptr;
    decltype(::glGetBufferSubData)* getBufferSubData = nullptr;
    decltype(::glGetCommandHeaderNV)* getCommandHeaderNV = nullptr;
    decltype(::glGetCompressedTexImage)* getCompressedTexImage = nullptr;
    decltype(::glGetCompressedTextureImage)* getCompressedTextureImage = nullptr;
    decltype(::glGetCompressedTextureSubImage)* getCompressedTextureSubImage = nullptr;
    decltype(::glGetDebugMessageLog)* getDebugMessageLog = nullptr;
    decltype(::glGetDebugMessageLogKHR)* getDebugMessageLogKHR = nullptr;
    decltype(::glGetDoublei_v)* getDoublei_v = nullptr;
    decltype(::glGetDoublev)* getDoublev = nullptr;
    decltype(::glGetError)* getError = nullptr;
    decltype(::glGetFloati_v)* getFloati_v = nullptr;
    decltype(::glGetFloatv)* getFloatv = nullptr;
    decltype(::glGetFragDataIndex)* getFragDataIndex = nullptr;
    decltype(::glGetFragDataLocation)* getFragDataLocation = nullptr;
    decltype(::glGetFramebufferAttachmentParameteriv)* getFramebufferAttachmentParameteriv = nullptr;
    decltype(::glGetFramebufferParameteriv)* getFramebufferParameteriv = nullptr;
    decltype(::glGetGraphicsResetStatus)* getGraphicsResetStatus = nullptr;
    decltype(::glGetImageHandleARB)* getImageHandleARB = nullptr;
    decltype(::glGetInteger64i_v)* getInteger64i_v = nullptr;
    decltype(::glGetInteger64v)* getInteger64v = nullptr;
    decltype(::glGetIntegeri_v)* getIntegeri_v = nullptr;
    decltype(::glGetIntegerui64i_vNV)* getIntegerui64i_vNV = nullptr;
    decltype(::glGetIntegerui64vNV)* getIntegerui64vNV = nullptr;
    decltype(::glGetIntegerv)* getIntegerv = nullptr;
    decltype(::glGetInternalformati64v)* getInternalformati64v = nullptr;
    decltype(::glGetInternalformativ)* getInternalformativ = nullptr;
    decltype(::glGetMemoryObjectParameterivEXT)* getMemoryObjectParameterivEXT = nullptr;
    decltype(::glGetMultisamplefv)* getMultisamplefv = nullptr;
    decltype(::glGetNamedBufferParameteri64v)* getNamedBufferParameteri64v = nullptr;
    decltype(::glGetNamedBufferParameteriv)* getNamedBufferParameteriv = nullptr;
    decltype(::glGetNamedBufferParameterui64vNV)* getNamedBufferParameterui64vNV = nullptr;
    decltype(::glGetNamedBufferPointerv)* getNamedBufferPointerv = nullptr;
    decltype(::glGetNamedBufferSubData)* getNamedBufferSubData = nullptr;
    decltype(::glGetNamedFramebufferAttachmentParameteriv)* getNamedFramebufferAttachmentParameteriv = nullptr;
    decltype(::glGetNamedFramebufferParameteriv)* getNamedFramebufferParameteriv = nullptr;
    decltype(::glGetNamedRenderbufferParameteriv)* getNamedRenderbufferParameteriv = nullptr;
    decltype(::glGetObjectLabel)* getObjectLabel = nullptr;
    decltype(::glGetObjectLabelKHR)* getObjectLabelKHR = nullptr;
    decltype(::glGetObjectPtrLabel)* getObjectPtrLabel = nullptr;
    decltype(::glGetObjectPtrLabelKHR)* getObjectPtrLabelKHR = nullptr;
    decltype(::glGetPathColorGenfvNV)* getPathColorGenfvNV = nullptr;
    decltype(::glGetPathColorGenivNV)* getPathColorGenivNV = nullptr;
    decltype(::glGetPathCommandsNV)* getPathCommandsNV = nullptr;
    decltype(::glGetPathCoordsNV)* getPathCoordsNV = nullptr;
    decltype(::glGetPathDashArrayNV)* getPathDashArrayNV = nullptr;
    decltype(::glGetPathLengthNV)* getPathLengthNV = nullptr;
    decltype(::glGetPathMetricRangeNV)* getPathMetricRangeNV = nullptr;
    decltype(::glGetPathMetricsNV)* getPathMetricsNV = nullptr;
    decltype(::glGetPathParameterfvNV)* getPathParameterfvNV = nullptr;
    decltype(::glGetPathParameterivNV)* getPathParameterivNV = nullptr;
    decltype(::glGetPathSpacingNV)* getPathSpacingNV = nullptr;
    decltype(::glGetPathTexGenfvNV)* getPathTexGenfvNV = nullptr;
    decltype(::glGetPathTexGenivNV)* getPathTexGenivNV = nullptr;
    decltype(::glGetPointerv)* getPointerv = nullptr;
    decltype(::glGetPointervKHR)* getPointervKHR = nullptr;
    decltype(::glGetProgramBinary)* getProgramBinary = nullptr;
    decltype(::glGetProgramInfoLog)* getProgramInfoLog = nullptr;
    decltype(::glGetProgramInterfaceiv)* getProgramInterfaceiv = nullptr;
    decltype(::glGetProgramPipelineInfoLog)* getProgramPipelineInfoLog = nullptr;
    decltype(::glGetProgramPipelineiv)* getProgramPipelineiv = nullptr;
    decltype(::glGetProgramResourceIndex)* getProgramResourceIndex = nullptr;
    decltype(::glGetProgramResourceLocation)* getProgramResourceLocation = nullptr;
    decltype(::glGetProgramResourceLocationIndex)* getProgramResourceLocationIndex = nullptr;
    decltype(::glGetProgramResourceName)* getProgramResourceName = nullptr;
    decltype(::glGetProgramResourcefvNV)* getProgramResourcefvNV = nullptr;
    decltype(::glGetProgramResourceiv)* getProgramResourceiv = nullptr;
    decltype(::glGetProgramStageiv)* getProgramStageiv = nullptr;
    decltype(::glGetProgramSubroutineParameteruivNV)* getProgramSubroutineParameteruivNV = nullptr;
    decltype(::glGetProgramiv)* getProgramiv = nullptr;
    decltype(::glGetQueryBufferObjecti64v)* getQueryBufferObjecti64v = nullptr;
    decltype(::glGetQueryBufferObjectiv)* getQueryBufferObjectiv = nullptr;
    decltype(::glGetQueryBufferObjectui64v)* getQueryBufferObjectui64v = nullptr;
    decltype(::glGetQueryBufferObjectuiv)* getQueryBufferObjectuiv = nullptr;
    decltype(::glGetQueryIndexediv)* getQueryIndexediv = nullptr;
    decltype(::glGetQueryObjecti64v)* getQueryObjecti64v = nullptr;
    decltype(::glGetQueryObjectiv)* getQueryObjectiv = nullptr;
    decltype(::glGetQueryObjectui64v)* getQueryObjectui64v = nullptr;
    decltype(::glGetQueryObjectuiv)* getQueryObjectuiv = nullptr;
    decltype(::glGetQueryiv)* getQueryiv = nullptr;
    decltype(::glGetRenderbufferParameteriv)* getRenderbufferParameteriv = nullptr;
    decltype(::glGetSamplerParameterIiv)* getSamplerParameterIiv = nullptr;
    decltype(::glGetSamplerParameterIuiv)* getSamplerParameterIuiv = nullptr;
    decltype(::glGetSamplerParameterfv)* getSamplerParameterfv = nullptr;
    decltype(::glGetSamplerParameteriv)* getSamplerParameteriv = nullptr;
    decltype(::glGetSemaphoreParameterui64vEXT)* getSemaphoreParameterui64vEXT = nullptr;
    decltype(::glGetShaderInfoLog)* getShaderInfoLog = nullptr;
    decltype(::glGetShaderPrecisionFormat)* getShaderPrecisionFormat = nullptr;
    decltype(::glGetShaderSource)* getShaderSource = nullptr;
    decltype(::glGetShaderiv)* getShaderiv = nullptr;
    decltype(::glGetStageIndexNV)* getStageIndexNV = nullptr;
    decltype(::glGetString)* getString = nullptr;
    decltype(::glGetStringi)* getStringi = nullptr;
    decltype(::glGetSubroutineIndex)* getSubroutineIndex = nullptr;
    decltype(::glGetSubroutineUniformLocation)* getSubroutineUniformLocation = nullptr;
    decltype(::glGetSynciv)* getSynciv = nullptr;
    decltype(::glGetTexImage)* getTexImage = nullptr;
    decltype(::glGetTexLevelParameterfv)* getTexLevelParameterfv = nullptr;
    decltype(::glGetTexLevelParameteriv)* getTexLevelParameteriv = nullptr;
    decltype(::glGetTexParameterIiv)* getTexParameterIiv = nullptr;
    decltype(::glGetTexParameterIuiv)* getTexParameterIuiv = nullptr;
    decltype(::glGetTexParameterfv)* getTexParameterfv = nullptr;
    decltype(::glGetTexParameteriv)* getTexParameteriv = nullptr;
    decltype(::glGetTextureHandleARB)* getTextureHandleARB = nullptr;
    decltype(::glGetTextureImage)* getTextureImage = nullptr;
    decltype(::glGetTextureLevelParameterfv)* getTextureLevelParameterfv = nullptr;
    decltype(::glGetTextureLevelParameteriv)* getTextureLevelParameteriv = nullptr;
    decltype(::glGetTextureParameterIiv)* getTextureParameterIiv = nullptr;
    decltype(::glGetTextureParameterIuiv)* getTextureParameterIuiv = nullptr;
    decltype(::glGetTextureParameterfv)* getTextureParameterfv = nullptr;
    decltype(::glGetTextureParameteriv)* getTextureParameteriv = nullptr;
    decltype(::glGetTextureSamplerHandleARB)* getTextureSamplerHandleARB = nullptr;
    decltype(::glGetTextureSubImage)* getTextureSubImage = nullptr;
    decltype(::glGetTransformFeedbackVarying)* getTransformFeedbackVarying = nullptr;
    decltype(::glGetTransformFeedbacki64_v)* getTransformFeedbacki64_v = nullptr;
    decltype(::glGetTransformFeedbacki_v)* getTransformFeedbacki_v = nullptr;
    decltype(::glGetTransformFeedbackiv)* getTransformFeedbackiv = nullptr;
    decltype(::glGetUniformBlockIndex)* getUniformBlockIndex = nullptr;
    decltype(::glGetUniformIndices)* getUniformIndices = nullptr;
    decltype(::glGetUniformLocation)* getUniformLocation = nullptr;
    decltype(::glGetUniformSubroutineuiv)* getUniformSubroutineuiv = nullptr;
    decltype(::glGetUniformdv)* getUniformdv = nullptr;
    decltype(::glGetUniformfv)* getUniformfv = nullptr;
    decltype(::glGetUniformi64vARB)* getUniformi64vARB = nullptr;
    decltype(::glGetUniformi64vNV)* getUniformi64vNV = nullptr;
    decltype(::glGetUniformiv)* getUniformiv = nullptr;
    decltype(::glGetUniformui64vARB)* getUniformui64vARB = nullptr;
    decltype(::glGetUniformui64vNV)* getUniformui64vNV = nullptr;
    decltype(::glGetUniformuiv)* getUniformuiv = nullptr;
    decltype(::glGetUnsignedBytevEXT)* getUnsignedBytevEXT = nullptr;
    decltype(::glGetUnsignedBytei_vEXT)* getUnsignedBytei_vEXT = nullptr;
    decltype(::glGetVertexArrayIndexed64iv)* getVertexArrayIndexed64iv = nullptr;
    decltype(::glGetVertexArrayIndexediv)* getVertexArrayIndexediv = nullptr;
    decltype(::glGetVertexArrayiv)* getVertexArrayiv = nullptr;
    decltype(::glGetVertexAttribIiv)* getVertexAttribIiv = nullptr;
    decltype(::glGetVertexAttribIuiv)* getVertexAttribIuiv = nullptr;
    decltype(::glGetVertexAttribLdv)* getVertexAttribLdv = nullptr;
    decltype(::glGetVertexAttribLui64vARB)* getVertexAttribLui64vARB = nullptr;
    decltype(::glGetVertexAttribPointerv)* getVertexAttribPointerv = nullptr;
    decltype(::glGetVertexAttribdv)* getVertexAttribdv = nullptr;
    decltype(::glGetVertexAttribfv)* getVertexAttribfv = nullptr;
    decltype(::glGetVertexAttribiv)* getVertexAttribiv = nullptr;
    decltype(::glGetnCompressedTexImage)* getnCompressedTexImage = nullptr;
    decltype(::glGetnTexImage)* getnTexImage = nullptr;
    decltype(::glGetnUniformdv)* getnUniformdv = nullptr;
    decltype(::glGetnUniformfv)* getnUniformfv = nullptr;
    decltype(::glGetnUniformi64vARB)* getnUniformi64vARB = nullptr;
    decltype(::glGetnUniformiv)* getnUniformiv = nullptr;
    decltype(::glGetnUniformui64vARB)* getnUniformui64vARB = nullptr;
    decltype(::glGetnUniformuiv)* getnUniformuiv = nullptr;
    decltype(::glHint)* hint = nullptr;
    decltype(::glImportMemoryFdEXT)* importMemoryFdEXT = nullptr;
    decltype(::glImportMemoryWin32HandleEXT)* importMemoryWin32HandleEXT = nullptr;
    decltype(::glImportMemoryWin32NameEXT)* importMemoryWin32NameEXT = nullptr;
    decltype(::glImportSemaphoreFdEXT)* importSemaphoreFdEXT = nullptr;
    decltype(::glImportSemaphoreWin32HandleEXT)* importSemaphoreWin32HandleEXT = nullptr;
    decltype(::glImportSemaphoreWin32NameEXT)* importSemaphoreWin32NameEXT = nullptr;
    decltype(::glIndexFormatNV)* indexFormatNV = nullptr;
    decltype(::glInterpolatePathsNV)* interpolatePathsNV = nullptr;
    decltype(::glInvalidateBufferData)* invalidateBufferData = nullptr;
    decltype(::glInvalidateBufferSubData)* invalidateBufferSubData = nullptr;
    decltype(::glInvalidateFramebuffer)* invalidateFramebuffer = nullptr;
    decltype(::glInvalidateNamedFramebufferData)* invalidateNamedFramebufferData = nullptr;
    decltype(::glInvalidateNamedFramebufferSubData)* invalidateNamedFramebufferSubData = nullptr;
    decltype(::glInvalidateSubFramebuffer)* invalidateSubFramebuffer = nullptr;
    decltype(::glInvalidateTexImage)* invalidateTexImage = nullptr;
    decltype(::glInvalidateTexSubImage)* invalidateTexSubImage = nullptr;
    decltype(::glIsBuffer)* isBuffer = nullptr;
    decltype(::glIsBufferResidentNV)* isBufferResidentNV = nullptr;
    decltype(::glIsCommandListNV)* isCommandListNV = nullptr;
    decltype(::glIsEnabled)* isEnabled = nullptr;
    decltype(::glIsEnabledi)* isEnabledi = nullptr;
    decltype(::glIsFramebuffer)* isFramebuffer = nullptr;
    decltype(::glIsImageHandleResidentARB)* isImageHandleResidentARB = nullptr;
    decltype(::glIsMemoryObjectEXT)* isMemoryObjectEXT = nullptr;
    decltype(::glIsNamedBufferResidentNV)* isNamedBufferResidentNV = nullptr;
    decltype(::glIsPathNV)* isPathNV = nullptr;
    decltype(::glIsPointInFillPathNV)* isPointInFillPathNV = nullptr;
    decltype(::glIsPointInStrokePathNV)* isPointInStrokePathNV = nullptr;
    decltype(::glIsProgram)* isProgram = nullptr;
    decltype(::glIsProgramPipeline)* isProgramPipeline = nullptr;
    decltype(::glIsQuery)* isQuery = nullptr;
    decltype(::glIsRenderbuffer)* isRenderbuffer = nullptr;
    decltype(::glIsSemaphoreEXT)* isSemaphoreEXT = nullptr;
    decltype(::glIsSampler)* isSampler = nullptr;
    decltype(::glIsShader)* isShader = nullptr;
    decltype(::glIsStateNV)* isStateNV = nullptr;
    decltype(::glIsSync)* isSync = nullptr;
    decltype(::glIsTexture)* isTexture = nullptr;
    decltype(::glIsTextureHandleResidentARB)* isTextureHandleResidentARB = nullptr;
    decltype(::glIsTransformFeedback)* isTransformFeedback = nullptr;
    decltype(::glIsVertexArray)* isVertexArray = nullptr;
    decltype(::glLineWidth)* lineWidth = nullptr;
    decltype(::glLinkProgram)* linkProgram = nullptr;
    decltype(::glListDrawCommandsStatesClientNV)* listDrawCommandsStatesClientNV = nullptr;
    decltype(::glLogicOp)* logicOp = nullptr;
    decltype(::glMakeBufferNonResidentNV)* makeBufferNonResidentNV = nullptr;
    decltype(::glMakeBufferResidentNV)* makeBufferResidentNV = nullptr;
    decltype(::glMakeImageHandleNonResidentARB)* makeImageHandleNonResidentARB = nullptr;
    decltype(::glMakeImageHandleResidentARB)* makeImageHandleResidentARB = nullptr;
    decltype(::glMakeNamedBufferNonResidentNV)* makeNamedBufferNonResidentNV = nullptr;
    decltype(::glMakeNamedBufferResidentNV)* makeNamedBufferResidentNV = nullptr;
    decltype(::glMakeTextureHandleNonResidentARB)* makeTextureHandleNonResidentARB = nullptr;
    decltype(::glMakeTextureHandleResidentARB)* makeTextureHandleResidentARB = nullptr;
    decltype(::glMapBuffer)* mapBuffer = nullptr;
    decltype(::glMapBufferRange)* mapBufferRange = nullptr;
    decltype(::glMapNamedBuffer)* mapNamedBuffer = nullptr;
    decltype(::glMapNamedBufferRange)* mapNamedBufferRange = nullptr;
    decltype(::glMatrixFrustumEXT)* matrixFrustumEXT = nullptr;
    decltype(::glMatrixLoad3x2fNV)* matrixLoad3x2fNV = nullptr;
    decltype(::glMatrixLoad3x3fNV)* matrixLoad3x3fNV = nullptr;
    decltype(::glMatrixLoadIdentityEXT)* matrixLoadIdentityEXT = nullptr;
    decltype(::glMatrixLoadTranspose3x3fNV)* matrixLoadTranspose3x3fNV = nullptr;
    decltype(::glMatrixLoadTransposedEXT)* matrixLoadTransposedEXT = nullptr;
    decltype(::glMatrixLoadTransposefEXT)* matrixLoadTransposefEXT = nullptr;
    decltype(::glMatrixLoaddEXT)* matrixLoaddEXT = nullptr;
    decltype(::glMatrixLoadfEXT)* matrixLoadfEXT = nullptr;
    decltype(::glMatrixMult3x2fNV)* matrixMult3x2fNV = nullptr;
    decltype(::glMatrixMult3x3fNV)* matrixMult3x3fNV = nullptr;
    decltype(::glMatrixMultTranspose3x3fNV)* matrixMultTranspose3x3fNV = nullptr;
    decltype(::glMatrixMultTransposedEXT)* matrixMultTransposedEXT = nullptr;
    decltype(::glMatrixMultTransposefEXT)* matrixMultTransposefEXT = nullptr;
    decltype(::glMatrixMultdEXT)* matrixMultdEXT = nullptr;
    decltype(::glMatrixMultfEXT)* matrixMultfEXT = nullptr;
    decltype(::glMatrixOrthoEXT)* matrixOrthoEXT = nullptr;
    decltype(::glMatrixPopEXT)* matrixPopEXT = nullptr;
    decltype(::glMatrixPushEXT)* matrixPushEXT = nullptr;
    decltype(::glMatrixRotatedEXT)* matrixRotatedEXT = nullptr;
    decltype(::glMatrixRotatefEXT)* matrixRotatefEXT = nullptr;
    decltype(::glMatrixScaledEXT)* matrixScaledEXT = nullptr;
    decltype(::glMatrixScalefEXT)* matrixScalefEXT = nullptr;
    decltype(::glMatrixTranslatedEXT)* matrixTranslatedEXT = nullptr;
    decltype(::glMatrixTranslatefEXT)* matrixTranslatefEXT = nullptr;
    decltype(::glMemoryBarrier)* memoryBarrier = nullptr;
    decltype(::glMemoryBarrierByRegion)* memoryBarrierByRegion = nullptr;
    decltype(::glMemoryObjectParameterivEXT)* memoryObjectParameterivEXT = nullptr;
    decltype(::glMinSampleShading)* minSampleShading = nullptr;
    decltype(::glMultiDrawArrays)* multiDrawArrays = nullptr;
    decltype(::glMultiDrawArraysIndirect)* multiDrawArraysIndirect = nullptr;
    decltype(::glMultiDrawArraysIndirectBindlessCountNV)* multiDrawArraysIndirectBindlessCountNV = nullptr;
    decltype(::glMultiDrawArraysIndirectBindlessNV)* multiDrawArraysIndirectBindlessNV = nullptr;
    decltype(::glMultiDrawArraysIndirectCount)* multiDrawArraysIndirectCount = nullptr;
    decltype(::glMultiDrawElements)* multiDrawElements = nullptr;
    decltype(::glMultiDrawElementsBaseVertex)* multiDrawElementsBaseVertex = nullptr;
    decltype(::glMultiDrawElementsIndirect)* multiDrawElementsIndirect = nullptr;
    decltype(::glMultiDrawElementsIndirectBindlessCountNV)* multiDrawElementsIndirectBindlessCountNV = nullptr;
    decltype(::glMultiDrawElementsIndirectBindlessNV)* multiDrawElementsIndirectBindlessNV = nullptr;
    decltype(::glMultiDrawElementsIndirectCount)* multiDrawElementsIndirectCount = nullptr;
    decltype(::glMultiTexCoordP1ui)* multiTexCoordP1ui = nullptr;
    decltype(::glMultiTexCoordP1uiv)* multiTexCoordP1uiv = nullptr;
    decltype(::glMultiTexCoordP2ui)* multiTexCoordP2ui = nullptr;
    decltype(::glMultiTexCoordP2uiv)* multiTexCoordP2uiv = nullptr;
    decltype(::glMultiTexCoordP3ui)* multiTexCoordP3ui = nullptr;
    decltype(::glMultiTexCoordP3uiv)* multiTexCoordP3uiv = nullptr;
    decltype(::glMultiTexCoordP4ui)* multiTexCoordP4ui = nullptr;
    decltype(::glMultiTexCoordP4uiv)* multiTexCoordP4uiv = nullptr;
    decltype(::glNamedBufferData)* namedBufferData = nullptr;
    decltype(::glNamedBufferStorage)* namedBufferStorage = nullptr;
    decltype(::glNamedBufferStorageMemEXT)* namedBufferStorageMemEXT = nullptr;
    decltype(::glNamedBufferSubData)* namedBufferSubData = nullptr;
    decltype(::glNamedFramebufferDrawBuffer)* namedFramebufferDrawBuffer = nullptr;
    decltype(::glNamedFramebufferDrawBuffers)* namedFramebufferDrawBuffers = nullptr;
    decltype(::glNamedFramebufferParameteri)* namedFramebufferParameteri = nullptr;
    decltype(::glNamedFramebufferReadBuffer)* namedFramebufferReadBuffer = nullptr;
    decltype(::glNamedFramebufferRenderbuffer)* namedFramebufferRenderbuffer = nullptr;
    decltype(::glNamedFramebufferTexture)* namedFramebufferTexture = nullptr;
    decltype(::glNamedFramebufferTextureLayer)* namedFramebufferTextureLayer = nullptr;
    decltype(::glNamedRenderbufferStorage)* namedRenderbufferStorage = nullptr;
    decltype(::glNamedRenderbufferStorageMultisample)* namedRenderbufferStorageMultisample = nullptr;
    decltype(::glNormalFormatNV)* normalFormatNV = nullptr;
    decltype(::glNormalP3ui)* normalP3ui = nullptr;
    decltype(::glNormalP3uiv)* normalP3uiv = nullptr;
    decltype(::glObjectLabel)* objectLabel = nullptr;
    decltype(::glObjectLabelKHR)* objectLabelKHR = nullptr;
    decltype(::glObjectPtrLabel)* objectPtrLabel = nullptr;
    decltype(::glObjectPtrLabelKHR)* objectPtrLabelKHR = nullptr;
    decltype(::glPatchParameterfv)* patchParameterfv = nullptr;
    decltype(::glPatchParameteri)* patchParameteri = nullptr;
    decltype(::glPathColorGenNV)* pathColorGenNV = nullptr;
    decltype(::glPathCommandsNV)* pathCommandsNV = nullptr;
    decltype(::glPathCoordsNV)* pathCoordsNV = nullptr;
    decltype(::glPathCoverDepthFuncNV)* pathCoverDepthFuncNV = nullptr;
    decltype(::glPathDashArrayNV)* pathDashArrayNV = nullptr;
    decltype(::glPathFogGenNV)* pathFogGenNV = nullptr;
    decltype(::glPathGlyphIndexArrayNV)* pathGlyphIndexArrayNV = nullptr;
    decltype(::glPathGlyphIndexRangeNV)* pathGlyphIndexRangeNV = nullptr;
    decltype(::glPathGlyphRangeNV)* pathGlyphRangeNV = nullptr;
    decltype(::glPathGlyphsNV)* pathGlyphsNV = nullptr;
    decltype(::glPathMemoryGlyphIndexArrayNV)* pathMemoryGlyphIndexArrayNV = nullptr;
    decltype(::glPathParameterfNV)* pathParameterfNV = nullptr;
    decltype(::glPathParameterfvNV)* pathParameterfvNV = nullptr;
    decltype(::glPathParameteriNV)* pathParameteriNV = nullptr;
    decltype(::glPathParameterivNV)* pathParameterivNV = nullptr;
    decltype(::glPathStencilDepthOffsetNV)* pathStencilDepthOffsetNV = nullptr;
    decltype(::glPathStencilFuncNV)* pathStencilFuncNV = nullptr;
    decltype(::glPathStringNV)* pathStringNV = nullptr;
    decltype(::glPathSubCommandsNV)* pathSubCommandsNV = nullptr;
    decltype(::glPathSubCoordsNV)* pathSubCoordsNV = nullptr;
    decltype(::glPathTexGenNV)* pathTexGenNV = nullptr;
    decltype(::glPauseTransformFeedback)* pauseTransformFeedback = nullptr;
    decltype(::glPixelStoref)* pixelStoref = nullptr;
    decltype(::glPixelStorei)* pixelStorei = nullptr;
    decltype(::glPointAlongPathNV)* pointAlongPathNV = nullptr;
    decltype(::glPointParameterf)* pointParameterf = nullptr;
    decltype(::glPointParameterfv)* pointParameterfv = nullptr;
    decltype(::glPointParameteri)* pointParameteri = nullptr;
    decltype(::glPointParameteriv)* pointParameteriv = nullptr;
    decltype(::glPointSize)* pointSize = nullptr;
    decltype(::glPolygonMode)* polygonMode = nullptr;
    decltype(::glPolygonOffset)* polygonOffset = nullptr;
    decltype(::glPolygonOffsetClamp)* polygonOffsetClamp = nullptr;
    decltype(::glPolygonOffsetClampEXT)* polygonOffsetClampEXT = nullptr;
    decltype(::glPopDebugGroup)* popDebugGroup = nullptr;
    decltype(::glPopDebugGroupKHR)* popDebugGroupKHR = nullptr;
    decltype(::glPrimitiveRestartIndex)* primitiveRestartIndex = nullptr;
    decltype(::glProgramBinary)* programBinary = nullptr;
    decltype(::glProgramParameteri)* programParameteri = nullptr;
    decltype(::glProgramPathFragmentInputGenNV)* programPathFragmentInputGenNV = nullptr;
    decltype(::glProgramSubroutineParametersuivNV)* programSubroutineParametersuivNV = nullptr;
    decltype(::glProgramUniform1d)* programUniform1d = nullptr;
    decltype(::glProgramUniform1dv)* programUniform1dv = nullptr;
    decltype(::glProgramUniform1f)* programUniform1f = nullptr;
    decltype(::glProgramUniform1fv)* programUniform1fv = nullptr;
    decltype(::glProgramUniform1i)* programUniform1i = nullptr;
    decltype(::glProgramUniform1i64ARB)* programUniform1i64ARB = nullptr;
    decltype(::glProgramUniform1i64NV)* programUniform1i64NV = nullptr;
    decltype(::glProgramUniform1i64vARB)* programUniform1i64vARB = nullptr;
    decltype(::glProgramUniform1i64vNV)* programUniform1i64vNV = nullptr;
    decltype(::glProgramUniform1iv)* programUniform1iv = nullptr;
    decltype(::glProgramUniform1ui)* programUniform1ui = nullptr;
    decltype(::glProgramUniform1ui64ARB)* programUniform1ui64ARB = nullptr;
    decltype(::glProgramUniform1ui64NV)* programUniform1ui64NV = nullptr;
    decltype(::glProgramUniform1ui64vARB)* programUniform1ui64vARB = nullptr;
    decltype(::glProgramUniform1ui64vNV)* programUniform1ui64vNV = nullptr;
    decltype(::glProgramUniform1uiv)* programUniform1uiv = nullptr;
    decltype(::glProgramUniform2d)* programUniform2d = nullptr;
    decltype(::glProgramUniform2dv)* programUniform2dv = nullptr;
    decltype(::glProgramUniform2f)* programUniform2f = nullptr;
    decltype(::glProgramUniform2fv)* programUniform2fv = nullptr;
    decltype(::glProgramUniform2i)* programUniform2i = nullptr;
    decltype(::glProgramUniform2i64ARB)* programUniform2i64ARB = nullptr;
    decltype(::glProgramUniform2i64NV)* programUniform2i64NV = nullptr;
    decltype(::glProgramUniform2i64vARB)* programUniform2i64vARB = nullptr;
    decltype(::glProgramUniform2i64vNV)* programUniform2i64vNV = nullptr;
    decltype(::glProgramUniform2iv)* programUniform2iv = nullptr;
    decltype(::glProgramUniform2ui)* programUniform2ui = nullptr;
    decltype(::glProgramUniform2ui64ARB)* programUniform2ui64ARB = nullptr;
    decltype(::glProgramUniform2ui64NV)* programUniform2ui64NV = nullptr;
    decltype(::glProgramUniform2ui64vARB)* programUniform2ui64vARB = nullptr;
    decltype(::glProgramUniform2ui64vNV)* programUniform2ui64vNV = nullptr;
    decltype(::glProgramUniform2uiv)* programUniform2uiv = nullptr;
    decltype(::glProgramUniform3d)* programUniform3d = nullptr;
    decltype(::glProgramUniform3dv)* programUniform3dv = nullptr;
    decltype(::glProgramUniform3f)* programUniform3f = nullptr;
    decltype(::glProgramUniform3fv)* programUniform3fv = nullptr;
    decltype(::glProgramUniform3i)* programUniform3i = nullptr;
    decltype(::glProgramUniform3i64ARB)* programUniform3i64ARB = nullptr;
    decltype(::glProgramUniform3i64NV)* programUniform3i64NV = nullptr;
    decltype(::glProgramUniform3i64vARB)* programUniform3i64vARB = nullptr;
    decltype(::glProgramUniform3i64vNV)* programUniform3i64vNV = nullptr;
    decltype(::glProgramUniform3iv)* programUniform3iv = nullptr;
    decltype(::glProgramUniform3ui)* programUniform3ui = nullptr;
    decltype(::glProgramUniform3ui64ARB)* programUniform3ui64ARB = nullptr;
    decltype(::glProgramUniform3ui64NV)* programUniform3ui64NV = nullptr;
    decltype(::glProgramUniform3ui64vARB)* programUniform3ui64vARB = nullptr;
    decltype(::glProgramUniform3ui64vNV)* programUniform3ui64vNV = nullptr;
    decltype(::glProgramUniform3uiv)* programUniform3uiv = nullptr;
    decltype(::glProgramUniform4d)* programUniform4d = nullptr;
    decltype(::glProgramUniform4dv)* programUniform4dv = nullptr;
    decltype(::glProgramUniform4f)* programUniform4f = nullptr;
    decltype(::glProgramUniform4fv)* programUniform4fv = nullptr;
    decltype(::glProgramUniform4i)* programUniform4i = nullptr;
    decltype(::glProgramUniform4i64ARB)* programUniform4i64ARB = nullptr;
    decltype(::glProgramUniform4i64NV)* programUniform4i64NV = nullptr;
    decltype(::glProgramUniform4i64vARB)* programUniform4i64vARB = nullptr;
    decltype(::glProgramUniform4i64vNV)* programUniform4i64vNV = nullptr;
    decltype(::glProgramUniform4iv)* programUniform4iv = nullptr;
    decltype(::glProgramUniform4ui)* programUniform4ui = nullptr;
    decltype(::glProgramUniform4ui64ARB)* programUniform4ui64ARB = nullptr;
    decltype(::glProgramUniform4ui64NV)* programUniform4ui64NV = nullptr;
    decltype(::glProgramUniform4ui64vARB)* programUniform4ui64vARB = nullptr;
    decltype(::glProgramUniform4ui64vNV)* programUniform4ui64vNV = nullptr;
    decltype(::glProgramUniform4uiv)* programUniform4uiv = nullptr;
    decltype(::glProgramUniformHandleui64ARB)* programUniformHandleui64ARB = nullptr;
    decltype(::glProgramUniformHandleui64vARB)* programUniformHandleui64vARB = nullptr;
    decltype(::glProgramUniformMatrix2dv)* programUniformMatrix2dv = nullptr;
    decltype(::glProgramUniformMatrix2fv)* programUniformMatrix2fv = nullptr;
    decltype(::glProgramUniformMatrix2x3dv)* programUniformMatrix2x3dv = nullptr;
    decltype(::glProgramUniformMatrix2x3fv)* programUniformMatrix2x3fv = nullptr;
    decltype(::glProgramUniformMatrix2x4dv)* programUniformMatrix2x4dv = nullptr;
    decltype(::glProgramUniformMatrix2x4fv)* programUniformMatrix2x4fv = nullptr;
    decltype(::glProgramUniformMatrix3dv)* programUniformMatrix3dv = nullptr;
    decltype(::glProgramUniformMatrix3fv)* programUniformMatrix3fv = nullptr;
    decltype(::glProgramUniformMatrix3x2dv)* programUniformMatrix3x2dv = nullptr;
    decltype(::glProgramUniformMatrix3x2fv)* programUniformMatrix3x2fv = nullptr;
    decltype(::glProgramUniformMatrix3x4dv)* programUniformMatrix3x4dv = nullptr;
    decltype(::glProgramUniformMatrix3x4fv)* programUniformMatrix3x4fv = nullptr;
    decltype(::glProgramUniformMatrix4dv)* programUniformMatrix4dv = nullptr;
    decltype(::glProgramUniformMatrix4fv)* programUniformMatrix4fv = nullptr;
    decltype(::glProgramUniformMatrix4x2dv)* programUniformMatrix4x2dv = nullptr;
    decltype(::glProgramUniformMatrix4x2fv)* programUniformMatrix4x2fv = nullptr;
    decltype(::glProgramUniformMatrix4x3dv)* programUniformMatrix4x3dv = nullptr;
    decltype(::glProgramUniformMatrix4x3fv)* programUniformMatrix4x3fv = nullptr;
    decltype(::glProgramUniformui64NV)* programUniformui64NV = nullptr;
    decltype(::glProgramUniformui64vNV)* programUniformui64vNV = nullptr;
    decltype(::glProvokingVertex)* provokingVertex = nullptr;
    decltype(::glPushDebugGroup)* pushDebugGroup = nullptr;
    decltype(::glPushDebugGroupKHR)* pushDebugGroupKHR = nullptr;
    decltype(::glQueryCounter)* queryCounter = nullptr;
    decltype(::glReadBuffer)* readBuffer = nullptr;
    decltype(::glReadPixels)* readPixels = nullptr;
    decltype(::glReadnPixels)* readnPixels = nullptr;
    decltype(::glReleaseShaderCompiler)* releaseShaderCompiler = nullptr;
    decltype(::glRenderbufferStorage)* renderbufferStorage = nullptr;
    decltype(::glRenderbufferStorageMultisample)* renderbufferStorageMultisample = nullptr;
    decltype(::glResumeTransformFeedback)* resumeTransformFeedback = nullptr;
    decltype(::glSampleCoverage)* sampleCoverage = nullptr;
    decltype(::glSampleMaski)* sampleMaski = nullptr;
    decltype(::glSamplerParameterIiv)* samplerParameterIiv = nullptr;
    decltype(::glSamplerParameterIuiv)* samplerParameterIuiv = nullptr;
    decltype(::glSamplerParameterf)* samplerParameterf = nullptr;
    decltype(::glSamplerParameterfv)* samplerParameterfv = nullptr;
    decltype(::glSamplerParameteri)* samplerParameteri = nullptr;
    decltype(::glSamplerParameteriv)* samplerParameteriv = nullptr;
    decltype(::glScissor)* scissor = nullptr;
    decltype(::glScissorArrayv)* scissorArrayv = nullptr;
    decltype(::glScissorIndexed)* scissorIndexed = nullptr;
    decltype(::glScissorIndexedv)* scissorIndexedv = nullptr;
    decltype(::glSecondaryColorFormatNV)* secondaryColorFormatNV = nullptr;
    decltype(::glSecondaryColorP3ui)* secondaryColorP3ui = nullptr;
    decltype(::glSecondaryColorP3uiv)* secondaryColorP3uiv = nullptr;
    decltype(::glSemaphoreParameterui64vEXT)* semaphoreParameterui64vEXT = nullptr;
    decltype(::glShaderBinary)* shaderBinary = nullptr;
    decltype(::glShaderSource)* shaderSource = nullptr;
    decltype(::glShaderStorageBlockBinding)* shaderStorageBlockBinding = nullptr;
    decltype(::glSignalSemaphoreEXT)* signalSemaphoreEXT = nullptr;
    decltype(::glSpecializeShader)* specializeShader = nullptr;
    decltype(::glStateCaptureNV)* stateCaptureNV = nullptr;
    decltype(::glStencilFillPathInstancedNV)* stencilFillPathInstancedNV = nullptr;
    decltype(::glStencilFillPathNV)* stencilFillPathNV = nullptr;
    decltype(::glStencilFunc)* stencilFunc = nullptr;
    decltype(::glStencilFuncSeparate)* stencilFuncSeparate = nullptr;
    decltype(::glStencilMask)* stencilMask = nullptr;
    decltype(::glStencilMaskSeparate)* stencilMaskSeparate = nullptr;
    decltype(::glStencilOp)* stencilOp = nullptr;
    decltype(::glStencilOpSeparate)* stencilOpSeparate = nullptr;
    decltype(::glStencilStrokePathInstancedNV)* stencilStrokePathInstancedNV = nullptr;
    decltype(::glStencilStrokePathNV)* stencilStrokePathNV = nullptr;
    decltype(::glStencilThenCoverFillPathInstancedNV)* stencilThenCoverFillPathInstancedNV = nullptr;
    decltype(::glStencilThenCoverFillPathNV)* stencilThenCoverFillPathNV = nullptr;
    decltype(::glStencilThenCoverStrokePathInstancedNV)* stencilThenCoverStrokePathInstancedNV = nullptr;
    decltype(::glStencilThenCoverStrokePathNV)* stencilThenCoverStrokePathNV = nullptr;
    decltype(::glTexBuffer)* texBuffer = nullptr;
    decltype(::glTexBufferRange)* texBufferRange = nullptr;
    decltype(::glTexCoordFormatNV)* texCoordFormatNV = nullptr;
    decltype(::glTexCoordP1ui)* texCoordP1ui = nullptr;
    decltype(::glTexCoordP1uiv)* texCoordP1uiv = nullptr;
    decltype(::glTexCoordP2ui)* texCoordP2ui = nullptr;
    decltype(::glTexCoordP2uiv)* texCoordP2uiv = nullptr;
    decltype(::glTexCoordP3ui)* texCoordP3ui = nullptr;
    decltype(::glTexCoordP3uiv)* texCoordP3uiv = nullptr;
    decltype(::glTexCoordP4ui)* texCoordP4ui = nullptr;
    decltype(::glTexCoordP4uiv)* texCoordP4uiv = nullptr;
    decltype(::glTexImage1D)* texImage1D = nullptr;
    decltype(::glTexImage2D)* texImage2D = nullptr;
    decltype(::glTexImage2DMultisample)* texImage2DMultisample = nullptr;
    decltype(::glTexImage3D)* texImage3D = nullptr;
    decltype(::glTexImage3DMultisample)* texImage3DMultisample = nullptr;
    decltype(::glTexParameterIiv)* texParameterIiv = nullptr;
    decltype(::glTexParameterIuiv)* texParameterIuiv = nullptr;
    decltype(::glTexParameterf)* texParameterf = nullptr;
    decltype(::glTexParameterfv)* texParameterfv = nullptr;
    decltype(::glTexParameteri)* texParameteri = nullptr;
    decltype(::glTexParameteriv)* texParameteriv = nullptr;
    decltype(::glTexStorage1D)* texStorage1D = nullptr;
    decltype(::glTexStorage2D)* texStorage2D = nullptr;
    decltype(::glTexStorage2DMultisample)* texStorage2DMultisample = nullptr;
    decltype(::glTexStorage3D)* texStorage3D = nullptr;
    decltype(::glTexStorage3DMultisample)* texStorage3DMultisample = nullptr;
    decltype(::glTexStorageMem1DEXT)* texStorageMem1DEXT = nullptr;
    decltype(::glTexStorageMem2DEXT)* texStorageMem2DEXT = nullptr;
    decltype(::glTexStorageMem2DMultisampleEXT)* texStorageMem2DMultisampleEXT = nullptr;
    decltype(::glTexStorageMem3DEXT)* texStorageMem3DEXT = nullptr;
    decltype(::glTexStorageMem3DMultisampleEXT)* texStorageMem3DMultisampleEXT = nullptr;
    decltype(::glTexSubImage1D)* texSubImage1D = nullptr;
    decltype(::glTexSubImage2D)* texSubImage2D = nullptr;
    decltype(::glTexSubImage3D)* texSubImage3D = nullptr;
    decltype(::glTextureBarrier)* textureBarrier = nullptr;
    decltype(::glTextureBuffer)* textureBuffer = nullptr;
    decltype(::glTextureBufferRange)* textureBufferRange = nullptr;
    decltype(::glTextureParameterIiv)* textureParameterIiv = nullptr;
    decltype(::glTextureParameterIuiv)* textureParameterIuiv = nullptr;
    decltype(::glTextureParameterf)* textureParameterf = nullptr;
    decltype(::glTextureParameterfv)* textureParameterfv = nullptr;
    decltype(::glTextureParameteri)* textureParameteri = nullptr;
    decltype(::glTextureParameteriv)* textureParameteriv = nullptr;
    decltype(::glTextureStorage1D)* textureStorage1D = nullptr;
    decltype(::glTextureStorage2D)* textureStorage2D = nullptr;
    decltype(::glTextureStorage2DMultisample)* textureStorage2DMultisample = nullptr;
    decltype(::glTextureStorage3D)* textureStorage3D = nullptr;
    decltype(::glTextureStorage3DMultisample)* textureStorage3DMultisample = nullptr;
    decltype(::glTextureStorageMem1DEXT)* textureStorageMem1DEXT = nullptr;
    decltype(::glTextureStorageMem2DEXT)* textureStorageMem2DEXT = nullptr;
    decltype(::glTextureStorageMem2DMultisampleEXT)* textureStorageMem2DMultisampleEXT = nullptr;
    decltype(::glTextureStorageMem3DEXT)* textureStorageMem3DEXT = nullptr;
    decltype(::glTextureStorageMem3DMultisampleEXT)* textureStorageMem3DMultisampleEXT = nullptr;
    decltype(::glTextureSubImage1D)* textureSubImage1D = nullptr;
    decltype(::glTextureSubImage2D)* textureSubImage2D = nullptr;
    decltype(::glTextureSubImage3D)* textureSubImage3D = nullptr;
    decltype(::glTextureView)* textureView = nullptr;
    decltype(::glTransformFeedbackBufferBase)* transformFeedbackBufferBase = nullptr;
    decltype(::glTransformFeedbackBufferRange)* transformFeedbackBufferRange = nullptr;
    decltype(::glTransformFeedbackVaryings)* transformFeedbackVaryings = nullptr;
    decltype(::glTransformPathNV)* transformPathNV = nullptr;
    decltype(::glUniform1d)* uniform1d = nullptr;
    decltype(::glUniform1dv)* uniform1dv = nullptr;
    decltype(::glUniform1f)* uniform1f = nullptr;
    decltype(::glUniform1fv)* uniform1fv = nullptr;
    decltype(::glUniform1i)* uniform1i = nullptr;
    decltype(::glUniform1i64ARB)* uniform1i64ARB = nullptr;
    decltype(::glUniform1i64NV)* uniform1i64NV = nullptr;
    decltype(::glUniform1i64vARB)* uniform1i64vARB = nullptr;
    decltype(::glUniform1i64vNV)* uniform1i64vNV = nullptr;
    decltype(::glUniform1iv)* uniform1iv = nullptr;
    decltype(::glUniform1ui)* uniform1ui = nullptr;
    decltype(::glUniform1ui64ARB)* uniform1ui64ARB = nullptr;
    decltype(::glUniform1ui64NV)* uniform1ui64NV = nullptr;
    decltype(::glUniform1ui64vARB)* uniform1ui64vARB = nullptr;
    decltype(::glUniform1ui64vNV)* uniform1ui64vNV = nullptr;
    decltype(::glUniform1uiv)* uniform1uiv = nullptr;
    decltype(::glUniform2d)* uniform2d = nullptr;
    decltype(::glUniform2dv)* uniform2dv = nullptr;
    decltype(::glUniform2f)* uniform2f = nullptr;
    decltype(::glUniform2fv)* uniform2fv = nullptr;
    decltype(::glUniform2i)* uniform2i = nullptr;
    decltype(::glUniform2i64ARB)* uniform2i64ARB = nullptr;
    decltype(::glUniform2i64NV)* uniform2i64NV = nullptr;
    decltype(::glUniform2i64vARB)* uniform2i64vARB = nullptr;
    decltype(::glUniform2i64vNV)* uniform2i64vNV = nullptr;
    decltype(::glUniform2iv)* uniform2iv = nullptr;
    decltype(::glUniform2ui)* uniform2ui = nullptr;
    decltype(::glUniform2ui64ARB)* uniform2ui64ARB = nullptr;
    decltype(::glUniform2ui64NV)* uniform2ui64NV = nullptr;
    decltype(::glUniform2ui64vARB)* uniform2ui64vARB = nullptr;
    decltype(::glUniform2ui64vNV)* uniform2ui64vNV = nullptr;
    decltype(::glUniform2uiv)* uniform2uiv = nullptr;
    decltype(::glUniform3d)* uniform3d = nullptr;
    decltype(::glUniform3dv)* uniform3dv = nullptr;
    decltype(::glUniform3f)* uniform3f = nullptr;
    decltype(::glUniform3fv)* uniform3fv = nullptr;
    decltype(::glUniform3i)* uniform3i = nullptr;
    decltype(::glUniform3i64ARB)* uniform3i64ARB = nullptr;
    decltype(::glUniform3i64NV)* uniform3i64NV = nullptr;
    decltype(::glUniform3i64vARB)* uniform3i64vARB = nullptr;
    decltype(::glUniform3i64vNV)* uniform3i64vNV = nullptr;
    decltype(::glUniform3iv)* uniform3iv = nullptr;
    decltype(::glUniform3ui)* uniform3ui = nullptr;
    decltype(::glUniform3ui64ARB)* uniform3ui64ARB = nullptr;
    decltype(::glUniform3ui64NV)* uniform3ui64NV = nullptr;
    decltype(::glUniform3ui64vARB)* uniform3ui64vARB = nullptr;
    decltype(::glUniform3ui64vNV)* uniform3ui64vNV = nullptr;
    decltype(::glUniform3uiv)* uniform3uiv = nullptr;
    decltype(::glUniform4d)* uniform4d = nullptr;
    decltype(::glUniform4dv)* uniform4dv = nullptr;
    decltype(::glUniform4f)* uniform4f = nullptr;
    decltype(::glUniform4fv)* uniform4fv = nullptr;
    decltype(::glUniform4i)* uniform4i = nullptr;
    decltype(::glUniform4i64ARB)* uniform4i64ARB = nullptr;
    decltype(::glUniform4i64NV)* uniform4i64NV = nullptr;
    decltype(::glUniform4i64vARB)* uniform4i64vARB = nullptr;
    decltype(::glUniform4i64vNV)* uniform4i64vNV = nullptr;
    decltype(::glUniform4iv)* uniform4iv = nullptr;
    decltype(::glUniform4ui)* uniform4ui = nullptr;
    decltype(::glUniform4ui64ARB)* uniform4ui64ARB = nullptr;
    decltype(::glUniform4ui64NV)* uniform4ui64NV = nullptr;
    decltype(::glUniform4ui64vARB)* uniform4ui64vARB = nullptr;
    decltype(::glUniform4ui64vNV)* uniform4ui64vNV = nullptr;
    decltype(::glUniform4uiv)* uniform4uiv = nullptr;
    decltype(::glUniformBlockBinding)* uniformBlockBinding = nullptr;
    decltype(::glUniformHandleui64ARB)* uniformHandleui64ARB = nullptr;
    decltype(::glUniformHandleui64vARB)* uniformHandleui64vARB = nullptr;
    decltype(::glUniformMatrix2dv)* uniformMatrix2dv = nullptr;
    decltype(::glUniformMatrix2fv)* uniformMatrix2fv = nullptr;
    decltype(::glUniformMatrix2x3dv)* uniformMatrix2x3dv = nullptr;
    decltype(::glUniformMatrix2x3fv)* uniformMatrix2x3fv = nullptr;
    decltype(::glUniformMatrix2x4dv)* uniformMatrix2x4dv = nullptr;
    decltype(::glUniformMatrix2x4fv)* uniformMatrix2x4fv = nullptr;
    decltype(::glUniformMatrix3dv)* uniformMatrix3dv = nullptr;
    decltype(::glUniformMatrix3fv)* uniformMatrix3fv = nullptr;
    decltype(::glUniformMatrix3x2dv)* uniformMatrix3x2dv = nullptr;
    decltype(::glUniformMatrix3x2fv)* uniformMatrix3x2fv = nullptr;
    decltype(::glUniformMatrix3x4dv)* uniformMatrix3x4dv = nullptr;
    decltype(::glUniformMatrix3x4fv)* uniformMatrix3x4fv = nullptr;
    decltype(::glUniformMatrix4dv)* uniformMatrix4dv = nullptr;
    decltype(::glUniformMatrix4fv)* uniformMatrix4fv = nullptr;
    decltype(::glUniformMatrix4x2dv)* uniformMatrix4x2dv = nullptr;
    decltype(::glUniformMatrix4x2fv)* uniformMatrix4x2fv = nullptr;
    decltype(::glUniformMatrix4x3dv)* uniformMatrix4x3dv = nullptr;
    decltype(::glUniformMatrix4x3fv)* uniformMatrix4x3fv = nullptr;
    decltype(::glUniformSubroutinesuiv)* uniformSubroutinesuiv = nullptr;
    decltype(::glUniformui64NV)* uniformui64NV = nullptr;
    decltype(::glUniformui64vNV)* uniformui64vNV = nullptr;
    decltype(::glUnmapBuffer)* unmapBuffer = nullptr;
    decltype(::glUnmapNamedBuffer)* unmapNamedBuffer = nullptr;
    decltype(::glUseProgram)* useProgram = nullptr;
    decltype(::glUseProgramStages)* useProgramStages = nullptr;
    decltype(::glValidateProgram)* validateProgram = nullptr;
    decltype(::glValidateProgramPipeline)* validateProgramPipeline = nullptr;
    decltype(::glVertexArrayAttribBinding)* vertexArrayAttribBinding = nullptr;
    decltype(::glVertexArrayAttribFormat)* vertexArrayAttribFormat = nullptr;
    decltype(::glVertexArrayAttribIFormat)* vertexArrayAttribIFormat = nullptr;
    decltype(::glVertexArrayAttribLFormat)* vertexArrayAttribLFormat = nullptr;
    decltype(::glVertexArrayBindingDivisor)* vertexArrayBindingDivisor = nullptr;
    decltype(::glVertexArrayElementBuffer)* vertexArrayElementBuffer = nullptr;
    decltype(::glVertexArrayVertexBuffer)* vertexArrayVertexBuffer = nullptr;
    decltype(::glVertexArrayVertexBuffers)* vertexArrayVertexBuffers = nullptr;
    decltype(::glVertexAttrib1d)* vertexAttrib1d = nullptr;
    decltype(::glVertexAttrib1dv)* vertexAttrib1dv = nullptr;
    decltype(::glVertexAttrib1f)* vertexAttrib1f = nullptr;
    decltype(::glVertexAttrib1fv)* vertexAttrib1fv = nullptr;
    decltype(::glVertexAttrib1s)* vertexAttrib1s = nullptr;
    decltype(::glVertexAttrib1sv)* vertexAttrib1sv = nullptr;
    decltype(::glVertexAttrib2d)* vertexAttrib2d = nullptr;
    decltype(::glVertexAttrib2dv)* vertexAttrib2dv = nullptr;
    decltype(::glVertexAttrib2f)* vertexAttrib2f = nullptr;
    decltype(::glVertexAttrib2fv)* vertexAttrib2fv = nullptr;
    decltype(::glVertexAttrib2s)* vertexAttrib2s = nullptr;
    decltype(::glVertexAttrib2sv)* vertexAttrib2sv = nullptr;
    decltype(::glVertexAttrib3d)* vertexAttrib3d = nullptr;
    decltype(::glVertexAttrib3dv)* vertexAttrib3dv = nullptr;
    decltype(::glVertexAttrib3f)* vertexAttrib3f = nullptr;
    decltype(::glVertexAttrib3fv)* vertexAttrib3fv = nullptr;
    decltype(::glVertexAttrib3s)* vertexAttrib3s = nullptr;
    decltype(::glVertexAttrib3sv)* vertexAttrib3sv = nullptr;
    decltype(::glVertexAttrib4Nbv)* vertexAttrib4Nbv = nullptr;
    decltype(::glVertexAttrib4Niv)* vertexAttrib4Niv = nullptr;
    decltype(::glVertexAttrib4Nsv)* vertexAttrib4Nsv = nullptr;
    decltype(::glVertexAttrib4Nub)* vertexAttrib4Nub = nullptr;
    decltype(::glVertexAttrib4Nubv)* vertexAttrib4Nubv = nullptr;
    decltype(::glVertexAttrib4Nuiv)* vertexAttrib4Nuiv = nullptr;
    decltype(::glVertexAttrib4Nusv)* vertexAttrib4Nusv = nullptr;
    decltype(::glVertexAttrib4bv)* vertexAttrib4bv = nullptr;
    decltype(::glVertexAttrib4d)* vertexAttrib4d = nullptr;
    decltype(::glVertexAttrib4dv)* vertexAttrib4dv = nullptr;
    decltype(::glVertexAttrib4f)* vertexAttrib4f = nullptr;
    decltype(::glVertexAttrib4fv)* vertexAttrib4fv = nullptr;
    decltype(::glVertexAttrib4iv)* vertexAttrib4iv = nullptr;
    decltype(::glVertexAttrib4s)* vertexAttrib4s = nullptr;
    decltype(::glVertexAttrib4sv)* vertexAttrib4sv = nullptr;
    decltype(::glVertexAttrib4ubv)* vertexAttrib4ubv = nullptr;
    decltype(::glVertexAttrib4uiv)* vertexAttrib4uiv = nullptr;
    decltype(::glVertexAttrib4usv)* vertexAttrib4usv = nullptr;
    decltype(::glVertexAttribBinding)* vertexAttribBinding = nullptr;
    decltype(::glVertexAttribDivisor)* vertexAttribDivisor = nullptr;
    decltype(::glVertexAttribFormat)* vertexAttribFormat = nullptr;
    decltype(::glVertexAttribFormatNV)* vertexAttribFormatNV = nullptr;
    decltype(::glVertexAttribI1i)* vertexAttribI1i = nullptr;
    decltype(::glVertexAttribI1iv)* vertexAttribI1iv = nullptr;
    decltype(::glVertexAttribI1ui)* vertexAttribI1ui = nullptr;
    decltype(::glVertexAttribI1uiv)* vertexAttribI1uiv = nullptr;
    decltype(::glVertexAttribI2i)* vertexAttribI2i = nullptr;
    decltype(::glVertexAttribI2iv)* vertexAttribI2iv = nullptr;
    decltype(::glVertexAttribI2ui)* vertexAttribI2ui = nullptr;
    decltype(::glVertexAttribI2uiv)* vertexAttribI2uiv = nullptr;
    decltype(::glVertexAttribI3i)* vertexAttribI3i = nullptr;
    decltype(::glVertexAttribI3iv)* vertexAttribI3iv = nullptr;
    decltype(::glVertexAttribI3ui)* vertexAttribI3ui = nullptr;
    decltype(::glVertexAttribI3uiv)* vertexAttribI3uiv = nullptr;
    decltype(::glVertexAttribI4bv)* vertexAttribI4bv = nullptr;
    decltype(::glVertexAttribI4i)* vertexAttribI4i = nullptr;
    decltype(::glVertexAttribI4iv)* vertexAttribI4iv = nullptr;
    decltype(::glVertexAttribI4sv)* vertexAttribI4sv = nullptr;
    decltype(::glVertexAttribI4ubv)* vertexAttribI4ubv = nullptr;
    decltype(::glVertexAttribI4ui)* vertexAttribI4ui = nullptr;
    decltype(::glVertexAttribI4uiv)* vertexAttribI4uiv = nullptr;
    decltype(::glVertexAttribI4usv)* vertexAttribI4usv = nullptr;
    decltype(::glVertexAttribIFormat)* vertexAttribIFormat = nullptr;
    decltype(::glVertexAttribIFormatNV)* vertexAttribIFormatNV = nullptr;
    decltype(::glVertexAttribIPointer)* vertexAttribIPointer = nullptr;
    decltype(::glVertexAttribL1d)* vertexAttribL1d = nullptr;
    decltype(::glVertexAttribL1dv)* vertexAttribL1dv = nullptr;
    decltype(::glVertexAttribL1ui64ARB)* vertexAttribL1ui64ARB = nullptr;
    decltype(::glVertexAttribL1ui64vARB)* vertexAttribL1ui64vARB = nullptr;
    decltype(::glVertexAttribL2d)* vertexAttribL2d = nullptr;
    decltype(::glVertexAttribL2dv)* vertexAttribL2dv = nullptr;
    decltype(::glVertexAttribL3d)* vertexAttribL3d = nullptr;
    decltype(::glVertexAttribL3dv)* vertexAttribL3dv = nullptr;
    decltype(::glVertexAttribL4d)* vertexAttribL4d = nullptr;
    decltype(::glVertexAttribL4dv)* vertexAttribL4dv = nullptr;
    decltype(::glVertexAttribLFormat)* vertexAttribLFormat = nullptr;
    decltype(::glVertexAttribLPointer)* vertexAttribLPointer = nullptr;
    decltype(::glVertexAttribP1ui)* vertexAttribP1ui = nullptr;
    decltype(::glVertexAttribP1uiv)* vertexAttribP1uiv = nullptr;
    decltype(::glVertexAttribP2ui)* vertexAttribP2ui = nullptr;
    decltype(::glVertexAttribP2uiv)* vertexAttribP2uiv = nullptr;
    decltype(::glVertexAttribP3ui)* vertexAttribP3ui = nullptr;
    decltype(::glVertexAttribP3uiv)* vertexAttribP3uiv = nullptr;
    decltype(::glVertexAttribP4ui)* vertexAttribP4ui = nullptr;
    decltype(::glVertexAttribP4uiv)* vertexAttribP4uiv = nullptr;
    decltype(::glVertexAttribPointer)* vertexAttribPointer = nullptr;
    decltype(::glVertexBindingDivisor)* vertexBindingDivisor = nullptr;
    decltype(::glVertexFormatNV)* vertexFormatNV = nullptr;
    decltype(::glVertexP2ui)* vertexP2ui = nullptr;
    decltype(::glVertexP2uiv)* vertexP2uiv = nullptr;
    decltype(::glVertexP3ui)* vertexP3ui = nullptr;
    decltype(::glVertexP3uiv)* vertexP3uiv = nullptr;
    decltype(::glVertexP4ui)* vertexP4ui = nullptr;
    decltype(::glVertexP4uiv)* vertexP4uiv = nullptr;
    decltype(::glViewport)* viewport = nullptr;
    decltype(::glViewportArrayv)* viewportArrayv = nullptr;
    decltype(::glViewportIndexedf)* viewportIndexedf = nullptr;
    decltype(::glViewportIndexedfv)* viewportIndexedfv = nullptr;
    decltype(::glWaitSemaphoreEXT)* waitSemaphoreEXT = nullptr;
    decltype(::glWaitSync)* waitSync = nullptr;
    decltype(::glWeightPathsNV)* weightPathsNV = nullptr;

    dispatch(bool load = false);
    dispatch(loader_function loader);

    dispatch(const dispatch&) = delete;
    dispatch(dispatch&&) = default;
    dispatch& operator=(const dispatch&) = delete;
    dispatch& operator=(dispatch&&) = default;
    ~dispatch() = default;
};
} // mygl

#if defined(MYGL_IMPLEMENTATION)
#include "mygl_functions.inl"
#endif
