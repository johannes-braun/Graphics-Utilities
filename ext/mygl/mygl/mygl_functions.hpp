#pragma once 
/* This header contains all needed OpenGL function pointers.
*/
#include "mygl_types.hpp"

#if __cpp_noexcept_function_type >= 201510
#   define MYGL_NOEXCEPT noexcept
#else
#   define MYGL_NOEXCEPT
#endif
#ifdef _WIN32
#   ifdef APIENTRY
#       undef APIENTRY
#   endif //APIENTRY
#   include <windows.h>
#   ifndef APIENTRY
#       define APIENTRY __stdcall
#   endif //APIENTRY
#else
#   include <dlfcn.h>
#endif

extern void (APIENTRY*glActiveShaderProgram)(mygl::pipeline pipeline, mygl::shader_program program) MYGL_NOEXCEPT;
extern void (APIENTRY*glActiveTexture)(mygl::texture texture) MYGL_NOEXCEPT;
extern void (APIENTRY*glAttachShader)(mygl::shader_program program, mygl::shader shader) MYGL_NOEXCEPT;
extern void (APIENTRY*glBeginConditionalRender)(unsigned int id, GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glBeginQuery)(GLenum target, mygl::query id) MYGL_NOEXCEPT;
extern void (APIENTRY*glBeginQueryIndexed)(GLenum target, unsigned int index, mygl::query id) MYGL_NOEXCEPT;
extern void (APIENTRY*glBeginTransformFeedback)(GLenum primitiveMode) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindAttribLocation)(mygl::shader_program program, unsigned int index, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindBuffer)(GLenum target, mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindBufferBase)(GLenum target, unsigned int index, mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindBufferRange)(GLenum target, unsigned int index, mygl::buffer buffer, GLintptr offset, GLsizeiptr size) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindBuffersBase)(GLenum target, unsigned int first, int count, const mygl::buffer * buffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindBuffersRange)(GLenum target, unsigned int first, int count, const mygl::buffer * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindFragDataLocation)(mygl::shader_program program, unsigned int color, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindFragDataLocationIndexed)(mygl::shader_program program, unsigned int colorNumber, unsigned int index, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindFramebuffer)(GLenum target, mygl::framebuffer framebuffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindImageTexture)(unsigned int unit, mygl::texture texture, int level, bool layered, int layer, GLenum access, GLenum format) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindImageTextures)(unsigned int first, int count, const mygl::texture * textures) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindProgramPipeline)(mygl::pipeline pipeline) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindRenderbuffer)(GLenum target, mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindSampler)(unsigned int unit, mygl::sampler sampler) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindSamplers)(unsigned int first, int count, const mygl::sampler * samplers) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindTexture)(GLenum target, mygl::texture texture) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindTextureUnit)(unsigned int unit, mygl::texture texture) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindTextures)(unsigned int first, int count, const mygl::texture * textures) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindTransformFeedback)(GLenum target, mygl::transform_feedback id) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindVertexArray)(mygl::vertex_array array) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindVertexBuffer)(unsigned int bindingindex, mygl::buffer buffer, GLintptr offset, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glBindVertexBuffers)(unsigned int first, int count, const mygl::buffer * buffers, const GLintptr * offsets, const int * strides) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendColor)(float red, float green, float blue, float alpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendEquation)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendEquationSeparate)(GLenum modeRGB, GLenum modeAlpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendEquationSeparatei)(unsigned int buf, GLenum modeRGB, GLenum modeAlpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendEquationSeparateiARB)(unsigned int buf, GLenum modeRGB, GLenum modeAlpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendEquationi)(unsigned int buf, GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendEquationiARB)(unsigned int buf, GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendFunc)(GLenum sfactor, GLenum dfactor) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendFuncSeparate)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendFuncSeparatei)(unsigned int buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendFuncSeparateiARB)(unsigned int buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendFunci)(unsigned int buf, GLenum src, GLenum dst) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlendFunciARB)(unsigned int buf, GLenum src, GLenum dst) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlitFramebuffer)(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, GLbitfield mask, GLenum filter) MYGL_NOEXCEPT;
extern void (APIENTRY*glBlitNamedFramebuffer)(mygl::framebuffer readFramebuffer, mygl::framebuffer drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, GLbitfield mask, GLenum filter) MYGL_NOEXCEPT;
extern void (APIENTRY*glBufferAddressRangeNV)(GLenum pname, unsigned int index, uint64_t address, GLsizeiptr length) MYGL_NOEXCEPT;
extern void (APIENTRY*glBufferData)(GLenum target, GLsizeiptr size, const void * data, GLenum usage) MYGL_NOEXCEPT;
extern void (APIENTRY*glBufferStorage)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) MYGL_NOEXCEPT;
extern void (APIENTRY*glBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCallCommandListNV)(mygl::command_list list) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glCheckFramebufferStatus)(GLenum target) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glCheckNamedFramebufferStatus)(mygl::framebuffer framebuffer, GLenum target) MYGL_NOEXCEPT;
extern void (APIENTRY*glClampColor)(GLenum target, GLenum clamp) MYGL_NOEXCEPT;
extern void (APIENTRY*glClear)(GLbitfield mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearBufferfi)(mygl::buffer buffer, int drawbuffer, float depth, int stencil) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearBufferfv)(mygl::buffer buffer, int drawbuffer, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearBufferiv)(mygl::buffer buffer, int drawbuffer, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearBufferuiv)(mygl::buffer buffer, int drawbuffer, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearColor)(float red, float green, float blue, float alpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearDepth)(double depth) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearDepthf)(float d) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearNamedBufferData)(mygl::buffer buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearNamedBufferSubData)(mygl::buffer buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearNamedFramebufferfi)(mygl::framebuffer framebuffer, GLenum buffer, int drawbuffer, float depth, int stencil) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearNamedFramebufferfv)(mygl::framebuffer framebuffer, GLenum buffer, int drawbuffer, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearNamedFramebufferiv)(mygl::framebuffer framebuffer, GLenum buffer, int drawbuffer, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearNamedFramebufferuiv)(mygl::framebuffer framebuffer, GLenum buffer, int drawbuffer, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearStencil)(int s) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearTexImage)(mygl::texture texture, int level, GLenum format, GLenum type, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glClearTexSubImage)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, GLenum type, const void * data) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glClientWaitSync)(GLsync sync, GLbitfield flags, uint64_t timeout) MYGL_NOEXCEPT;
extern void (APIENTRY*glClipControl)(GLenum origin, GLenum depth) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorFormatNV)(int size, GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorMask)(bool red, bool green, bool blue, bool alpha) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorMaski)(unsigned int index, bool r, bool g, bool b, bool a) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorP3ui)(GLenum type, unsigned int color) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorP3uiv)(GLenum type, const unsigned int * color) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorP4ui)(GLenum type, unsigned int color) MYGL_NOEXCEPT;
extern void (APIENTRY*glColorP4uiv)(GLenum type, const unsigned int * color) MYGL_NOEXCEPT;
extern void (APIENTRY*glCommandListSegmentsNV)(mygl::command_list list, unsigned int segments) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompileCommandListNV)(mygl::command_list list) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompileShader)(mygl::shader shader) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTexImage1D)(GLenum target, int level, GLenum internalformat, int width, int border, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTexImage2D)(GLenum target, int level, GLenum internalformat, int width, int height, int border, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTexImage3D)(GLenum target, int level, GLenum internalformat, int width, int height, int depth, int border, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTexSubImage1D)(GLenum target, int level, int xoffset, int width, GLenum format, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTexSubImage2D)(GLenum target, int level, int xoffset, int yoffset, int width, int height, GLenum format, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTexSubImage3D)(GLenum target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTextureSubImage1D)(mygl::texture texture, int level, int xoffset, int width, GLenum format, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTextureSubImage2D)(mygl::texture texture, int level, int xoffset, int yoffset, int width, int height, GLenum format, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCompressedTextureSubImage3D)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, int imageSize, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyBufferSubData)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyImageSubData)(unsigned int srcName, GLenum srcTarget, int srcLevel, int srcX, int srcY, int srcZ, unsigned int dstName, GLenum dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyNamedBufferSubData)(mygl::buffer readBuffer, mygl::buffer writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyPathNV)(mygl::path resultPath, mygl::path srcPath) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTexImage1D)(GLenum target, int level, GLenum internalformat, int x, int y, int width, int border) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTexImage2D)(GLenum target, int level, GLenum internalformat, int x, int y, int width, int height, int border) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTexSubImage1D)(GLenum target, int level, int xoffset, int x, int y, int width) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTexSubImage2D)(GLenum target, int level, int xoffset, int yoffset, int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTexSubImage3D)(GLenum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTextureSubImage1D)(mygl::texture texture, int level, int xoffset, int x, int y, int width) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTextureSubImage2D)(mygl::texture texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glCopyTextureSubImage3D)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glCoverFillPathInstancedNV)(int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, GLenum coverMode, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glCoverFillPathNV)(mygl::path path, GLenum coverMode) MYGL_NOEXCEPT;
extern void (APIENTRY*glCoverStrokePathInstancedNV)(int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, GLenum coverMode, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glCoverStrokePathNV)(mygl::path path, GLenum coverMode) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateBuffers)(int n, mygl::buffer * buffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateCommandListsNV)(int n, mygl::command_list * lists) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateFramebuffers)(int n, mygl::framebuffer * framebuffers) MYGL_NOEXCEPT;
extern mygl::shader_program(APIENTRY*glCreateProgram)() MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateProgramPipelines)(int n, mygl::pipeline * pipelines) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateQueries)(GLenum target, int n, mygl::query * ids) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateRenderbuffers)(int n, mygl::renderbuffer * renderbuffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateSamplers)(int n, mygl::sampler * samplers) MYGL_NOEXCEPT;
extern mygl::shader(APIENTRY*glCreateShader)(GLenum type) MYGL_NOEXCEPT;
extern mygl::shader_program(APIENTRY*glCreateShaderProgramv)(GLenum type, int count, const char *const* strings) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateStatesNV)(int n, mygl::state * states) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateTextures)(GLenum target, int n, mygl::texture * textures) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateTransformFeedbacks)(int n, mygl::transform_feedback * ids) MYGL_NOEXCEPT;
extern void (APIENTRY*glCreateVertexArrays)(int n, mygl::vertex_array * arrays) MYGL_NOEXCEPT;
extern void (APIENTRY*glCullFace)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glDebugMessageCallback)(GLDEBUGPROC callback, const void * userParam) MYGL_NOEXCEPT;
extern void (APIENTRY*glDebugMessageCallbackKHR)(GLDEBUGPROCKHR callback, const void * userParam) MYGL_NOEXCEPT;
extern void (APIENTRY*glDebugMessageControl)(GLenum source, GLenum type, GLenum severity, int count, const unsigned int * ids, bool enabled) MYGL_NOEXCEPT;
extern void (APIENTRY*glDebugMessageControlKHR)(GLenum source, GLenum type, GLenum severity, int count, const unsigned int * ids, bool enabled) MYGL_NOEXCEPT;
extern void (APIENTRY*glDebugMessageInsert)(GLenum source, GLenum type, unsigned int id, GLenum severity, int length, const char * buf) MYGL_NOEXCEPT;
extern void (APIENTRY*glDebugMessageInsertKHR)(GLenum source, GLenum type, unsigned int id, GLenum severity, int length, const char * buf) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteBuffers)(int n, const mygl::buffer * buffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteCommandListsNV)(int n, const mygl::command_list * lists) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteFramebuffers)(int n, const mygl::framebuffer * framebuffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeletePathsNV)(mygl::path path, int range) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteProgram)(mygl::shader_program program) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteProgramPipelines)(int n, const mygl::pipeline * pipelines) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteQueries)(int n, const mygl::query * ids) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteRenderbuffers)(int n, const mygl::renderbuffer * renderbuffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteSamplers)(int count, const mygl::sampler * samplers) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteShader)(mygl::shader shader) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteStatesNV)(int n, const mygl::state * states) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteSync)(GLsync sync) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteTextures)(int n, const mygl::texture * textures) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteTransformFeedbacks)(int n, const mygl::transform_feedback * ids) MYGL_NOEXCEPT;
extern void (APIENTRY*glDeleteVertexArrays)(int n, const mygl::vertex_array * arrays) MYGL_NOEXCEPT;
extern void (APIENTRY*glDepthFunc)(GLenum func) MYGL_NOEXCEPT;
extern void (APIENTRY*glDepthMask)(bool flag) MYGL_NOEXCEPT;
extern void (APIENTRY*glDepthRange)(double n, double f) MYGL_NOEXCEPT;
extern void (APIENTRY*glDepthRangeArrayv)(unsigned int first, int count, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glDepthRangeIndexed)(unsigned int index, double n, double f) MYGL_NOEXCEPT;
extern void (APIENTRY*glDepthRangef)(float n, float f) MYGL_NOEXCEPT;
extern void (APIENTRY*glDetachShader)(mygl::shader_program program, mygl::shader shader) MYGL_NOEXCEPT;
extern void (APIENTRY*glDisable)(GLenum cap) MYGL_NOEXCEPT;
extern void (APIENTRY*glDisableClientState)(GLenum array) MYGL_NOEXCEPT;
extern void (APIENTRY*glDisableVertexArrayAttrib)(mygl::vertex_array vaobj, unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glDisableVertexAttribArray)(unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glDisablei)(GLenum target, unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glDispatchCompute)(unsigned int num_groups_x, unsigned int num_groups_y, unsigned int num_groups_z) MYGL_NOEXCEPT;
extern void (APIENTRY*glDispatchComputeGroupSizeARB)(unsigned int num_groups_x, unsigned int num_groups_y, unsigned int num_groups_z, unsigned int group_size_x, unsigned int group_size_y, unsigned int group_size_z) MYGL_NOEXCEPT;
extern void (APIENTRY*glDispatchComputeIndirect)(GLintptr indirect) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawArrays)(GLenum mode, int first, int count) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawArraysIndirect)(GLenum mode, const void * indirect) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawArraysInstanced)(GLenum mode, int first, int count, int instancecount) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawArraysInstancedBaseInstance)(GLenum mode, int first, int count, int instancecount, unsigned int baseinstance) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawBuffer)(GLenum buf) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawBuffers)(int n, const GLenum * bufs) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawCommandsAddressNV)(GLenum primitiveMode, const uint64_t * indirects, const int * sizes, unsigned int count) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawCommandsNV)(GLenum primitiveMode, mygl::buffer buffer, const GLintptr * indirects, const int * sizes, unsigned int count) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawCommandsStatesAddressNV)(const uint64_t * indirects, const int * sizes, const mygl::state * states, const mygl::framebuffer * fbos, unsigned int count) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawCommandsStatesNV)(mygl::buffer buffer, const GLintptr * indirects, const int * sizes, const mygl::state * states, const mygl::framebuffer * fbos, unsigned int count) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElements)(GLenum mode, int count, GLenum type, const void * indices) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElementsBaseVertex)(GLenum mode, int count, GLenum type, const void * indices, int basevertex) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElementsInstanced)(GLenum mode, int count, GLenum type, const void * indices, int instancecount) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElementsInstancedBaseInstance)(GLenum mode, int count, GLenum type, const void * indices, int instancecount, unsigned int baseinstance) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElementsInstancedBaseVertex)(GLenum mode, int count, GLenum type, const void * indices, int instancecount, int basevertex) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, int count, GLenum type, const void * indices, int instancecount, int basevertex, unsigned int baseinstance) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawRangeElements)(GLenum mode, unsigned int start, unsigned int end, int count, GLenum type, const void * indices) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawRangeElementsBaseVertex)(GLenum mode, unsigned int start, unsigned int end, int count, GLenum type, const void * indices, int basevertex) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawTextureNV)(mygl::texture texture, mygl::sampler sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawTransformFeedback)(GLenum mode, mygl::transform_feedback id) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawTransformFeedbackInstanced)(GLenum mode, mygl::transform_feedback id, int instancecount) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawTransformFeedbackStream)(GLenum mode, mygl::transform_feedback id, unsigned int stream) MYGL_NOEXCEPT;
extern void (APIENTRY*glDrawTransformFeedbackStreamInstanced)(GLenum mode, mygl::transform_feedback id, unsigned int stream, int instancecount) MYGL_NOEXCEPT;
extern void (APIENTRY*glEdgeFlagFormatNV)(int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glEnable)(GLenum cap) MYGL_NOEXCEPT;
extern void (APIENTRY*glEnableClientState)(GLenum array) MYGL_NOEXCEPT;
extern void (APIENTRY*glEnableVertexArrayAttrib)(mygl::vertex_array vaobj, unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glEnableVertexAttribArray)(unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glEnablei)(GLenum target, unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glEndConditionalRender)() MYGL_NOEXCEPT;
extern void (APIENTRY*glEndQuery)(GLenum target) MYGL_NOEXCEPT;
extern void (APIENTRY*glEndQueryIndexed)(GLenum target, unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glEndTransformFeedback)() MYGL_NOEXCEPT;
extern GLsync(APIENTRY*glFenceSync)(GLenum condition, GLbitfield flags) MYGL_NOEXCEPT;
extern void (APIENTRY*glFinish)() MYGL_NOEXCEPT;
extern void (APIENTRY*glFlush)() MYGL_NOEXCEPT;
extern void (APIENTRY*glFlushMappedBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length) MYGL_NOEXCEPT;
extern void (APIENTRY*glFlushMappedNamedBufferRange)(mygl::buffer buffer, GLintptr offset, GLsizeiptr length) MYGL_NOEXCEPT;
extern void (APIENTRY*glFogCoordFormatNV)(GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferParameteri)(GLenum target, GLenum pname, int param) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferRenderbuffer)(GLenum target, GLenum attachment, GLenum renderbuffertarget, mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferTexture)(GLenum target, GLenum attachment, mygl::texture texture, int level) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferTexture1D)(GLenum target, GLenum attachment, GLenum textarget, mygl::texture texture, int level) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferTexture2D)(GLenum target, GLenum attachment, GLenum textarget, mygl::texture texture, int level) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferTexture3D)(GLenum target, GLenum attachment, GLenum textarget, mygl::texture texture, int level, int zoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glFramebufferTextureLayer)(GLenum target, GLenum attachment, mygl::texture texture, int level, int layer) MYGL_NOEXCEPT;
extern void (APIENTRY*glFrontFace)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenBuffers)(int n, mygl::buffer * buffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenFramebuffers)(int n, mygl::framebuffer * framebuffers) MYGL_NOEXCEPT;
extern mygl::path(APIENTRY*glGenPathsNV)(int range) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenProgramPipelines)(int n, mygl::pipeline * pipelines) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenQueries)(int n, mygl::query * ids) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenRenderbuffers)(int n, mygl::renderbuffer * renderbuffers) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenSamplers)(int count, mygl::sampler * samplers) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenTextures)(int n, mygl::texture * textures) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenTransformFeedbacks)(int n, mygl::transform_feedback * ids) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenVertexArrays)(int n, mygl::vertex_array * arrays) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenerateMipmap)(GLenum target) MYGL_NOEXCEPT;
extern void (APIENTRY*glGenerateTextureMipmap)(mygl::texture texture) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveAtomicCounterBufferiv)(mygl::shader_program program, unsigned int bufferIndex, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveAttrib)(mygl::shader_program program, unsigned int index, int bufSize, int * length, int * size, GLenum * type, char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveSubroutineName)(mygl::shader_program program, GLenum shadertype, unsigned int index, int bufsize, int * length, char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveSubroutineUniformName)(mygl::shader_program program, GLenum shadertype, unsigned int index, int bufsize, int * length, char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveSubroutineUniformiv)(mygl::shader_program program, GLenum shadertype, unsigned int index, GLenum pname, int * values) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveUniform)(mygl::shader_program program, unsigned int index, int bufSize, int * length, int * size, GLenum * type, char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveUniformBlockName)(mygl::shader_program program, unsigned int uniformBlockIndex, int bufSize, int * length, char * uniformBlockName) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveUniformBlockiv)(mygl::shader_program program, unsigned int uniformBlockIndex, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveUniformName)(mygl::shader_program program, unsigned int uniformIndex, int bufSize, int * length, char * uniformName) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetActiveUniformsiv)(mygl::shader_program program, int uniformCount, const unsigned int * uniformIndices, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetAttachedShaders)(mygl::shader_program program, int maxCount, int * count, mygl::shader * shaders) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetAttribLocation)(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBooleani_v)(GLenum target, unsigned int index, bool * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBooleanv)(GLenum pname, bool * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBufferParameteri64v)(GLenum target, GLenum pname, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBufferParameteriv)(GLenum target, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBufferParameterui64vNV)(GLenum target, GLenum pname, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBufferPointerv)(GLenum target, GLenum pname, void ** params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetBufferSubData)(GLenum target, GLintptr offset, GLsizeiptr size, void * data) MYGL_NOEXCEPT;
extern unsigned int(APIENTRY*glGetCommandHeaderNV)(GLenum tokenID, unsigned int size) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetCompressedTexImage)(GLenum target, int level, void * img) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetCompressedTextureImage)(mygl::texture texture, int level, int bufSize, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetCompressedTextureSubImage)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, void * pixels) MYGL_NOEXCEPT;
extern unsigned int(APIENTRY*glGetDebugMessageLog)(unsigned int count, int bufSize, GLenum * sources, GLenum * types, unsigned int * ids, GLenum * severities, int * lengths, char * messageLog) MYGL_NOEXCEPT;
extern unsigned int(APIENTRY*glGetDebugMessageLogKHR)(unsigned int count, int bufSize, GLenum * sources, GLenum * types, unsigned int * ids, GLenum * severities, int * lengths, char * messageLog) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetDoublei_v)(GLenum target, unsigned int index, double * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetDoublev)(GLenum pname, double * data) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glGetError)() MYGL_NOEXCEPT;
extern void (APIENTRY*glGetFloati_v)(GLenum target, unsigned int index, float * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetFloatv)(GLenum pname, float * data) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetFragDataIndex)(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetFragDataLocation)(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetFramebufferAttachmentParameteriv)(GLenum target, GLenum attachment, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetFramebufferParameteriv)(GLenum target, GLenum pname, int * params) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glGetGraphicsResetStatus)() MYGL_NOEXCEPT;
extern uint64_t(APIENTRY*glGetImageHandleARB)(mygl::texture texture, int level, bool layered, int layer, GLenum format) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetInteger64i_v)(GLenum target, unsigned int index, int64_t * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetInteger64v)(GLenum pname, int64_t * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetIntegeri_v)(GLenum target, unsigned int index, int * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetIntegerui64i_vNV)(GLenum value, unsigned int index, uint64_t * result) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetIntegerui64vNV)(GLenum value, uint64_t * result) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetIntegerv)(GLenum pname, int * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, int bufSize, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, int bufSize, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetMultisamplefv)(GLenum pname, unsigned int index, float * val) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedBufferParameteri64v)(mygl::buffer buffer, GLenum pname, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedBufferParameteriv)(mygl::buffer buffer, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedBufferParameterui64vNV)(mygl::buffer buffer, GLenum pname, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedBufferPointerv)(mygl::buffer buffer, GLenum pname, void ** params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedBufferSubData)(mygl::buffer buffer, GLintptr offset, GLsizeiptr size, void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedFramebufferAttachmentParameteriv)(mygl::framebuffer framebuffer, GLenum attachment, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedFramebufferParameteriv)(mygl::framebuffer framebuffer, GLenum pname, int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetNamedRenderbufferParameteriv)(mygl::renderbuffer renderbuffer, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetObjectLabel)(GLenum identifier, unsigned int name, int bufSize, int * length, char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetObjectLabelKHR)(GLenum identifier, unsigned int name, int bufSize, int * length, char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetObjectPtrLabel)(const void * ptr, int bufSize, int * length, char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetObjectPtrLabelKHR)(const void * ptr, int bufSize, int * length, char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathColorGenfvNV)(GLenum color, GLenum pname, float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathColorGenivNV)(GLenum color, GLenum pname, int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathCommandsNV)(mygl::path path, unsigned char * commands) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathCoordsNV)(mygl::path path, float * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathDashArrayNV)(mygl::path path, float * dashArray) MYGL_NOEXCEPT;
extern float(APIENTRY*glGetPathLengthNV)(mygl::path path, int startSegment, int numSegments) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathMetricRangeNV)(GLbitfield metricQueryMask, mygl::path firstPathName, int numPaths, int stride, float * metrics) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathMetricsNV)(GLbitfield metricQueryMask, int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, int stride, float * metrics) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathParameterfvNV)(mygl::path path, GLenum pname, float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathParameterivNV)(mygl::path path, GLenum pname, int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathSpacingNV)(GLenum pathListMode, int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, float advanceScale, float kerningScale, GLenum transformType, float * returnedSpacing) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathTexGenfvNV)(GLenum texCoordSet, GLenum pname, float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPathTexGenivNV)(GLenum texCoordSet, GLenum pname, int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPointerv)(GLenum pname, void ** params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetPointervKHR)(GLenum pname, void ** params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramBinary)(mygl::shader_program program, int bufSize, int * length, GLenum * binaryFormat, void * binary) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramInfoLog)(mygl::shader_program program, int bufSize, int * length, char * infoLog) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramInterfaceiv)(mygl::shader_program program, GLenum programInterface, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramPipelineInfoLog)(mygl::pipeline pipeline, int bufSize, int * length, char * infoLog) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramPipelineiv)(mygl::pipeline pipeline, GLenum pname, int * params) MYGL_NOEXCEPT;
extern unsigned int(APIENTRY*glGetProgramResourceIndex)(mygl::shader_program program, GLenum programInterface, const char * name) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetProgramResourceLocation)(mygl::shader_program program, GLenum programInterface, const char * name) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetProgramResourceLocationIndex)(mygl::shader_program program, GLenum programInterface, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramResourceName)(mygl::shader_program program, GLenum programInterface, unsigned int index, int bufSize, int * length, char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramResourcefvNV)(mygl::shader_program program, GLenum programInterface, unsigned int index, int propCount, const GLenum * props, int bufSize, int * length, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramResourceiv)(mygl::shader_program program, GLenum programInterface, unsigned int index, int propCount, const GLenum * props, int bufSize, int * length, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramStageiv)(mygl::shader_program program, GLenum shadertype, GLenum pname, int * values) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramSubroutineParameteruivNV)(GLenum target, unsigned int index, unsigned int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetProgramiv)(mygl::shader_program program, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryBufferObjecti64v)(mygl::query id, mygl::buffer buffer, GLenum pname, GLintptr offset) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryBufferObjectiv)(mygl::query id, mygl::buffer buffer, GLenum pname, GLintptr offset) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryBufferObjectui64v)(mygl::query id, mygl::buffer buffer, GLenum pname, GLintptr offset) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryBufferObjectuiv)(mygl::query id, mygl::buffer buffer, GLenum pname, GLintptr offset) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryIndexediv)(GLenum target, unsigned int index, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryObjecti64v)(mygl::query id, GLenum pname, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryObjectiv)(mygl::query id, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryObjectui64v)(mygl::query id, GLenum pname, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryObjectuiv)(mygl::query id, GLenum pname, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetQueryiv)(GLenum target, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetRenderbufferParameteriv)(GLenum target, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetSamplerParameterIiv)(mygl::sampler sampler, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetSamplerParameterIuiv)(mygl::sampler sampler, GLenum pname, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetSamplerParameterfv)(mygl::sampler sampler, GLenum pname, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetSamplerParameteriv)(mygl::sampler sampler, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetShaderInfoLog)(mygl::shader shader, int bufSize, int * length, char * infoLog) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, int * range, int * precision) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetShaderSource)(mygl::shader shader, int bufSize, int * length, char * source) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetShaderiv)(mygl::shader shader, GLenum pname, int * params) MYGL_NOEXCEPT;
extern unsigned short(APIENTRY*glGetStageIndexNV)(GLenum shadertype) MYGL_NOEXCEPT;
extern const unsigned char *(APIENTRY*glGetString)(GLenum name) MYGL_NOEXCEPT;
extern const unsigned char *(APIENTRY*glGetStringi)(GLenum name, unsigned int index) MYGL_NOEXCEPT;
extern unsigned int(APIENTRY*glGetSubroutineIndex)(mygl::shader_program program, GLenum shadertype, const char * name) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetSubroutineUniformLocation)(mygl::shader_program program, GLenum shadertype, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetSynciv)(GLsync sync, GLenum pname, int bufSize, int * length, int * values) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexImage)(GLenum target, int level, GLenum format, GLenum type, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexLevelParameterfv)(GLenum target, int level, GLenum pname, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexLevelParameteriv)(GLenum target, int level, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexParameterIiv)(GLenum target, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexParameterIuiv)(GLenum target, GLenum pname, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexParameterfv)(GLenum target, GLenum pname, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTexParameteriv)(GLenum target, GLenum pname, int * params) MYGL_NOEXCEPT;
extern uint64_t(APIENTRY*glGetTextureHandleARB)(mygl::texture texture) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureImage)(mygl::texture texture, int level, GLenum format, GLenum type, int bufSize, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureLevelParameterfv)(mygl::texture texture, int level, GLenum pname, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureLevelParameteriv)(mygl::texture texture, int level, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureParameterIiv)(mygl::texture texture, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureParameterIuiv)(mygl::texture texture, GLenum pname, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureParameterfv)(mygl::texture texture, GLenum pname, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureParameteriv)(mygl::texture texture, GLenum pname, int * params) MYGL_NOEXCEPT;
extern uint64_t(APIENTRY*glGetTextureSamplerHandleARB)(mygl::texture texture, mygl::sampler sampler) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTextureSubImage)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, GLenum type, int bufSize, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTransformFeedbackVarying)(mygl::shader_program program, unsigned int index, int bufSize, int * length, int * size, GLenum * type, char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTransformFeedbacki64_v)(mygl::transform_feedback xfb, GLenum pname, unsigned int index, int64_t * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTransformFeedbacki_v)(mygl::transform_feedback xfb, GLenum pname, unsigned int index, int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetTransformFeedbackiv)(mygl::transform_feedback xfb, GLenum pname, int * param) MYGL_NOEXCEPT;
extern unsigned int(APIENTRY*glGetUniformBlockIndex)(mygl::shader_program program, const char * uniformBlockName) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformIndices)(mygl::shader_program program, int uniformCount, const char *const* uniformNames, unsigned int * uniformIndices) MYGL_NOEXCEPT;
extern int(APIENTRY*glGetUniformLocation)(mygl::shader_program program, const char * name) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformSubroutineuiv)(GLenum shadertype, int location, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformdv)(mygl::shader_program program, int location, double * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformfv)(mygl::shader_program program, int location, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformi64vARB)(mygl::shader_program program, int location, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformi64vNV)(mygl::shader_program program, int location, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformiv)(mygl::shader_program program, int location, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformui64vARB)(mygl::shader_program program, int location, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformui64vNV)(mygl::shader_program program, int location, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetUniformuiv)(mygl::shader_program program, int location, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexArrayIndexed64iv)(mygl::vertex_array vaobj, unsigned int index, GLenum pname, int64_t * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexArrayIndexediv)(mygl::vertex_array vaobj, unsigned int index, GLenum pname, int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexArrayiv)(mygl::vertex_array vaobj, GLenum pname, int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribIiv)(unsigned int index, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribIuiv)(unsigned int index, GLenum pname, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribLdv)(unsigned int index, GLenum pname, double * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribLui64vARB)(unsigned int index, GLenum pname, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribPointerv)(unsigned int index, GLenum pname, void ** pointer) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribdv)(unsigned int index, GLenum pname, double * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribfv)(unsigned int index, GLenum pname, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetVertexAttribiv)(unsigned int index, GLenum pname, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnCompressedTexImage)(GLenum target, int lod, int bufSize, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnTexImage)(GLenum target, int level, GLenum format, GLenum type, int bufSize, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnUniformdv)(mygl::shader_program program, int location, int bufSize, double * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnUniformfv)(mygl::shader_program program, int location, int bufSize, float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnUniformi64vARB)(mygl::shader_program program, int location, int bufSize, int64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnUniformiv)(mygl::shader_program program, int location, int bufSize, int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnUniformui64vARB)(mygl::shader_program program, int location, int bufSize, uint64_t * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glGetnUniformuiv)(mygl::shader_program program, int location, int bufSize, unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glHint)(GLenum target, GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glIndexFormatNV)(GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glInterpolatePathsNV)(mygl::path resultPath, unsigned int pathA, unsigned int pathB, float weight) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateBufferData)(mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateBufferSubData)(mygl::buffer buffer, GLintptr offset, GLsizeiptr length) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateFramebuffer)(GLenum target, int numAttachments, const GLenum * attachments) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateNamedFramebufferData)(mygl::framebuffer framebuffer, int numAttachments, const GLenum * attachments) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateNamedFramebufferSubData)(mygl::framebuffer framebuffer, int numAttachments, const GLenum * attachments, int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateSubFramebuffer)(GLenum target, int numAttachments, const GLenum * attachments, int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateTexImage)(mygl::texture texture, int level) MYGL_NOEXCEPT;
extern void (APIENTRY*glInvalidateTexSubImage)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsBuffer)(mygl::buffer buffer) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsBufferResidentNV)(GLenum target) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsCommandListNV)(mygl::command_list list) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsEnabled)(GLenum cap) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsEnabledi)(GLenum target, unsigned int index) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsFramebuffer)(mygl::framebuffer framebuffer) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsImageHandleResidentARB)(uint64_t handle) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsNamedBufferResidentNV)(mygl::buffer buffer) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsPathNV)(mygl::path path) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsPointInFillPathNV)(mygl::path path, unsigned int mask, float x, float y) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsPointInStrokePathNV)(mygl::path path, float x, float y) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsProgram)(mygl::shader_program program) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsProgramPipeline)(mygl::pipeline pipeline) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsQuery)(mygl::query id) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsRenderbuffer)(mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsSampler)(mygl::sampler sampler) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsShader)(mygl::shader shader) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsStateNV)(mygl::state state) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsSync)(GLsync sync) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsTexture)(mygl::texture texture) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsTextureHandleResidentARB)(uint64_t handle) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsTransformFeedback)(mygl::transform_feedback id) MYGL_NOEXCEPT;
extern bool(APIENTRY*glIsVertexArray)(mygl::vertex_array array) MYGL_NOEXCEPT;
extern void (APIENTRY*glLineWidth)(float width) MYGL_NOEXCEPT;
extern void (APIENTRY*glLinkProgram)(mygl::shader_program program) MYGL_NOEXCEPT;
extern void (APIENTRY*glListDrawCommandsStatesClientNV)(mygl::command_list list, unsigned int segment, const void ** indirects, const int * sizes, const mygl::state * states, const mygl::framebuffer * fbos, unsigned int count) MYGL_NOEXCEPT;
extern void (APIENTRY*glLogicOp)(GLenum opcode) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeBufferNonResidentNV)(GLenum target) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeBufferResidentNV)(GLenum target, GLenum access) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeImageHandleNonResidentARB)(uint64_t handle) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeImageHandleResidentARB)(uint64_t handle, GLenum access) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeNamedBufferNonResidentNV)(mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeNamedBufferResidentNV)(mygl::buffer buffer, GLenum access) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeTextureHandleNonResidentARB)(uint64_t handle) MYGL_NOEXCEPT;
extern void (APIENTRY*glMakeTextureHandleResidentARB)(uint64_t handle) MYGL_NOEXCEPT;
extern void *(APIENTRY*glMapBuffer)(GLenum target, GLenum access) MYGL_NOEXCEPT;
extern void *(APIENTRY*glMapBufferRange)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) MYGL_NOEXCEPT;
extern void *(APIENTRY*glMapNamedBuffer)(mygl::buffer buffer, GLenum access) MYGL_NOEXCEPT;
extern void *(APIENTRY*glMapNamedBufferRange)(mygl::buffer buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixFrustumEXT)(GLenum mode, double left, double right, double bottom, double top, double zNear, double zFar) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoad3x2fNV)(GLenum matrixMode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoad3x3fNV)(GLenum matrixMode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoadIdentityEXT)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoadTranspose3x3fNV)(GLenum matrixMode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoadTransposedEXT)(GLenum mode, const double * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoadTransposefEXT)(GLenum mode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoaddEXT)(GLenum mode, const double * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixLoadfEXT)(GLenum mode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMult3x2fNV)(GLenum matrixMode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMult3x3fNV)(GLenum matrixMode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMultTranspose3x3fNV)(GLenum matrixMode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMultTransposedEXT)(GLenum mode, const double * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMultTransposefEXT)(GLenum mode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMultdEXT)(GLenum mode, const double * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixMultfEXT)(GLenum mode, const float * m) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixOrthoEXT)(GLenum mode, double left, double right, double bottom, double top, double zNear, double zFar) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixPopEXT)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixPushEXT)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixRotatedEXT)(GLenum mode, double angle, double x, double y, double z) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixRotatefEXT)(GLenum mode, float angle, float x, float y, float z) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixScaledEXT)(GLenum mode, double x, double y, double z) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixScalefEXT)(GLenum mode, float x, float y, float z) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixTranslatedEXT)(GLenum mode, double x, double y, double z) MYGL_NOEXCEPT;
extern void (APIENTRY*glMatrixTranslatefEXT)(GLenum mode, float x, float y, float z) MYGL_NOEXCEPT;
extern void (APIENTRY*glMemoryBarrier)(GLbitfield barriers) MYGL_NOEXCEPT;
extern void (APIENTRY*glMemoryBarrierByRegion)(GLbitfield barriers) MYGL_NOEXCEPT;
extern void (APIENTRY*glMinSampleShading)(float value) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawArrays)(GLenum mode, const int * first, const int * count, int drawcount) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawArraysIndirect)(GLenum mode, const void * indirect, int drawcount, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawArraysIndirectBindlessCountNV)(GLenum mode, const void * indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawArraysIndirectBindlessNV)(GLenum mode, const void * indirect, int drawCount, int stride, int vertexBufferCount) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawArraysIndirectCount)(GLenum mode, const void * indirect, GLintptr drawcount, int maxdrawcount, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawElements)(GLenum mode, const int * count, GLenum type, const void *const* indices, int drawcount) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawElementsBaseVertex)(GLenum mode, const int * count, GLenum type, const void *const* indices, int drawcount, const int * basevertex) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect, int drawcount, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawElementsIndirectBindlessCountNV)(GLenum mode, GLenum type, const void * indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawElementsIndirectBindlessNV)(GLenum mode, GLenum type, const void * indirect, int drawCount, int stride, int vertexBufferCount) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiDrawElementsIndirectCount)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, int maxdrawcount, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP1ui)(mygl::texture texture, GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP1uiv)(mygl::texture texture, GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP2ui)(mygl::texture texture, GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP2uiv)(mygl::texture texture, GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP3ui)(mygl::texture texture, GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP3uiv)(mygl::texture texture, GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP4ui)(mygl::texture texture, GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glMultiTexCoordP4uiv)(mygl::texture texture, GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedBufferData)(mygl::buffer buffer, GLsizeiptr size, const void * data, GLenum usage) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedBufferStorage)(mygl::buffer buffer, GLsizeiptr size, const void * data, GLbitfield flags) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedBufferSubData)(mygl::buffer buffer, GLintptr offset, GLsizeiptr size, const void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferDrawBuffer)(mygl::framebuffer framebuffer, GLenum buf) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferDrawBuffers)(mygl::framebuffer framebuffer, int n, const GLenum * bufs) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferParameteri)(mygl::framebuffer framebuffer, GLenum pname, int param) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferReadBuffer)(mygl::framebuffer framebuffer, GLenum src) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferRenderbuffer)(mygl::framebuffer framebuffer, GLenum attachment, GLenum renderbuffertarget, mygl::renderbuffer renderbuffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferTexture)(mygl::framebuffer framebuffer, GLenum attachment, mygl::texture texture, int level) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedFramebufferTextureLayer)(mygl::framebuffer framebuffer, GLenum attachment, mygl::texture texture, int level, int layer) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedRenderbufferStorage)(mygl::renderbuffer renderbuffer, GLenum internalformat, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glNamedRenderbufferStorageMultisample)(mygl::renderbuffer renderbuffer, int samples, GLenum internalformat, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glNormalFormatNV)(GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glNormalP3ui)(GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glNormalP3uiv)(GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glObjectLabel)(GLenum identifier, unsigned int name, int length, const char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glObjectLabelKHR)(GLenum identifier, unsigned int name, int length, const char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glObjectPtrLabel)(const void * ptr, int length, const char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glObjectPtrLabelKHR)(const void * ptr, int length, const char * label) MYGL_NOEXCEPT;
extern void (APIENTRY*glPatchParameterfv)(GLenum pname, const float * values) MYGL_NOEXCEPT;
extern void (APIENTRY*glPatchParameteri)(GLenum pname, int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathColorGenNV)(GLenum color, GLenum genMode, GLenum colorFormat, const float * coeffs) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathCommandsNV)(mygl::path path, int numCommands, const unsigned char * commands, int numCoords, GLenum coordType, const void * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathCoordsNV)(mygl::path path, int numCoords, GLenum coordType, const void * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathCoverDepthFuncNV)(GLenum func) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathDashArrayNV)(mygl::path path, int dashCount, const float * dashArray) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathFogGenNV)(GLenum genMode) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glPathGlyphIndexArrayNV)(mygl::path firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, unsigned int firstGlyphIndex, int numGlyphs, unsigned int pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glPathGlyphIndexRangeNV)(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, unsigned int pathParameterTemplate, float emScale, unsigned int baseAndCount[2]) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathGlyphRangeNV)(mygl::path firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, unsigned int firstGlyph, int numGlyphs, GLenum handleMissingGlyphs, unsigned int pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathGlyphsNV)(mygl::path firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, int numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, unsigned int pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
extern GLenum(APIENTRY*glPathMemoryGlyphIndexArrayNV)(mygl::path firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, int faceIndex, unsigned int firstGlyphIndex, int numGlyphs, unsigned int pathParameterTemplate, float emScale) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathParameterfNV)(mygl::path path, GLenum pname, float value) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathParameterfvNV)(mygl::path path, GLenum pname, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathParameteriNV)(mygl::path path, GLenum pname, int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathParameterivNV)(mygl::path path, GLenum pname, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathStencilDepthOffsetNV)(float factor, float units) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathStencilFuncNV)(GLenum func, int ref, unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathStringNV)(mygl::path path, GLenum format, int length, const void * pathString) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathSubCommandsNV)(mygl::path path, int commandStart, int commandsToDelete, int numCommands, const unsigned char * commands, int numCoords, GLenum coordType, const void * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathSubCoordsNV)(mygl::path path, int coordStart, int numCoords, GLenum coordType, const void * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glPathTexGenNV)(GLenum texCoordSet, GLenum genMode, int components, const float * coeffs) MYGL_NOEXCEPT;
extern void (APIENTRY*glPauseTransformFeedback)() MYGL_NOEXCEPT;
extern void (APIENTRY*glPixelStoref)(GLenum pname, float param) MYGL_NOEXCEPT;
extern void (APIENTRY*glPixelStorei)(GLenum pname, int param) MYGL_NOEXCEPT;
extern bool(APIENTRY*glPointAlongPathNV)(mygl::path path, int startSegment, int numSegments, float distance, float * x, float * y, float * tangentX, float * tangentY) MYGL_NOEXCEPT;
extern void (APIENTRY*glPointParameterf)(GLenum pname, float param) MYGL_NOEXCEPT;
extern void (APIENTRY*glPointParameterfv)(GLenum pname, const float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glPointParameteri)(GLenum pname, int param) MYGL_NOEXCEPT;
extern void (APIENTRY*glPointParameteriv)(GLenum pname, const int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glPointSize)(float size) MYGL_NOEXCEPT;
extern void (APIENTRY*glPolygonMode)(GLenum face, GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glPolygonOffset)(float factor, float units) MYGL_NOEXCEPT;
extern void (APIENTRY*glPolygonOffsetClamp)(float factor, float units, float clamp) MYGL_NOEXCEPT;
extern void (APIENTRY*glPopDebugGroup)() MYGL_NOEXCEPT;
extern void (APIENTRY*glPopDebugGroupKHR)() MYGL_NOEXCEPT;
extern void (APIENTRY*glPrimitiveRestartIndex)(unsigned int index) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramBinary)(mygl::shader_program program, GLenum binaryFormat, const void * binary, int length) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramParameteri)(mygl::shader_program program, GLenum pname, int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramPathFragmentInputGenNV)(mygl::shader_program program, int location, GLenum genMode, int components, const float * coeffs) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramSubroutineParametersuivNV)(GLenum target, int count, const unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1d)(mygl::shader_program program, int location, double v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1dv)(mygl::shader_program program, int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1f)(mygl::shader_program program, int location, float v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1fv)(mygl::shader_program program, int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1i)(mygl::shader_program program, int location, int v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1i64ARB)(mygl::shader_program program, int location, int64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1i64NV)(mygl::shader_program program, int location, int64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1i64vARB)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1i64vNV)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1iv)(mygl::shader_program program, int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1ui)(mygl::shader_program program, int location, unsigned int v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1ui64ARB)(mygl::shader_program program, int location, uint64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1ui64NV)(mygl::shader_program program, int location, uint64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1ui64vARB)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1ui64vNV)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform1uiv)(mygl::shader_program program, int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2d)(mygl::shader_program program, int location, double v0, double v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2dv)(mygl::shader_program program, int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2f)(mygl::shader_program program, int location, float v0, float v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2fv)(mygl::shader_program program, int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2i)(mygl::shader_program program, int location, int v0, int v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2i64ARB)(mygl::shader_program program, int location, int64_t x, int64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2i64NV)(mygl::shader_program program, int location, int64_t x, int64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2i64vARB)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2i64vNV)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2iv)(mygl::shader_program program, int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2ui)(mygl::shader_program program, int location, unsigned int v0, unsigned int v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2ui64ARB)(mygl::shader_program program, int location, uint64_t x, uint64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2ui64NV)(mygl::shader_program program, int location, uint64_t x, uint64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2ui64vARB)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2ui64vNV)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform2uiv)(mygl::shader_program program, int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3d)(mygl::shader_program program, int location, double v0, double v1, double v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3dv)(mygl::shader_program program, int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3f)(mygl::shader_program program, int location, float v0, float v1, float v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3fv)(mygl::shader_program program, int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3i)(mygl::shader_program program, int location, int v0, int v1, int v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3i64ARB)(mygl::shader_program program, int location, int64_t x, int64_t y, int64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3i64NV)(mygl::shader_program program, int location, int64_t x, int64_t y, int64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3i64vARB)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3i64vNV)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3iv)(mygl::shader_program program, int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3ui)(mygl::shader_program program, int location, unsigned int v0, unsigned int v1, unsigned int v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3ui64ARB)(mygl::shader_program program, int location, uint64_t x, uint64_t y, uint64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3ui64NV)(mygl::shader_program program, int location, uint64_t x, uint64_t y, uint64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3ui64vARB)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3ui64vNV)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform3uiv)(mygl::shader_program program, int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4d)(mygl::shader_program program, int location, double v0, double v1, double v2, double v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4dv)(mygl::shader_program program, int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4f)(mygl::shader_program program, int location, float v0, float v1, float v2, float v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4fv)(mygl::shader_program program, int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4i)(mygl::shader_program program, int location, int v0, int v1, int v2, int v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4i64ARB)(mygl::shader_program program, int location, int64_t x, int64_t y, int64_t z, int64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4i64NV)(mygl::shader_program program, int location, int64_t x, int64_t y, int64_t z, int64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4i64vARB)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4i64vNV)(mygl::shader_program program, int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4iv)(mygl::shader_program program, int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4ui)(mygl::shader_program program, int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4ui64ARB)(mygl::shader_program program, int location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4ui64NV)(mygl::shader_program program, int location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4ui64vARB)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4ui64vNV)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniform4uiv)(mygl::shader_program program, int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformHandleui64ARB)(mygl::shader_program program, int location, uint64_t value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformHandleui64vARB)(mygl::shader_program program, int location, int count, const uint64_t * values) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix2dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix2fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix2x3dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix2x3fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix2x4dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix2x4fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix3dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix3fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix3x2dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix3x2fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix3x4dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix3x4fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix4dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix4fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix4x2dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix4x2fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix4x3dv)(mygl::shader_program program, int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformMatrix4x3fv)(mygl::shader_program program, int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformui64NV)(mygl::shader_program program, int location, uint64_t value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProgramUniformui64vNV)(mygl::shader_program program, int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glProvokingVertex)(GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glPushDebugGroup)(GLenum source, unsigned int id, int length, const char * message) MYGL_NOEXCEPT;
extern void (APIENTRY*glPushDebugGroupKHR)(GLenum source, unsigned int id, int length, const char * message) MYGL_NOEXCEPT;
extern void (APIENTRY*glQueryCounter)(mygl::query id, GLenum target) MYGL_NOEXCEPT;
extern void (APIENTRY*glReadBuffer)(GLenum src) MYGL_NOEXCEPT;
extern void (APIENTRY*glReadPixels)(int x, int y, int width, int height, GLenum format, GLenum type, void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glReadnPixels)(int x, int y, int width, int height, GLenum format, GLenum type, int bufSize, void * data) MYGL_NOEXCEPT;
extern void (APIENTRY*glReleaseShaderCompiler)() MYGL_NOEXCEPT;
extern void (APIENTRY*glRenderbufferStorage)(GLenum target, GLenum internalformat, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glRenderbufferStorageMultisample)(GLenum target, int samples, GLenum internalformat, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glResumeTransformFeedback)() MYGL_NOEXCEPT;
extern void (APIENTRY*glSampleCoverage)(float value, bool invert) MYGL_NOEXCEPT;
extern void (APIENTRY*glSampleMaski)(unsigned int maskNumber, GLbitfield mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glSamplerParameterIiv)(mygl::sampler sampler, GLenum pname, const int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glSamplerParameterIuiv)(mygl::sampler sampler, GLenum pname, const unsigned int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glSamplerParameterf)(mygl::sampler sampler, GLenum pname, float param) MYGL_NOEXCEPT;
extern void (APIENTRY*glSamplerParameterfv)(mygl::sampler sampler, GLenum pname, const float * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glSamplerParameteri)(mygl::sampler sampler, GLenum pname, int param) MYGL_NOEXCEPT;
extern void (APIENTRY*glSamplerParameteriv)(mygl::sampler sampler, GLenum pname, const int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glScissor)(int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glScissorArrayv)(unsigned int first, int count, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glScissorIndexed)(unsigned int index, int left, int bottom, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glScissorIndexedv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glSecondaryColorFormatNV)(int size, GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glSecondaryColorP3ui)(GLenum type, unsigned int color) MYGL_NOEXCEPT;
extern void (APIENTRY*glSecondaryColorP3uiv)(GLenum type, const unsigned int * color) MYGL_NOEXCEPT;
extern void (APIENTRY*glShaderBinary)(int count, const mygl::shader * shaders, GLenum binaryformat, const void * binary, int length) MYGL_NOEXCEPT;
extern void (APIENTRY*glShaderSource)(mygl::shader shader, int count, const char *const* string, const int * length) MYGL_NOEXCEPT;
extern void (APIENTRY*glShaderStorageBlockBinding)(mygl::shader_program program, unsigned int storageBlockIndex, unsigned int storageBlockBinding) MYGL_NOEXCEPT;
extern void (APIENTRY*glSpecializeShader)(mygl::shader shader, const char * pEntryPoint, unsigned int numSpecializationConstants, const unsigned int * pConstantIndex, const unsigned int * pConstantValue) MYGL_NOEXCEPT;
extern void (APIENTRY*glStateCaptureNV)(mygl::state state, GLenum mode) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilFillPathInstancedNV)(int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, GLenum fillMode, unsigned int mask, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilFillPathNV)(mygl::path path, GLenum fillMode, unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilFunc)(GLenum func, int ref, unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilFuncSeparate)(GLenum face, GLenum func, int ref, unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilMask)(unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilMaskSeparate)(GLenum face, unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilOp)(GLenum fail, GLenum zfail, GLenum zpass) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilOpSeparate)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilStrokePathInstancedNV)(int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, int reference, unsigned int mask, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilStrokePathNV)(mygl::path path, int reference, unsigned int mask) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilThenCoverFillPathInstancedNV)(int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, GLenum fillMode, unsigned int mask, GLenum coverMode, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilThenCoverFillPathNV)(mygl::path path, GLenum fillMode, unsigned int mask, GLenum coverMode) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilThenCoverStrokePathInstancedNV)(int numPaths, GLenum pathNameType, const void * paths, mygl::path pathBase, int reference, unsigned int mask, GLenum coverMode, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glStencilThenCoverStrokePathNV)(mygl::path path, int reference, unsigned int mask, GLenum coverMode) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexBuffer)(GLenum target, GLenum internalformat, mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexBufferRange)(GLenum target, GLenum internalformat, mygl::buffer buffer, GLintptr offset, GLsizeiptr size) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordFormatNV)(int size, GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP1ui)(GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP1uiv)(GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP2ui)(GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP2uiv)(GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP3ui)(GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP3uiv)(GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP4ui)(GLenum type, unsigned int coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexCoordP4uiv)(GLenum type, const unsigned int * coords) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexImage1D)(GLenum target, int level, int internalformat, int width, int border, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexImage2D)(GLenum target, int level, int internalformat, int width, int height, int border, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexImage2DMultisample)(GLenum target, int samples, GLenum internalformat, int width, int height, bool fixedsamplelocations) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexImage3D)(GLenum target, int level, int internalformat, int width, int height, int depth, int border, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexImage3DMultisample)(GLenum target, int samples, GLenum internalformat, int width, int height, int depth, bool fixedsamplelocations) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexParameterIiv)(GLenum target, GLenum pname, const int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexParameterIuiv)(GLenum target, GLenum pname, const unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexParameterf)(GLenum target, GLenum pname, float param) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexParameterfv)(GLenum target, GLenum pname, const float * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexParameteri)(GLenum target, GLenum pname, int param) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexParameteriv)(GLenum target, GLenum pname, const int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexStorage1D)(GLenum target, int levels, GLenum internalformat, int width) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexStorage2D)(GLenum target, int levels, GLenum internalformat, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexStorage2DMultisample)(GLenum target, int samples, GLenum internalformat, int width, int height, bool fixedsamplelocations) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexStorage3D)(GLenum target, int levels, GLenum internalformat, int width, int height, int depth) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexStorage3DMultisample)(GLenum target, int samples, GLenum internalformat, int width, int height, int depth, bool fixedsamplelocations) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexSubImage1D)(GLenum target, int level, int xoffset, int width, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexSubImage2D)(GLenum target, int level, int xoffset, int yoffset, int width, int height, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTexSubImage3D)(GLenum target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureBarrier)() MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureBuffer)(mygl::texture texture, GLenum internalformat, mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureBufferRange)(mygl::texture texture, GLenum internalformat, mygl::buffer buffer, GLintptr offset, GLsizeiptr size) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureParameterIiv)(mygl::texture texture, GLenum pname, const int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureParameterIuiv)(mygl::texture texture, GLenum pname, const unsigned int * params) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureParameterf)(mygl::texture texture, GLenum pname, float param) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureParameterfv)(mygl::texture texture, GLenum pname, const float * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureParameteri)(mygl::texture texture, GLenum pname, int param) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureParameteriv)(mygl::texture texture, GLenum pname, const int * param) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureStorage1D)(mygl::texture texture, int levels, GLenum internalformat, int width) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureStorage2D)(mygl::texture texture, int levels, GLenum internalformat, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureStorage2DMultisample)(mygl::texture texture, int samples, GLenum internalformat, int width, int height, bool fixedsamplelocations) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureStorage3D)(mygl::texture texture, int levels, GLenum internalformat, int width, int height, int depth) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureStorage3DMultisample)(mygl::texture texture, int samples, GLenum internalformat, int width, int height, int depth, bool fixedsamplelocations) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureSubImage1D)(mygl::texture texture, int level, int xoffset, int width, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureSubImage2D)(mygl::texture texture, int level, int xoffset, int yoffset, int width, int height, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureSubImage3D)(mygl::texture texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLenum format, GLenum type, const void * pixels) MYGL_NOEXCEPT;
extern void (APIENTRY*glTextureView)(mygl::texture texture, GLenum target, mygl::texture origtexture, GLenum internalformat, unsigned int minlevel, unsigned int numlevels, unsigned int minlayer, unsigned int numlayers) MYGL_NOEXCEPT;
extern void (APIENTRY*glTransformFeedbackBufferBase)(mygl::transform_feedback xfb, unsigned int index, mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glTransformFeedbackBufferRange)(mygl::transform_feedback xfb, unsigned int index, mygl::buffer buffer, GLintptr offset, GLsizeiptr size) MYGL_NOEXCEPT;
extern void (APIENTRY*glTransformFeedbackVaryings)(mygl::shader_program program, int count, const char *const* varyings, GLenum bufferMode) MYGL_NOEXCEPT;
extern void (APIENTRY*glTransformPathNV)(mygl::path resultPath, mygl::path srcPath, GLenum transformType, const float * transformValues) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1d)(int location, double x) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1dv)(int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1f)(int location, float v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1fv)(int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1i)(int location, int v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1i64ARB)(int location, int64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1i64NV)(int location, int64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1i64vARB)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1i64vNV)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1iv)(int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1ui)(int location, unsigned int v0) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1ui64ARB)(int location, uint64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1ui64NV)(int location, uint64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1ui64vARB)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1ui64vNV)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform1uiv)(int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2d)(int location, double x, double y) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2dv)(int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2f)(int location, float v0, float v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2fv)(int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2i)(int location, int v0, int v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2i64ARB)(int location, int64_t x, int64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2i64NV)(int location, int64_t x, int64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2i64vARB)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2i64vNV)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2iv)(int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2ui)(int location, unsigned int v0, unsigned int v1) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2ui64ARB)(int location, uint64_t x, uint64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2ui64NV)(int location, uint64_t x, uint64_t y) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2ui64vARB)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2ui64vNV)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform2uiv)(int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3d)(int location, double x, double y, double z) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3dv)(int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3f)(int location, float v0, float v1, float v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3fv)(int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3i)(int location, int v0, int v1, int v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3i64ARB)(int location, int64_t x, int64_t y, int64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3i64NV)(int location, int64_t x, int64_t y, int64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3i64vARB)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3i64vNV)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3iv)(int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3ui)(int location, unsigned int v0, unsigned int v1, unsigned int v2) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3ui64ARB)(int location, uint64_t x, uint64_t y, uint64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3ui64NV)(int location, uint64_t x, uint64_t y, uint64_t z) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3ui64vARB)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3ui64vNV)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform3uiv)(int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4d)(int location, double x, double y, double z, double w) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4dv)(int location, int count, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4f)(int location, float v0, float v1, float v2, float v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4fv)(int location, int count, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4i)(int location, int v0, int v1, int v2, int v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4i64ARB)(int location, int64_t x, int64_t y, int64_t z, int64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4i64NV)(int location, int64_t x, int64_t y, int64_t z, int64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4i64vARB)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4i64vNV)(int location, int count, const int64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4iv)(int location, int count, const int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4ui)(int location, unsigned int v0, unsigned int v1, unsigned int v2, unsigned int v3) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4ui64ARB)(int location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4ui64NV)(int location, uint64_t x, uint64_t y, uint64_t z, uint64_t w) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4ui64vARB)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4ui64vNV)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniform4uiv)(int location, int count, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformBlockBinding)(mygl::shader_program program, unsigned int uniformBlockIndex, unsigned int uniformBlockBinding) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformHandleui64ARB)(int location, uint64_t value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformHandleui64vARB)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix2dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix2fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix2x3dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix2x3fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix2x4dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix2x4fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix3dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix3fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix3x2dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix3x2fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix3x4dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix3x4fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix4dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix4fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix4x2dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix4x2fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix4x3dv)(int location, int count, bool transpose, const double * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformMatrix4x3fv)(int location, int count, bool transpose, const float * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformSubroutinesuiv)(GLenum shadertype, int count, const unsigned int * indices) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformui64NV)(int location, uint64_t value) MYGL_NOEXCEPT;
extern void (APIENTRY*glUniformui64vNV)(int location, int count, const uint64_t * value) MYGL_NOEXCEPT;
extern bool(APIENTRY*glUnmapBuffer)(GLenum target) MYGL_NOEXCEPT;
extern bool(APIENTRY*glUnmapNamedBuffer)(mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glUseProgram)(mygl::shader_program program) MYGL_NOEXCEPT;
extern void (APIENTRY*glUseProgramStages)(mygl::pipeline pipeline, GLbitfield stages, mygl::shader_program program) MYGL_NOEXCEPT;
extern void (APIENTRY*glValidateProgram)(mygl::shader_program program) MYGL_NOEXCEPT;
extern void (APIENTRY*glValidateProgramPipeline)(mygl::pipeline pipeline) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayAttribBinding)(mygl::vertex_array vaobj, unsigned int attribindex, unsigned int bindingindex) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayAttribFormat)(mygl::vertex_array vaobj, unsigned int attribindex, int size, GLenum type, bool normalized, unsigned int relativeoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayAttribIFormat)(mygl::vertex_array vaobj, unsigned int attribindex, int size, GLenum type, unsigned int relativeoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayAttribLFormat)(mygl::vertex_array vaobj, unsigned int attribindex, int size, GLenum type, unsigned int relativeoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayBindingDivisor)(mygl::vertex_array vaobj, unsigned int bindingindex, unsigned int divisor) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayElementBuffer)(mygl::vertex_array vaobj, mygl::buffer buffer) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayVertexBuffer)(mygl::vertex_array vaobj, unsigned int bindingindex, mygl::buffer buffer, GLintptr offset, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexArrayVertexBuffers)(mygl::vertex_array vaobj, unsigned int first, int count, const mygl::buffer * buffers, const GLintptr * offsets, const int * strides) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib1d)(unsigned int index, double x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib1dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib1f)(unsigned int index, float x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib1fv)(unsigned int index, const float * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib1s)(unsigned int index, short x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib1sv)(unsigned int index, const short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib2d)(unsigned int index, double x, double y) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib2dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib2f)(unsigned int index, float x, float y) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib2fv)(unsigned int index, const float * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib2s)(unsigned int index, short x, short y) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib2sv)(unsigned int index, const short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib3d)(unsigned int index, double x, double y, double z) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib3dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib3f)(unsigned int index, float x, float y, float z) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib3fv)(unsigned int index, const float * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib3s)(unsigned int index, short x, short y, short z) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib3sv)(unsigned int index, const short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Nbv)(unsigned int index, const signed char * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Niv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Nsv)(unsigned int index, const short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Nub)(unsigned int index, unsigned char x, unsigned char y, unsigned char z, unsigned char w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Nubv)(unsigned int index, const unsigned char * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Nuiv)(unsigned int index, const unsigned int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4Nusv)(unsigned int index, const unsigned short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4bv)(unsigned int index, const signed char * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4d)(unsigned int index, double x, double y, double z, double w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4f)(unsigned int index, float x, float y, float z, float w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4fv)(unsigned int index, const float * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4iv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4s)(unsigned int index, short x, short y, short z, short w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4sv)(unsigned int index, const short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4ubv)(unsigned int index, const unsigned char * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4uiv)(unsigned int index, const unsigned int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttrib4usv)(unsigned int index, const unsigned short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribBinding)(unsigned int attribindex, unsigned int bindingindex) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribDivisor)(unsigned int index, unsigned int divisor) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribFormat)(unsigned int attribindex, int size, GLenum type, bool normalized, unsigned int relativeoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribFormatNV)(unsigned int index, int size, GLenum type, bool normalized, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI1i)(unsigned int index, int x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI1iv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI1ui)(unsigned int index, unsigned int x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI1uiv)(unsigned int index, const unsigned int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI2i)(unsigned int index, int x, int y) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI2iv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI2ui)(unsigned int index, unsigned int x, unsigned int y) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI2uiv)(unsigned int index, const unsigned int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI3i)(unsigned int index, int x, int y, int z) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI3iv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI3ui)(unsigned int index, unsigned int x, unsigned int y, unsigned int z) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI3uiv)(unsigned int index, const unsigned int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4bv)(unsigned int index, const signed char * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4i)(unsigned int index, int x, int y, int z, int w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4iv)(unsigned int index, const int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4sv)(unsigned int index, const short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4ubv)(unsigned int index, const unsigned char * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4ui)(unsigned int index, unsigned int x, unsigned int y, unsigned int z, unsigned int w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4uiv)(unsigned int index, const unsigned int * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribI4usv)(unsigned int index, const unsigned short * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribIFormat)(unsigned int attribindex, int size, GLenum type, unsigned int relativeoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribIFormatNV)(unsigned int index, int size, GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribIPointer)(unsigned int index, int size, GLenum type, int stride, const void * pointer) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL1d)(unsigned int index, double x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL1dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL1ui64ARB)(unsigned int index, uint64_t x) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL1ui64vARB)(unsigned int index, const uint64_t * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL2d)(unsigned int index, double x, double y) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL2dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL3d)(unsigned int index, double x, double y, double z) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL3dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL4d)(unsigned int index, double x, double y, double z, double w) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribL4dv)(unsigned int index, const double * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribLFormat)(unsigned int attribindex, int size, GLenum type, unsigned int relativeoffset) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribLPointer)(unsigned int index, int size, GLenum type, int stride, const void * pointer) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP1ui)(unsigned int index, GLenum type, bool normalized, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP1uiv)(unsigned int index, GLenum type, bool normalized, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP2ui)(unsigned int index, GLenum type, bool normalized, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP2uiv)(unsigned int index, GLenum type, bool normalized, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP3ui)(unsigned int index, GLenum type, bool normalized, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP3uiv)(unsigned int index, GLenum type, bool normalized, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP4ui)(unsigned int index, GLenum type, bool normalized, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribP4uiv)(unsigned int index, GLenum type, bool normalized, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexAttribPointer)(unsigned int index, int size, GLenum type, bool normalized, int stride, const void * pointer) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexBindingDivisor)(unsigned int bindingindex, unsigned int divisor) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexFormatNV)(int size, GLenum type, int stride) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexP2ui)(GLenum type, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexP2uiv)(GLenum type, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexP3ui)(GLenum type, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexP3uiv)(GLenum type, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexP4ui)(GLenum type, unsigned int value) MYGL_NOEXCEPT;
extern void (APIENTRY*glVertexP4uiv)(GLenum type, const unsigned int * value) MYGL_NOEXCEPT;
extern void (APIENTRY*glViewport)(int x, int y, int width, int height) MYGL_NOEXCEPT;
extern void (APIENTRY*glViewportArrayv)(unsigned int first, int count, const float * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glViewportIndexedf)(unsigned int index, float x, float y, float w, float h) MYGL_NOEXCEPT;
extern void (APIENTRY*glViewportIndexedfv)(unsigned int index, const float * v) MYGL_NOEXCEPT;
extern void (APIENTRY*glWaitSync)(GLsync sync, GLbitfield flags, uint64_t timeout) MYGL_NOEXCEPT;
extern void (APIENTRY*glWeightPathsNV)(mygl::path resultPath, int numPaths, const mygl::path * paths, const float * weights) MYGL_NOEXCEPT;

#if defined(MYGL_IMPLEMENTATION)
#include "mygl_functions.inl"
#endif
