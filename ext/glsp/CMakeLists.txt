cmake_minimum_required(VERSION 3.9)
project(GLShader)

list(APPEND INCLUDES ${PROJECT_SOURCE_DIR}/include)

if (MSVC)
    list(APPEND LIBRARIES opengl32)
    #set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++latest")
elseif (UNIX)
    list(APPEND LIBRARIES dl stdc++fs)
endif()

file(GLOB_RECURSE SRC_CPP "${PROJECT_SOURCE_DIR}/src/*.cpp")
add_library(glsp ${SRC_CPP})
target_link_libraries(glsp ${LIBRARIES})
set_target_properties(glsp PROPERTIES LINKER_LANGUAGE CXX)
target_include_directories(glsp PUBLIC 
    $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>)
set_property(TARGET glsp PROPERTY CXX_STANDARD 17)
add_library(jbraun::glsp ALIAS glsp)

install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/glsp DESTINATION include FILES_MATCHING PATTERN *.hpp)
install (TARGETS glsp EXPORT glspTargets
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib 
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include)

install(EXPORT glspTargets
    FILE glspTargets.cmake
    NAMESPACE jbraun::
    DESTINATION lib/cmake/glsp
)

option(GLSP_BUILD_EXECUTABLE OFF "Builds the example executable(s).")

if(GLSP_BUILD_EXECUTABLE)
    file(GLOB children RELATIVE ${PROJECT_SOURCE_DIR}/examples ${PROJECT_SOURCE_DIR}/examples/*)
    message("[GLSP] Enabled Executables. Adding...")
    foreach(example ${children})
        if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/examples/${example})
            file(GLOB SOURCES ${PROJECT_SOURCE_DIR}/examples/${example}/*.cpp)
            add_executable(${example} ${SOURCES})
            target_link_libraries(${example} glsp)
            if(MSVC)
                target_link_libraries(${example} opengl32)
            endif()
            set_target_properties(${example} PROPERTIES LINKER_LANGUAGE CXX RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/examples/${example}" CXX_STANDARD 17)
            target_include_directories(${example} PUBLIC ${INCLUDES})
            target_include_directories(${example} PUBLIC ${PROJECT_SOURCE_DIR}/examples/${example})
        endif()
    endforeach()
endif()